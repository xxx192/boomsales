%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Road Map with Pointers-3 up-01.eps
%%Creator: Adobe Illustrator(R) 20.1
%%For: Ayib
%%CreationDate: 24/04/18
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 20.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 20.1.0 x174 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c132 79.159284, 2016/04/19-13:13:40        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Road Map with Pointers-3 up-01</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-04-24T21:21:22+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-04-24T21:21:22+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-04-24T21:21:22+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015.3 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9P4EuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqNxcCEKSvLlh&#xA;AtiTSj+kl/32fvyXCjjd+kl/32fvx4V40BrPmi20yya4kVS3SKJn4l2/lWisa/RlOfIMcbLlaPBL&#xA;PMRAP6vuY/8A8rSjKimmn1KV4GYA/wDEM138pj+b9ru/9D5/n/Z+1PdI84abqsZNuCsyislu5AkX&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:c1a02d31-ab23-4f21-a4f2-521d7fbcb3b3</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:c1a02d31-ab23-4f21-a4f2-521d7fbcb3b3</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:d6f9b4a4-1f05-6a4a-9520-04dd5a9ebd55</stRef:instanceID>
            <stRef:documentID>xmp.did:a7002aa7-5afb-4c0b-b410-c24bae6a1f44</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9055feea-6df3-418a-84b0-35eb367eec15</stEvt:instanceID>
                  <stEvt:when>2016-04-18T22:41:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c1a02d31-ab23-4f21-a4f2-521d7fbcb3b3</stEvt:instanceID>
                  <stEvt:when>2018-04-24T21:21:22+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>499.999987</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 1</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=250 G=101 B=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>250</xmpG:red>
                           <xmpG:green>101</xmpG:green>
                           <xmpG:blue>100</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=249 G=248 B=247</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>248</xmpG:green>
                           <xmpG:blue>247</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 3</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=250 G=139 B=101</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>250</xmpG:red>
                           <xmpG:green>139</xmpG:green>
                           <xmpG:blue>101</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=190 B=104</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>190</xmpG:green>
                           <xmpG:blue>104</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>65</xmpG:red>
                           <xmpG:green>64</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>88</xmpG:red>
                           <xmpG:green>89</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>109</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>113</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>130</xmpG:green>
                           <xmpG:blue>133</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>149</xmpG:green>
                           <xmpG:blue>152</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>167</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>172</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>188</xmpG:red>
                           <xmpG:green>190</xmpG:green>
                           <xmpG:blue>192</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>209</xmpG:red>
                           <xmpG:green>211</xmpG:green>
                           <xmpG:blue>212</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>231</xmpG:green>
                           <xmpG:blue>232</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.0153201 .0126345 .0151369 0 cmyk
f
476 476 mo
24 476 li
24 24 li
476 24 li
476 476 li
cp
.108888 .0372625 .039704 0 cmyk
f
gsave
476 476 mo
24 476 li
24 24 li
476 24 li
476 476 li
cp
clp
331.429 32.9959 mo
331.429 76.1298 li
331.429 83.4992 330.035 90.7242 327.366 97.4443 cv
300.75 44.3083 li
331.429 32.9959 li
cp
.363653 .107698 .667353 0 cmyk
f
406.613 424.844 mo
406.613 457.134 li
362.746 457.134 li
362.746 424.844 li
406.613 424.844 li
cp
f
285.446 392.421 mo
285.446 434.509 li
252.026 449.32 li
254.057 448.034 li
226.347 404.251 li
285.446 392.421 li
cp
f
110.398 434.257 mo
111.708 432.225 li
69.1753 404.816 li
86.6188 383.201 li
84.7073 381.65 li
131.58 410.382 li
110.398 434.257 li
cp
f
248.227 290.405 mo
237.708 294.757 228.271 301.441 220.685 310 cv
207.629 324.715 li
208.182 322.371 li
161.25 311.263 li
149.709 268.393 li
196.077 254.316 li
195.379 252.02 li
248.227 290.405 li
cp
f
243.526 139.749 mo
212.126 179.24 li
212.113 179.24 li
197.459 197.681 li
169.376 174.119 li
171.708 174.756 li
186.988 118.218 li
243.526 139.749 li
cp
f
93.5553 79.8326 mo
91.3313 111.197 li
57.5743 106.124 li
55.3743 55.4886 li
93.5553 79.8326 li
cp
f
102.968 227.555 mo
105.168 228.529 li
88.0374 228.529 li
84.4789 221.821 74.6452 201.096 72.5774 173.638 cv
128.563 169.382 li
102.968 227.555 li
cp
f
190.619 367.116 mo
188.298 430.638 li
180.484 433.331 171.877 433.692 163.594 431.312 cv
131.183 422.031 li
180.148 367.116 li
190.619 367.116 li
cp
f
368.865 412.822 mo
334.362 412.822 li
297.468 429.172 li
297.468 360.155 li
318.975 338.396 li
368.865 412.822 li
cp
f
410.592 261.745 mo
405.844 306.49 li
310.403 289.479 li
336.671 261.745 li
410.592 261.745 li
cp
f
454.928 208.188 mo
416.098 220.907 li
415.713 221.04 li
222.524 179.697 li
239.992 157.721 li
239.715 160.102 li
360.762 174.143 li
368.011 157.361 li
454.928 208.188 li
cp
f
187.042 117.988 mo
182.401 116.734 li
167.068 173.498 li
171.71 174.752 li
187.042 117.988 li
cp
121.672 196.99 mo
171.595 230.525 li
174.276 226.534 li
123.64 192.519 li
133.481 170.15 li
129.08 168.213 li
102.969 227.561 li
107.37 229.498 li
121.672 196.99 li
cp
115.526 158.236 mo
111.37 122.079 li
106.593 122.629 li
110.749 158.786 li
115.526 158.236 li
cp
91.3208 111.383 mo
96.1177 111.723 li
101.233 39.3411 li
96.4359 39.0018 li
93.936 74.3763 li
56.5323 50.521 li
53.946 54.5748 li
93.5503 79.8337 li
91.3208 111.383 li
cp
447.225 457.13 mo
411.421 457.13 li
411.421 424.844 li
406.613 424.844 li
406.613 457.13 li
362.743 457.13 li
362.743 424.844 li
357.935 424.844 li
357.935 458.189 li
314.644 484.755 li
317.158 488.854 li
361.018 461.939 li
406.613 461.939 li
406.613 486.804 li
411.421 486.804 li
411.421 461.939 li
449.672 461.939 li
475.634 426.259 li
471.746 423.43 li
447.225 457.13 li
cp
66.1198 174.433 mo
44.0489 169.549 li
34.3591 110.407 li
29.6138 111.184 li
38.993 168.43 li
13.7096 162.835 li
12.6706 167.53 li
65.0808 179.128 li
66.1198 174.433 li
cp
307.492 285.566 mo
273.943 253.339 li
303.183 231.667 li
332.245 259.43 li
307.492 285.566 li
cp
410.847 261.749 mo
410.847 256.941 li
336.601 256.941 li
270.616 193.907 li
215.909 257.781 li
219.562 260.909 li
270.966 200.891 li
299.654 228.297 li
238.56 273.58 li
241.423 277.442 li
270.025 256.243 li
307.652 292.389 li
336.671 261.749 li
410.847 261.749 li
cp
284.974 387.611 mo
221.141 400.39 li
206.589 417.993 li
202.841 422.526 198.247 426.088 193.18 428.602 cv
195.438 366.847 li
190.633 366.671 li
188.294 430.639 li
180.481 433.331 171.881 433.688 163.599 431.314 cv
129.845 421.643 li
128.521 426.266 li
148.538 432.002 li
140.769 486.465 li
145.529 487.144 li
153.205 433.339 li
162.275 435.938 li
166.454 437.135 170.704 437.715 174.916 437.715 cv
188.386 437.715 201.437 431.772 210.295 421.057 cv
222.191 406.666 li
249.998 450.602 li
254.061 448.031 li
226.353 404.25 li
285.918 392.326 li
284.974 387.611 li
cp
86.6236 383.202 mo
82.8821 380.18 li
50.8401 419.864 li
32.0821 390.947 li
32.0821 347.94 li
27.2734 347.94 li
27.2734 392.369 li
48.2234 424.666 li
48.2234 486.804 li
53.0321 486.804 li
53.0321 424.805 li
66.1379 408.573 li
109.103 436.267 li
111.708 432.227 li
69.1755 404.811 li
86.6236 383.202 li
cp
372.946 133.848 mo
357.764 168.951 li
240.269 155.324 li
239.714 160.101 li
360.759 174.139 li
368.015 157.362 li
459.291 210.808 li
461.719 206.657 li
369.938 152.916 li
377.359 135.757 li
372.946 133.848 li
cp
207.074 327.046 mo
208.181 322.366 li
161.245 311.257 li
149.709 268.389 li
196.075 254.322 li
194.679 249.719 li
148.459 263.743 li
141.079 236.32 li
136.436 237.569 li
155.927 309.998 li
106.128 298.211 li
48.8961 261.07 li
48.8961 236.945 li
44.0874 236.945 li
44.0874 263.681 li
102.041 301.291 li
72.0255 360.01 li
76.3071 362.199 li
89.7317 335.937 li
157.968 381.158 li
160.625 377.15 li
91.9344 331.629 li
106.452 303.229 li
207.074 327.046 li
cp
439.584 226.056 mo
434.915 227.204 li
449.641 287.088 li
411.56 307.944 li
413.87 312.161 li
450.829 291.919 li
467.098 358.072 li
471.767 356.924 li
454.906 288.359 li
476 215.365 li
471.38 214.03 li
452.604 279.001 li
439.584 226.056 li
cp
416.823 334.536 mo
347.018 371.599 li
322.7 335.321 li
318.706 337.998 li
369.759 414.161 li
373.753 411.484 li
349.71 375.615 li
419.078 338.784 li
416.823 334.536 li
cp
406.497 55.2392 mo
403.387 134.553 li
408.192 134.741 li
410.437 77.4727 li
416.856 74.8712 446.164 64.9656 467.584 90.7222 cv
471.281 87.6475 li
449.649 61.6355 420.674 68.728 410.641 72.2694 cv
411.411 52.6483 li
420.436 13.7397 li
415.752 12.6526 li
407.031 50.2492 li
339.407 62.7828 li
340.282 67.5105 li
406.497 55.2392 li
cp
219.852 123.932 mo
224.66 123.932 li
224.66 83.6072 li
267.356 83.6072 li
267.356 78.7985 li
185.385 78.7985 li
185.385 13.1962 li
180.576 13.1962 li
180.576 83.6072 li
219.852 83.6072 li
219.852 123.932 li
cp
296.208 45.9789 mo
323.983 101.413 li
328.282 99.2583 li
300.748 44.3056 li
332.261 32.691 li
330.598 28.1793 li
258.454 54.7691 li
260.117 59.2808 li
296.208 45.9789 li
cp
232.8 13.1962 mo
227.991 13.1962 li
227.991 45.2398 li
232.8 45.2398 li
232.8 13.1962 li
cp
0 0 0 0 cmyk
f
228.492 44.7397 mo
232.3 44.7397 li
232.3 13.6963 li
228.492 13.6963 li
228.492 44.7397 li
cp
233.3 45.7397 mo
227.492 45.7397 li
227.492 12.6963 li
233.3 12.6963 li
233.3 45.7397 li
cp
296.454 45.355 mo
324.206 100.742 li
327.612 99.0352 li
300.051 44.0298 li
331.619 32.3945 li
330.302 28.8213 li
259.096 55.0654 li
260.413 58.6387 li
296.454 45.355 li
cp
323.76 102.084 mo
295.961 46.603 li
259.82 59.9229 li
257.812 54.4727 li
330.894 27.5371 li
332.903 32.9873 li
301.445 44.5815 li
328.953 99.4814 li
323.76 102.084 li
cp
91.8549 110.92 mo
95.6542 111.188 li
100.699 39.8042 li
96.8993 39.5361 li
94.3754 75.25 li
56.685 51.2114 li
54.6366 54.4219 li
94.0697 79.5718 li
91.8549 110.92 li
cp
96.581 112.257 mo
90.7865 111.847 li
93.0307 80.0952 li
53.2558 54.7275 li
56.3793 49.8306 li
93.4965 73.5029 li
95.9726 38.4678 li
101.767 38.8774 li
101.731 39.376 li
96.581 112.257 li
cp
220.351 123.432 mo
224.16 123.432 li
224.16 83.1069 li
266.855 83.1069 li
266.855 79.2983 li
184.885 79.2983 li
184.885 13.6963 li
181.076 13.6963 li
181.076 83.1069 li
220.351 83.1069 li
220.351 123.432 li
cp
225.16 124.432 mo
219.351 124.432 li
219.351 84.1069 li
180.076 84.1069 li
180.076 12.6963 li
185.885 12.6963 li
185.885 78.2983 li
267.855 78.2983 li
267.855 84.1069 li
225.16 84.1069 li
225.16 124.432 li
cp
403.906 134.073 mo
407.712 134.222 li
409.951 77.1304 li
410.249 77.0093 li
416.039 74.6631 445.895 64.3159 467.647 90.0195 cv
470.576 87.584 li
449.473 62.6079 421.776 68.8691 410.808 72.7412 cv
410.113 72.9863 li
410.911 52.6289 li
419.836 14.1138 li
416.126 13.2529 li
407.444 50.6812 li
339.989 63.1831 li
340.683 66.9282 li
407.02 54.6338 li
403.906 134.073 li
cp
408.672 135.26 mo
402.868 135.033 li
405.973 55.8447 li
339.882 68.0933 li
338.824 62.3823 li
406.618 49.8169 li
415.378 12.0527 li
421.036 13.3657 li
411.897 52.7612 li
411.169 71.5576 li
422.831 67.5923 450.552 61.9395 471.665 87.3276 cv
471.985 87.7124 li
467.52 91.4263 li
467.2 91.042 li
446.215 65.8091 417.294 75.2983 410.924 77.8164 cv
408.672 135.26 li
cp
107.147 123.068 mo
111.188 158.232 li
114.972 157.797 li
110.931 122.633 li
107.147 123.068 li
cp
110.309 159.339 mo
106.039 122.189 li
111.809 121.525 li
116.079 158.676 li
110.309 159.339 li
cp
167.682 173.146 mo
171.358 174.139 li
186.429 118.341 li
182.753 117.348 li
167.682 173.146 li
cp
172.063 175.365 mo
166.455 173.851 li
182.048 116.121 li
187.656 117.636 li
172.063 175.365 li
cp
13.267 167.149 mo
64.7006 178.532 li
65.5234 174.814 li
43.6103 169.964 li
43.5551 169.63 li
33.9462 110.981 li
30.1879 111.597 li
39.6059 169.078 li
14.0898 163.431 li
13.267 167.149 li
cp
65.4614 179.725 mo
12.0746 167.91 li
13.329 162.239 li
38.3803 167.782 li
29.0395 110.772 li
34.7714 109.833 li
44.4872 169.134 li
66.7157 174.053 li
65.4614 179.725 li
cp
367.78 156.645 mo
459.112 210.124 li
461.035 206.836 li
369.303 153.124 li
376.702 136.018 li
373.206 134.505 li
358.076 169.49 li
240.707 155.878 li
240.268 159.662 li
360.448 173.599 li
367.78 156.645 li
cp
459.47 211.493 mo
459.038 211.24 li
368.25 158.079 li
361.071 174.678 li
360.702 174.635 li
239.16 160.54 li
239.829 154.77 li
357.453 168.411 li
372.686 133.19 li
378.016 135.497 li
370.573 152.708 li
462.403 206.478 li
459.47 211.493 li
cp
121.455 196.242 mo
171.459 229.831 li
173.582 226.67 li
123.014 192.701 li
132.822 170.406 li
129.336 168.872 li
103.628 227.305 li
107.114 228.839 li
121.455 196.242 li
cp
171.731 231.219 mo
121.89 197.738 li
107.626 230.157 li
102.309 227.817 li
128.824 167.554 li
134.14 169.894 li
124.265 192.337 li
174.97 226.398 li
171.731 231.219 li
cp
274.716 253.389 mo
307.475 284.857 li
331.539 259.447 li
303.142 232.32 li
274.716 253.389 li
cp
307.508 286.275 mo
273.17 253.289 li
303.223 231.015 li
332.951 259.412 li
307.508 286.275 li
cp
270.066 255.59 mo
307.636 291.681 li
336.456 261.249 li
410.347 261.249 li
410.347 257.44 li
336.4 257.44 li
336.256 257.302 li
270.652 194.633 li
216.615 257.727 li
219.507 260.204 li
270.93 200.165 li
300.429 228.345 li
239.26 273.684 li
241.527 276.743 li
270.066 255.59 li
cp
307.669 293.099 mo
269.983 256.896 li
241.319 278.142 li
237.861 273.477 li
298.88 228.249 li
271.002 201.617 li
219.616 261.614 li
215.204 257.836 li
270.579 193.181 li
270.961 193.546 li
336.801 256.44 li
411.347 256.44 li
411.347 262.249 li
336.887 262.249 li
307.669 293.099 li
cp
451.16 291.169 mo
467.464 357.468 li
471.162 356.558 li
454.388 288.349 li
454.425 288.221 li
475.381 215.706 li
471.722 214.649 li
452.565 280.936 li
439.218 226.661 li
435.52 227.57 li
450.219 287.342 li
412.239 308.142 li
414.068 311.482 li
451.16 291.169 li
cp
466.731 358.677 mo
450.499 292.671 li
413.671 312.84 li
410.881 307.745 li
449.064 286.834 li
434.31 226.838 li
439.95 225.451 li
452.643 277.065 li
471.039 213.411 li
476.619 215.023 li
455.423 288.37 li
472.372 357.29 li
466.731 358.677 li
cp
89.5414 335.212 mo
90.0082 335.521 li
157.827 380.464 li
159.932 377.29 li
91.2861 331.799 li
106.185 302.652 li
106.567 302.743 li
206.703 326.444 li
207.58 322.737 li
160.84 311.675 li
149.1 268.052 li
195.451 253.988 li
194.345 250.343 li
148.11 264.371 li
140.726 236.933 li
137.048 237.922 li
156.628 310.678 li
105.856 298.631 li
48.3959 261.341 li
48.3959 237.444 li
44.5873 237.444 li
44.5873 263.409 li
102.691 301.117 li
72.6982 359.793 li
76.0893 361.526 li
89.5414 335.212 li
cp
158.108 381.851 mo
89.9223 336.663 li
76.5248 362.872 li
71.3525 360.228 li
101.39 301.465 li
43.5873 263.952 li
43.5873 236.444 li
49.3959 236.444 li
49.3959 260.798 li
106.328 297.744 li
155.226 309.318 li
135.823 237.216 li
141.432 235.707 li
148.807 263.115 li
195.012 249.096 li
196.698 254.654 li
150.318 268.727 li
161.65 310.839 li
208.783 321.995 li
207.446 327.647 li
106.718 303.807 li
92.5829 331.459 li
161.318 377.009 li
158.108 381.851 li
cp
319.4 338.135 mo
369.896 413.468 li
373.059 411.348 li
348.986 375.434 li
418.402 338.576 li
416.616 335.212 li
346.854 372.253 li
322.563 336.015 li
319.4 338.135 li
cp
369.622 414.854 mo
369.344 414.44 li
318.012 337.861 li
322.837 334.628 li
347.182 370.946 li
417.03 333.86 li
419.754 338.99 li
350.433 375.797 li
374.447 411.621 li
369.622 414.854 li
cp
48.7236 486.305 mo
52.5322 486.305 li
52.5322 424.628 li
66.0312 407.909 li
66.4091 408.153 li
108.953 435.576 li
111.016 432.376 li
68.4369 404.93 li
85.9203 383.276 li
82.957 380.883 li
50.7963 420.714 li
31.582 391.095 li
31.582 348.44 li
27.7734 348.44 li
27.7734 392.221 li
48.7236 424.518 li
48.7236 486.305 li
cp
53.5322 487.305 mo
47.7236 487.305 li
47.7236 424.815 li
26.7734 392.517 li
26.7734 347.44 li
32.582 347.44 li
32.582 390.799 li
50.8847 419.013 li
82.8075 379.477 li
87.3266 383.126 li
69.9145 404.691 li
112.399 432.077 li
109.252 436.959 li
66.245 409.237 li
53.5322 424.981 li
53.5322 487.305 li
cp
141.334 486.04 mo
145.105 486.578 li
152.791 432.7 li
162.412 435.457 li
166.484 436.623 170.691 437.215 174.916 437.215 cv
188.499 437.215 201.254 431.209 209.91 420.738 cv
222.245 405.816 li
250.153 449.912 li
253.371 447.876 li
225.541 403.902 li
285.33 391.934 li
284.582 388.2 li
221.413 400.845 li
206.974 418.311 li
203.25 422.816 198.684 426.43 193.402 429.051 cv
192.65 429.424 li
194.92 367.328 li
191.114 367.189 li
188.781 431.001 li
188.457 431.112 li
180.322 433.913 171.679 434.15 163.461 431.795 cv
130.188 422.261 li
129.14 425.924 li
149.095 431.642 li
141.334 486.04 li
cp
145.953 487.709 mo
140.203 486.89 li
147.982 432.362 li
127.903 426.609 li
129.502 421.024 li
163.737 430.834 li
171.646 433.102 179.962 432.908 187.807 430.277 cv
190.151 366.153 li
195.956 366.365 li
193.711 427.772 li
198.548 425.249 202.747 421.855 206.203 417.675 cv
220.869 399.935 li
221.043 399.899 li
285.367 387.022 li
286.507 392.719 li
286.016 392.816 li
227.164 404.598 li
254.751 448.186 li
249.843 451.291 li
222.138 407.516 li
210.681 421.375 li
201.834 432.077 188.798 438.215 174.916 438.215 cv
170.598 438.215 166.298 437.61 162.137 436.418 cv
153.619 433.978 li
145.953 487.709 li
cp
315.331 484.92 mo
317.323 488.167 li
360.877 461.44 li
407.113 461.44 li
407.113 486.305 li
410.921 486.305 li
410.921 461.44 li
449.418 461.44 li
474.936 426.369 li
471.856 424.128 li
447.479 457.631 li
410.921 457.631 li
410.921 425.345 li
407.113 425.345 li
407.113 457.631 li
362.244 457.631 li
362.244 425.345 li
358.434 425.345 li
358.434 458.47 li
358.196 458.615 li
315.331 484.92 li
cp
316.994 489.542 mo
313.956 484.59 li
357.434 457.909 li
357.434 424.345 li
363.244 424.345 li
363.244 456.631 li
406.113 456.631 li
406.113 424.345 li
411.921 424.345 li
411.921 456.631 li
446.97 456.631 li
471.636 422.731 li
476.332 426.148 li
449.927 462.44 li
411.921 462.44 li
411.921 487.305 li
406.113 487.305 li
406.113 462.44 li
361.159 462.44 li
316.994 489.542 li
cp
.307652 .170047 .15433 0 cmyk
f
405.839 306.491 mo
290.129 285.869 li
279.002 283.884 267.443 284.49 256.566 287.549 cv
180.62 232.386 li
217.497 185.994 li
414.168 228.083 li
405.839 306.491 li
cp
431.973 364.711 mo
448.449 364.711 li
448.449 412.823 li
334.364 412.823 li
297.468 429.177 li
297.468 360.155 li
352.663 304.341 li
406.601 313.955 li
431.973 364.711 li
cp
190.304 355.094 mo
226.076 314.786 li
234.34 305.466 245.003 298.601 256.911 294.934 cv
267.207 291.76 278.257 291.082 288.864 292.969 cv
344.038 302.804 li
292.329 355.094 li
190.304 355.094 li
cp
172.936 228.529 mo
88.0427 228.529 li
84.4822 221.821 74.643 201.091 72.5832 173.64 cv
143.671 168.241 li
189.978 207.09 li
172.936 228.529 li
cp
80.2922 118.047 mo
124.764 124.723 li
126.218 124.942 127.672 125.048 129.118 125.048 cv
138.932 125.048 148.305 120.126 153.819 111.799 cv
157.097 106.846 li
243.524 139.746 li
212.126 179.242 li
212.114 179.242 li
197.461 197.676 li
147.644 155.882 li
72.2131 161.629 li
72.4202 146.688 75.1255 132.068 80.2922 118.047 cv
cp
57.5711 106.127 mo
55.2392 52.5479 li
85.8135 30.435 li
145.741 70.6433 li
155.374 77.1085 158.001 90.2361 151.597 99.9075 cv
146.802 107.155 li
142.275 113.988 134.116 117.616 126.013 116.401 cv
57.5711 106.127 li
cp
226.984 52.3266 mo
250.516 52.3266 269.661 71.4769 269.661 95.0161 cv
269.661 134.146 li
249.09 134.146 li
160.837 100.552 li
166.77 87.6109 162.604 71.8267 150.431 63.6557 cv
133.546 52.3266 li
226.984 52.3266 li
cp
488.681 209.789 mo
484.939 198.365 li
416.095 220.912 li
415.71 221.037 li
222.519 179.692 li
252.036 142.562 li
273.412 142.562 li
291.505 142.562 308.868 135.102 321.37 122.063 cv
407.316 142.421 li
488.906 84.1372 li
484.714 78.2684 li
405.79 134.647 li
326.626 115.895 li
335.188 104.451 339.845 90.5503 339.845 76.13 cv
339.845 13.1962 li
331.429 13.1962 li
331.429 76.13 li
331.429 90.5613 326.091 104.398 316.399 115.09 cv
306.193 126.342 291.943 133.126 276.874 134.033 cv
276.874 95.0161 li
276.874 67.4999 254.494 45.1136 226.984 45.1136 cv
122.795 45.1136 li
70.0163 9.7018 li
65.3285 16.6906 li
79.4287 26.1511 li
47.8641 48.9802 li
50.304 105.036 li
13.8147 99.5583 li
12.5656 107.881 li
73.0266 116.957 li
67.1789 133.358 64.4909 150.516 65.0538 168.043 cv
65.9578 196.358 74.9434 218.383 79.9221 228.529 cv
13.1901 228.529 li
13.1901 236.945 li
174.622 236.945 li
248.226 290.408 li
237.702 294.754 228.274 301.436 220.68 309.999 cv
180.66 355.094 li
180.136 355.684 li
177.45 358.711 li
139.683 401.255 li
16.3312 325.662 li
10.0491 335.911 li
131.579 410.387 li
65.8891 484.411 li
71.2836 489.198 li
180.148 367.116 li
285.446 367.116 li
285.446 434.505 li
179.852 481.309 li
184.723 492.3 li
336.91 424.844 li
486.81 424.844 li
486.81 412.823 li
455.662 412.823 li
455.662 364.711 li
486.81 364.711 li
486.81 357.498 li
436.432 357.498 li
412.715 310.053 li
421.011 231.947 li
488.681 209.789 li
cp
0 .561456 .61062 0 cmyk
f
58.5346 105.26 mo
126.161 115.412 li
133.883 116.567 141.657 113.112 145.969 106.603 cv
150.763 99.356 li
156.865 90.1411 154.362 77.6333 145.183 71.4741 cv
85.8349 31.6538 li
56.2616 53.0425 li
58.5346 105.26 li
cp
129.122 117.633 mo
128.041 117.633 126.953 117.553 125.865 117.39 cv
56.6078 106.994 li
54.2167 52.0532 li
85.7919 29.2163 li
146.298 69.813 li
156.387 76.5835 159.138 90.3315 152.431 100.46 cv
147.636 107.706 li
143.504 113.944 136.479 117.633 129.122 117.633 cv
cp
249.274 133.146 mo
268.661 133.146 li
268.661 95.0161 li
268.661 72.0283 249.965 53.3267 226.984 53.3267 cv
136.831 53.3267 li
150.988 62.8252 li
163.005 70.8911 167.7 86.7036 162.174 99.9902 cv
249.274 133.146 li
cp
270.661 135.146 mo
248.906 135.146 li
159.483 101.106 li
159.928 100.135 li
165.704 87.5361 161.382 72.2104 149.874 64.4858 cv
130.261 51.3267 li
226.984 51.3267 li
251.068 51.3267 270.661 70.9258 270.661 95.0161 cv
270.661 135.146 li
cp
147.974 154.854 mo
197.317 196.25 li
241.89 140.194 li
157.489 108.065 li
154.653 112.351 li
148.973 120.927 139.427 126.047 129.118 126.048 cv
127.61 126.048 126.096 125.935 124.615 125.711 cv
80.9516 119.158 li
76.142 132.462 73.5468 146.379 73.2328 160.548 cv
147.974 154.854 li
cp
197.605 199.102 mo
147.313 156.91 li
71.1982 162.709 li
71.2133 161.615 li
71.4218 146.568 74.1611 131.794 79.3539 117.702 cv
79.6357 116.938 li
124.912 123.734 li
126.295 123.942 127.71 124.048 129.118 124.048 cv
138.754 124.047 147.677 119.262 152.985 111.247 cv
156.704 105.627 li
245.158 139.297 li
197.605 199.102 li
cp
88.6464 227.529 mo
172.453 227.529 li
188.589 207.23 li
143.34 169.269 li
73.6591 174.562 li
75.7797 200.342 84.6093 219.804 88.6464 227.529 cv
cp
173.418 229.529 mo
87.4413 229.529 li
87.1596 228.998 li
83.1586 221.46 73.6322 200.985 71.5864 173.715 cv
71.5116 172.719 li
144.001 167.213 li
191.367 206.95 li
173.418 229.529 li
cp
277.094 283.725 mo
281.534 283.725 285.961 284.109 290.305 284.885 cv
404.958 305.318 li
413.078 228.873 li
217.894 187.101 li
182.053 232.191 li
256.763 286.457 li
263.385 284.64 270.253 283.725 277.094 283.725 cv
cp
406.72 307.664 mo
289.954 286.853 li
279.054 284.91 267.603 285.482 256.837 288.513 cv
256.37 288.644 li
255.978 288.359 li
179.187 232.581 li
217.1 184.886 li
217.707 185.016 li
415.257 227.294 li
406.72 307.664 li
cp
192.528 354.094 mo
291.911 354.094 li
341.989 303.454 li
288.689 293.954 li
278.234 292.094 267.349 292.763 257.205 295.89 cv
245.472 299.503 234.967 306.268 226.824 315.449 cv
192.528 354.094 li
cp
292.746 356.094 mo
188.079 356.094 li
225.328 314.122 li
233.714 304.666 244.533 297.7 256.617 293.978 cv
267.061 290.758 278.272 290.067 289.039 291.985 cv
346.088 302.153 li
292.746 356.094 li
cp
298.468 360.566 mo
298.468 427.64 li
334.153 411.822 li
447.449 411.822 li
447.449 365.711 li
431.355 365.711 li
405.931 314.852 li
353.004 305.417 li
298.468 360.566 li
cp
296.468 430.714 mo
296.468 359.744 li
352.321 303.265 li
407.271 313.059 li
432.592 363.711 li
449.449 363.711 li
449.449 413.822 li
334.576 413.822 li
296.468 430.714 li
cp
181.172 481.817 mo
185.233 490.98 li
336.698 423.845 li
485.81 423.845 li
485.81 413.822 li
454.661 413.822 li
454.661 363.711 li
485.81 363.711 li
485.81 358.498 li
435.814 358.498 li
411.69 310.238 li
420.085 231.198 li
487.419 209.15 li
484.3 199.626 li
415.763 222.071 li
220.733 180.332 li
251.554 141.561 li
273.412 141.561 li
291.129 141.561 308.346 134.202 320.649 121.371 cv
321.044 120.958 li
407.104 141.344 li
487.511 83.9048 li
484.481 79.6636 li
406.001 135.725 li
324.912 116.517 li
325.826 115.296 li
334.343 103.911 338.845 90.3677 338.845 76.1299 cv
338.845 14.1963 li
332.43 14.1963 li
332.43 76.1299 li
332.43 90.8096 327 104.885 317.14 115.762 cv
306.866 127.088 292.211 134.112 276.934 135.031 cv
275.874 135.095 li
275.874 95.0161 li
275.874 68.0513 253.942 46.1138 226.984 46.1138 cv
122.491 46.1138 li
70.2895 11.0894 li
66.7157 16.417 li
81.1777 26.1206 li
48.8866 49.4746 li
51.3559 106.205 li
14.6552 100.695 li
13.7026 107.04 li
74.3769 116.148 li
73.9687 117.293 li
68.1591 133.585 65.496 150.65 66.0531 168.011 cv
66.9443 195.917 75.6874 217.629 80.8202 228.089 cv
81.5268 229.529 li
14.1904 229.529 li
14.1904 235.944 li
174.947 235.944 li
175.21 236.135 li
250.261 290.65 li
248.608 291.332 li
238.246 295.611 228.848 302.295 221.429 310.662 cv
139.875 402.545 li
16.6611 327.037 li
11.4242 335.581 li
133.119 410.159 li
67.3007 484.327 li
71.2011 487.788 li
179.7 366.115 li
286.446 366.115 li
286.446 435.155 li
181.172 481.817 li
cp
184.214 493.619 mo
178.533 480.8 li
284.446 433.854 li
284.446 368.115 li
180.596 368.115 li
71.3661 490.608 li
64.4775 484.495 li
130.039 410.616 li
8.67418 336.241 li
16.0009 324.287 li
139.492 399.965 li
219.932 309.335 li
227.161 301.184 236.217 294.588 246.212 290.181 cv
174.297 237.944 li
12.1904 237.944 li
12.1904 227.529 li
78.3295 227.529 li
73.0688 216.449 64.9184 195.131 64.0541 168.075 cv
63.5019 150.869 66.0678 133.95 71.6821 117.766 cv
11.4281 108.721 li
12.9745 98.4209 li
49.2524 103.867 li
46.8417 48.4854 li
77.6796 26.1821 li
63.9413 16.9639 li
69.7426 8.314 li
123.1 44.1138 li
226.984 44.1138 li
255.045 44.1138 277.874 66.9482 277.874 95.0161 cv
277.874 132.961 li
292.25 131.818 305.971 125.098 315.659 114.419 cv
325.184 103.91 330.43 90.312 330.43 76.1299 cv
330.43 12.1963 li
340.845 12.1963 li
340.845 76.1299 li
340.845 90.2959 336.52 103.794 328.323 115.269 cv
405.578 133.57 li
484.946 76.8735 li
490.301 84.3696 li
407.527 143.499 li
321.694 123.167 li
309.044 136.135 291.481 143.561 273.412 143.561 cv
252.518 143.561 li
224.306 179.052 li
415.658 220.002 li
415.787 219.96 li
485.578 197.103 li
489.943 210.428 li
421.937 232.696 li
413.741 309.867 li
437.05 356.498 li
487.81 356.498 li
487.81 365.711 li
456.661 365.711 li
456.661 411.822 li
487.81 411.822 li
487.81 425.845 li
337.121 425.845 li
184.214 493.619 li
cp
.0393378 .664881 .689998 .00030518 cmyk
f
117.116 104.541 mo
102.891 103.122 li
105.003 81.9325 li
119.228 83.3508 li
117.116 104.541 li
cp
.307652 .170047 .15433 0 cmyk
f
120.449 66.9881 mo
107.484 59.5028 li
110.603 54.1007 li
123.567 61.586 li
120.449 66.9881 li
cp
f
135.506 96.9416 mo
125.419 95.936 li
127.309 76.9767 li
137.396 77.9823 li
135.506 96.9416 li
cp
f
126.051 145.993 mo
119.842 146.863 li
117.68 131.434 li
123.889 130.564 li
126.051 145.993 li
cp
f
170.599 139.664 mo
152.359 139.664 li
152.359 125.794 li
174.035 125.794 li
170.599 139.664 li
cp
f
167.068 152.261 mo
152.359 152.261 li
152.359 144.436 li
168.531 144.436 li
167.068 152.261 li
cp
f
144.894 145.743 mo
132.452 145.743 li
132.452 130.11 li
144.894 130.11 li
144.894 145.743 li
cp
f
211.763 106.846 mo
199.042 106.846 li
199.042 90.2126 li
211.763 90.2126 li
211.763 106.846 li
cp
f
255.986 95.059 mo
233.168 95.059 li
233.168 89.203 li
255.986 89.203 li
255.986 95.059 li
cp
f
262.044 113.031 mo
247.909 113.031 li
247.909 101.413 li
262.044 101.413 li
262.044 113.031 li
cp
f
245.486 123.932 mo
235.591 123.932 li
235.591 117.675 li
245.486 117.675 li
245.486 123.932 li
cp
f
205.403 73.781 mo
195.93 73.781 li
195.93 58.7873 li
205.403 58.7873 li
205.403 73.781 li
cp
f
243.524 71.0271 mo
214.442 71.0271 li
214.442 61.5413 li
243.524 61.5413 li
243.524 71.0271 li
cp
f
299.801 75.7452 mo
293.563 78.6103 li
284.049 57.8941 li
290.287 55.029 li
299.801 75.7452 li
cp
f
301.344 113.031 mo
284.209 113.031 li
284.209 93.2366 li
301.344 93.2366 li
301.344 113.031 li
cp
f
314.349 101.413 mo
307.77 101.413 li
307.77 93.2366 li
314.349 93.2366 li
314.349 101.413 li
cp
f
370.366 81.5537 mo
350.352 81.5537 li
350.352 70.0894 li
370.366 70.0894 li
370.366 81.5537 li
cp
f
387.076 95.9326 mo
376.195 95.9326 li
376.195 70.0894 li
387.076 70.0894 li
387.076 95.9326 li
cp
f
372.697 114.003 mo
349.46 114.003 li
349.46 103.134 li
372.697 103.134 li
372.697 114.003 li
cp
f
396.209 122.359 mo
390.768 122.359 li
390.768 109.729 li
396.209 109.729 li
396.209 122.359 li
cp
f
434.876 94.3781 mo
424.967 94.3781 li
424.967 81.5537 li
434.876 81.5537 li
434.876 94.3781 li
cp
f
424.967 111.672 mo
417.972 111.672 li
417.972 102.345 li
424.967 102.345 li
424.967 111.672 li
cp
f
403.01 158.111 mo
386.105 158.111 li
386.105 147.813 li
403.01 147.813 li
403.01 158.111 li
cp
f
434.876 167.827 mo
417.972 167.827 li
417.972 145.093 li
434.876 133.848 li
434.876 167.827 li
cp
f
459.205 159.86 mo
438.568 159.86 li
438.568 167.827 li
459.205 167.827 li
459.205 159.86 li
cp
f
465.577 146.453 mo
447.312 146.453 li
447.312 132.074 li
465.577 132.074 li
465.577 146.453 li
cp
f
464.217 193.907 mo
454.89 193.907 li
454.89 182.789 li
464.217 182.789 li
464.217 193.907 li
cp
f
346.662 149.083 mo
328.83 149.083 li
328.83 139.263 li
346.662 139.263 li
346.662 149.083 li
cp
f
218.713 231.667 mo
199.762 231.667 li
199.762 223.03 li
218.713 223.03 li
218.713 231.667 li
cp
f
234.054 211.118 mo
226.113 211.118 li
226.113 198.385 li
234.054 198.385 li
234.054 211.118 li
cp
f
248.312 208.772 mo
242.356 208.772 li
242.356 201.733 li
248.312 201.733 li
248.312 208.772 li
cp
f
247.726 256.24 mo
238.704 263.161 li
234.64 257.862 li
243.661 250.942 li
247.726 256.24 li
cp
f
271.633 237.316 mo
259.318 246.763 li
252.785 238.247 li
265.1 228.8 li
271.633 237.316 li
cp
f
128.464 274.072 mo
111.708 274.072 li
111.708 255.681 li
128.464 255.681 li
128.464 274.072 li
cp
f
142.118 297.758 mo
133.48 297.758 li
133.48 283.268 li
142.118 283.268 li
142.118 297.758 li
cp
f
97.2546 255.681 mo
62.4227 255.681 li
62.4227 246.242 li
97.2546 246.242 li
97.2546 255.681 li
cp
f
125.102 332.869 mo
110.907 332.869 li
110.907 323.509 li
125.102 323.509 li
125.102 332.869 li
cp
f
141.638 342.541 mo
131.03 342.541 li
131.03 323.509 li
141.638 323.509 li
141.638 342.541 li
cp
f
166.908 360.168 mo
153.181 360.168 li
153.181 341.137 li
183.6 341.137 li
166.908 360.168 li
cp
f
172.68 324.914 mo
153.181 320.858 li
153.181 335.989 li
172.68 335.989 li
172.68 324.914 li
cp
f
61.1272 338.194 mo
38.3129 326.344 li
38.3129 299.816 li
61.1272 299.816 li
61.1272 338.194 li
cp
f
82.1729 318.032 mo
66.9634 318.032 li
66.9634 290.513 li
82.1729 299.816 li
82.1729 318.032 li
cp
f
56.5289 283.268 mo
38.3129 271.519 li
38.3129 293.803 li
56.5289 293.803 li
56.5289 283.268 li
cp
f
273.19 335.521 mo
242.596 335.521 li
242.596 346.583 li
273.19 346.583 li
273.19 335.521 li
cp
f
237.583 346.583 mo
224.274 346.583 li
224.274 335.521 li
237.583 335.521 li
237.583 346.583 li
cp
f
279.758 308.739 mo
254.004 308.739 li
254.004 328.088 li
279.758 328.088 li
279.758 308.739 li
cp
f
308.36 326.624 mo
290.475 343.645 li
290.475 308.739 li
308.36 308.739 li
308.36 326.624 li
cp
f
374.888 244.275 mo
343.859 238.684 li
346.446 224.333 li
377.474 229.925 li
374.888 244.275 li
cp
f
449.537 325.933 mo
433.182 325.933 li
433.182 315.687 li
449.537 315.687 li
449.537 325.933 li
cp
f
460.122 348.2 mo
439.684 348.2 li
433.571 335.392 li
456.631 335.392 li
460.122 348.2 li
cp
f
387.228 387.473 mo
370.618 387.473 li
370.618 373.139 li
387.228 365.406 li
387.228 387.473 li
cp
f
418.171 373.139 mo
397.239 373.139 li
397.239 363.811 li
418.171 363.811 li
418.171 373.139 li
cp
f
429.32 405.675 mo
398.831 405.675 li
398.831 393.844 li
429.32 393.844 li
429.32 405.675 li
cp
f
438.193 386.108 mo
418.171 386.108 li
418.171 379.055 li
438.193 379.055 li
438.193 386.108 li
cp
f
316.105 467.256 mo
291.024 467.256 li
291.024 453.725 li
316.105 443.165 li
316.105 467.256 li
cp
f
334.421 458.181 mo
325.181 458.181 li
325.181 439.865 li
334.421 436.4 li
334.421 458.181 li
cp
f
351.087 451.415 mo
342.341 451.415 li
342.341 438.215 li
351.087 438.215 li
351.087 451.415 li
cp
f
360.913 343.645 mo
341.091 343.645 li
341.091 329.769 li
360.913 329.769 li
360.913 343.645 li
cp
f
393.889 333.533 mo
378.923 333.533 li
378.923 317.315 li
393.889 319.478 li
393.889 333.533 li
cp
f
359.651 359.301 mo
349.38 364.556 li
349.38 351.012 li
359.651 351.012 li
359.651 359.301 li
cp
f
231.974 451.415 mo
213.012 451.415 li
213.012 438.215 li
231.974 438.215 li
231.974 451.415 li
cp
f
181.214 463.75 mo
162.252 463.75 li
162.252 450.039 li
181.214 450.039 li
181.214 463.75 li
cp
f
203.093 462.583 mo
190.304 462.583 li
190.304 443.165 li
203.093 443.165 li
203.093 462.583 li
cp
f
67.8471 454.43 mo
56.9569 454.43 li
56.9569 435.116 li
67.8471 435.116 li
67.8471 454.43 li
cp
f
86.3398 446.417 mo
77.2989 446.417 li
77.2989 430.595 li
86.3398 430.595 li
86.3398 446.417 li
cp
f
127.229 466.142 mo
111.708 466.142 li
111.708 454.43 li
127.229 454.43 li
127.229 466.142 li
cp
f
140.996 460.286 mo
133.804 460.286 li
133.804 439.431 li
143.881 439.431 li
140.996 460.286 li
cp
f
48.0817 384.162 mo
37.2679 384.162 li
37.2679 366.671 li
48.0817 366.671 li
48.0817 384.162 li
cp
f
62.402 394.648 mo
50.4247 407.554 li
50.4247 391.371 li
62.402 391.371 li
62.402 394.648 li
cp
f
64.7092 384.793 mo
50.4247 384.793 li
50.4247 377.731 li
64.7092 377.731 li
64.7092 384.793 li
cp
f
grestore
348.547 91.2964 mo
348.547 91.2964 li
342.355 85.1047 332.316 85.1047 326.125 91.2964 cv
326.125 91.2964 li
319.933 97.4881 319.933 107.527 326.125 113.718 cv
337.336 124.93 li
348.547 113.718 li
354.739 107.527 354.739 97.4881 348.547 91.2964 cv
cp
.0193179 .730007 .668544 .000396735 cmyk
f
345.513 110.685 mo
340.997 115.201 333.675 115.201 329.158 110.685 cv
324.642 106.169 324.642 98.8463 329.158 94.33 cv
333.675 89.8137 340.997 89.8137 345.513 94.33 cv
350.03 98.8463 350.03 106.169 345.513 110.685 cv
cp
0 0 0 0 cmyk
f
261.211 61.3004 mo
261.211 61.3004 li
255.019 55.1087 244.981 55.1087 238.789 61.3004 cv
238.789 61.3004 li
232.597 67.4922 232.597 77.5309 238.789 83.7226 cv
250 94.9337 li
261.211 83.7226 li
267.403 77.5309 267.403 67.4922 261.211 61.3004 cv
cp
.0193179 .730007 .668544 .000396735 cmyk
f
258.177 80.689 mo
253.661 85.2053 246.339 85.2053 241.822 80.689 cv
237.306 76.1727 237.306 68.8503 241.822 64.334 cv
246.339 59.8177 253.661 59.8177 258.177 64.334 cv
262.694 68.8503 262.694 76.1727 258.177 80.689 cv
cp
0 0 0 0 cmyk
f
90.2902 229.425 mo
90.2901 229.425 li
84.0985 223.234 74.0597 223.234 67.868 229.425 cv
67.868 229.425 li
61.6763 235.617 61.6763 245.656 67.868 251.848 cv
79.0791 263.059 li
90.2902 251.848 li
96.4819 245.656 96.4819 235.617 90.2902 229.425 cv
cp
.0193179 .730007 .668544 .000396735 cmyk
f
87.2566 248.814 mo
82.7403 253.33 75.4179 253.33 70.9016 248.814 cv
66.3853 244.298 66.3853 236.975 70.9016 232.459 cv
75.4179 227.943 82.7403 227.943 87.2566 232.459 cv
91.7729 236.975 91.7729 244.298 87.2566 248.814 cv
cp
0 0 0 0 cmyk
f
136.215 267.702 mo
136.215 267.702 li
130.024 261.511 119.985 261.511 113.793 267.702 cv
113.793 267.702 li
107.601 273.894 107.601 283.933 113.793 290.125 cv
125.004 301.336 li
136.215 290.125 li
142.407 283.933 142.407 273.894 136.215 267.702 cv
cp
.0193179 .730007 .668544 .000396735 cmyk
f
133.182 287.091 mo
128.665 291.607 121.343 291.607 116.827 287.091 cv
112.31 282.575 112.31 275.252 116.827 270.736 cv
121.343 266.22 128.665 266.22 133.182 270.736 cv
137.698 275.252 137.698 282.575 133.182 287.091 cv
cp
0 0 0 0 cmyk
f
388.184 330.848 mo
388.184 330.848 li
381.992 324.656 371.954 324.656 365.762 330.848 cv
365.762 330.848 li
359.57 337.04 359.57 347.079 365.762 353.27 cv
376.973 364.481 li
388.184 353.27 li
394.376 347.079 394.376 337.04 388.184 330.848 cv
cp
.0193179 .730007 .668544 .000396735 cmyk
f
385.15 350.237 mo
380.634 354.753 373.312 354.753 368.795 350.237 cv
364.279 345.72 364.279 338.398 368.795 333.882 cv
373.312 329.366 380.634 329.366 385.15 333.882 cv
389.667 338.398 389.667 345.72 385.15 350.237 cv
cp
0 0 0 0 cmyk
f
456.096 142.333 mo
456.096 142.333 li
450.498 136.736 441.423 136.736 435.826 142.333 cv
435.826 142.333 li
430.229 147.93 430.229 157.005 435.826 162.603 cv
445.961 172.738 li
456.096 162.603 li
461.693 157.005 461.693 147.93 456.096 142.333 cv
cp
.0193179 .730007 .668544 .000396735 cmyk
f
453.353 159.86 mo
449.27 163.943 442.651 163.943 438.568 159.86 cv
434.486 155.778 434.486 149.158 438.568 145.075 cv
442.651 140.993 449.27 140.993 453.353 145.075 cv
457.436 149.158 457.436 155.778 453.353 159.86 cv
cp
0 0 0 0 cmyk
f
90.2902 99.5775 mo
90.2901 99.5775 li
84.0985 93.3858 74.0597 93.3858 67.868 99.5775 cv
67.868 99.5775 li
61.6763 105.769 61.6763 115.808 67.868 122 cv
79.0791 133.211 li
90.2902 122 li
96.4819 115.808 96.4819 105.769 90.2902 99.5775 cv
cp
.0193179 .730007 .668544 .000396735 cmyk
f
87.2566 118.966 mo
82.7403 123.482 75.4179 123.482 70.9016 118.966 cv
66.3853 114.45 66.3853 107.127 70.9016 102.611 cv
75.4179 98.0948 82.7403 98.0948 87.2566 102.611 cv
91.7729 107.127 91.7729 114.45 87.2566 118.966 cv
cp
0 0 0 0 cmyk
f
364.402 210.287 mo
364.402 210.287 li
358.21 204.095 348.171 204.095 341.98 210.287 cv
341.98 210.287 li
335.788 216.479 335.788 226.517 341.98 232.709 cv
353.191 243.92 li
364.402 232.709 li
370.593 226.517 370.593 216.479 364.402 210.287 cv
cp
.0193179 .730007 .668544 .000396735 cmyk
f
361.368 229.675 mo
356.852 234.192 349.529 234.192 345.013 229.675 cv
340.497 225.159 340.497 217.837 345.013 213.32 cv
349.529 208.804 356.852 208.804 361.368 213.32 cv
365.884 217.837 365.884 225.159 361.368 229.675 cv
cp
0 0 0 0 cmyk
f
233.791 172.01 mo
233.791 172.01 li
227.6 165.818 217.561 165.818 211.369 172.01 cv
211.369 172.01 li
205.178 178.202 205.178 188.24 211.369 194.432 cv
222.58 205.643 li
233.791 194.432 li
239.983 188.24 239.983 178.202 233.791 172.01 cv
cp
.0193179 .730007 .668544 .000396735 cmyk
f
230.758 191.398 mo
226.242 195.915 218.919 195.915 214.403 191.398 cv
209.887 186.882 209.887 179.56 214.403 175.043 cv
218.919 170.527 226.242 170.527 230.758 175.043 cv
235.274 179.56 235.274 186.882 230.758 191.398 cv
cp
0 0 0 0 cmyk
f
436.03 378.14 mo
436.03 378.14 li
429.838 371.948 419.799 371.948 413.608 378.14 cv
413.608 378.14 li
407.416 384.332 407.416 394.371 413.608 400.562 cv
424.819 411.773 li
436.03 400.562 li
442.222 394.371 442.222 384.332 436.03 378.14 cv
cp
.0193179 .730007 .668544 .000396735 cmyk
f
432.996 397.529 mo
428.48 402.045 421.158 402.045 416.641 397.529 cv
412.125 393.012 412.125 385.69 416.641 381.174 cv
421.158 376.657 428.48 376.657 432.996 381.174 cv
437.513 385.69 437.513 393.012 432.996 397.529 cv
cp
0 0 0 0 cmyk
f
197.028 441.408 mo
197.028 441.408 li
190.837 435.216 180.798 435.216 174.606 441.408 cv
174.606 441.408 li
168.414 447.6 168.414 457.638 174.606 463.83 cv
185.817 475.041 li
197.028 463.83 li
203.22 457.638 203.22 447.6 197.028 441.408 cv
cp
.0193179 .730007 .668544 .000396735 cmyk
f
193.995 460.797 mo
189.478 465.313 182.156 465.313 177.64 460.797 cv
173.123 456.28 173.123 448.958 177.64 444.442 cv
182.156 439.925 189.478 439.925 193.995 444.442 cv
198.511 448.958 198.511 456.28 193.995 460.797 cv
cp
0 0 0 0 cmyk
f
269.138 311.71 mo
269.138 311.71 li
262.947 305.518 252.908 305.518 246.716 311.71 cv
246.716 311.71 li
240.525 317.901 240.525 327.94 246.716 334.132 cv
257.927 345.343 li
269.138 334.132 li
275.33 327.94 275.33 317.901 269.138 311.71 cv
cp
.0193179 .730007 .668544 .000396735 cmyk
f
266.105 331.098 mo
261.589 335.615 254.266 335.615 249.75 331.098 cv
245.234 326.582 245.234 319.26 249.75 314.743 cv
254.266 310.227 261.589 310.227 266.105 314.743 cv
270.621 319.26 270.621 326.582 266.105 331.098 cv
cp
0 0 0 0 cmyk
f
418.327 124.606 mo
418.327 124.606 li
412.73 119.009 403.655 119.009 398.057 124.606 cv
398.057 124.606 li
392.46 130.204 392.46 139.279 398.057 144.876 cv
408.192 155.011 li
418.327 144.876 li
423.924 139.279 423.924 130.204 418.327 124.606 cv
cp
.0193179 .730007 .668544 .000396735 cmyk
f
415.585 142.134 mo
411.502 146.216 404.883 146.216 400.8 142.134 cv
396.717 138.051 396.717 131.431 400.8 127.349 cv
404.883 123.266 411.502 123.266 415.585 127.349 cv
419.667 131.431 419.667 138.051 415.585 142.134 cv
cp
0 0 0 0 cmyk
f
177.12 488.195 mo
177.12 488.634 177.188 489.008 177.325 489.317 cv
177.461 489.626 177.648 489.858 177.886 490.014 cv
178.123 490.17 178.382 490.249 178.663 490.249 cv
178.948 490.249 179.208 490.175 179.444 490.026 cv
179.679 489.878 179.867 489.65 180.008 489.344 cv
180.148 489.037 180.218 488.653 180.218 488.195 cv
180.218 487.763 180.148 487.392 180.008 487.08 cv
179.867 486.77 179.678 486.534 179.438 486.369 cv
179.198 486.205 178.936 486.123 178.652 486.123 cv
178.355 486.123 178.09 486.208 177.856 486.375 cv
177.622 486.543 177.442 486.784 177.313 487.099 cv
177.184 487.414 177.12 487.779 177.12 488.195 cv
cp
180.308 490.575 mo
180.308 490.414 li
180.09 490.663 179.875 490.867 179.664 491.022 cv
179.452 491.18 179.222 491.298 178.975 491.379 cv
178.728 491.462 178.458 491.501 178.165 491.501 cv
177.777 491.501 177.417 491.419 177.087 491.255 cv
176.757 491.09 176.471 490.856 176.23 490.551 cv
175.988 490.247 175.805 489.889 175.68 489.477 cv
175.556 489.065 175.493 488.62 175.493 488.141 cv
175.493 487.128 175.741 486.338 176.235 485.772 cv
176.73 485.207 177.381 484.923 178.189 484.923 cv
178.655 484.923 179.049 485.004 179.37 485.164 cv
179.69 485.324 180.003 485.572 180.308 485.902 cv
180.308 483.511 li
180.308 483.178 180.374 482.928 180.507 482.757 cv
180.639 482.587 180.828 482.502 181.073 482.502 cv
181.319 482.502 181.507 482.58 181.64 482.736 cv
181.773 482.893 181.839 483.123 181.839 483.428 cv
181.839 490.575 li
181.839 490.884 181.768 491.115 181.625 491.27 cv
181.483 491.424 181.299 491.501 181.073 491.501 cv
180.852 491.501 180.669 491.421 180.524 491.261 cv
180.38 491.1 180.308 490.872 180.308 490.575 cv
cp
.307652 .170047 .15433 0 cmyk
f
184.284 487.685 mo
187.223 487.685 li
187.184 487.131 187.033 486.715 186.774 486.441 cv
186.515 486.165 186.174 486.028 185.751 486.028 cv
185.347 486.028 185.015 486.167 184.756 486.446 cv
184.497 486.725 184.34 487.138 184.284 487.685 cv
cp
187.454 488.605 mo
184.284 488.605 li
184.288 488.973 184.362 489.297 184.507 489.578 cv
184.651 489.859 184.843 490.071 185.083 490.213 cv
185.322 490.356 185.586 490.426 185.875 490.426 cv
186.069 490.426 186.246 490.404 186.406 490.359 cv
186.567 490.313 186.722 490.242 186.873 490.144 cv
187.023 490.048 187.161 489.944 187.288 489.833 cv
187.414 489.722 187.578 489.571 187.781 489.382 cv
187.864 489.311 187.983 489.274 188.137 489.274 cv
188.303 489.274 188.438 489.32 188.54 489.412 cv
188.643 489.504 188.695 489.631 188.695 489.798 cv
188.695 489.944 188.637 490.114 188.523 490.31 cv
188.407 490.507 188.234 490.695 188.003 490.874 cv
187.771 491.055 187.481 491.204 187.13 491.322 cv
186.781 491.442 186.378 491.501 185.922 491.501 cv
184.882 491.501 184.072 491.204 183.495 490.611 cv
182.917 490.017 182.628 489.212 182.628 488.195 cv
182.628 487.715 182.699 487.271 182.842 486.862 cv
182.984 486.452 183.192 486.101 183.465 485.809 cv
183.738 485.516 184.074 485.291 184.474 485.135 cv
184.874 484.978 185.317 484.9 185.804 484.9 cv
186.437 484.9 186.98 485.033 187.433 485.301 cv
187.886 485.568 188.226 485.913 188.451 486.336 cv
188.676 486.759 188.79 487.192 188.79 487.63 cv
188.79 488.039 188.673 488.302 188.44 488.423 cv
188.207 488.544 187.878 488.605 187.454 488.605 cv
cp
f
194.838 489.382 mo
194.838 489.828 194.73 490.212 194.512 490.53 cv
194.294 490.849 193.973 491.09 193.547 491.255 cv
193.122 491.419 192.604 491.501 191.995 491.501 cv
191.413 491.501 190.914 491.412 190.499 491.233 cv
190.083 491.056 189.776 490.833 189.579 490.567 cv
189.381 490.298 189.282 490.031 189.282 489.761 cv
189.282 489.583 189.345 489.432 189.472 489.305 cv
189.599 489.179 189.759 489.115 189.953 489.115 cv
190.123 489.115 190.253 489.157 190.344 489.24 cv
190.436 489.323 190.523 489.44 190.605 489.589 cv
190.772 489.88 190.971 490.093 191.203 490.237 cv
191.434 490.379 191.749 490.451 192.149 490.451 cv
192.474 490.451 192.74 490.378 192.948 490.234 cv
193.155 490.088 193.259 489.923 193.259 489.738 cv
193.259 489.452 193.152 489.246 192.936 489.115 cv
192.72 488.985 192.365 488.859 191.87 488.741 cv
191.312 488.603 190.858 488.456 190.508 488.304 cv
190.157 488.152 189.877 487.951 189.668 487.702 cv
189.458 487.453 189.353 487.145 189.353 486.781 cv
189.353 486.458 189.45 486.15 189.644 485.861 cv
189.838 485.573 190.124 485.342 190.502 485.17 cv
190.88 484.998 191.336 484.911 191.87 484.911 cv
192.29 484.911 192.667 484.955 193.001 485.043 cv
193.335 485.129 193.615 485.247 193.838 485.393 cv
194.062 485.539 194.232 485.701 194.348 485.879 cv
194.465 486.058 194.523 486.231 194.523 486.402 cv
194.523 486.587 194.461 486.74 194.337 486.86 cv
194.212 486.977 194.035 487.038 193.805 487.038 cv
193.639 487.038 193.497 486.99 193.381 486.894 cv
193.264 486.8 193.131 486.657 192.98 486.468 cv
192.857 486.309 192.714 486.182 192.547 486.087 cv
192.381 485.992 192.155 485.945 191.87 485.945 cv
191.577 485.945 191.334 486.006 191.14 486.132 cv
190.946 486.257 190.849 486.412 190.849 486.597 cv
190.849 486.768 190.92 486.907 191.062 487.016 cv
191.205 487.126 191.397 487.216 191.639 487.287 cv
191.88 487.358 192.212 487.444 192.636 487.547 cv
193.138 487.67 193.549 487.817 193.868 487.986 cv
194.186 488.156 194.427 488.357 194.592 488.589 cv
194.756 488.821 194.838 489.085 194.838 489.382 cv
cp
f
197.295 485.832 mo
197.295 490.516 li
197.295 490.84 197.218 491.086 197.064 491.252 cv
196.909 491.418 196.714 491.501 196.476 491.501 cv
196.238 491.501 196.045 491.416 195.897 491.246 cv
195.748 491.076 195.675 490.832 195.675 490.516 cv
195.675 485.879 li
195.675 485.559 195.748 485.318 195.897 485.155 cv
196.045 484.993 196.238 484.911 196.476 484.911 cv
196.714 484.911 196.909 484.993 197.064 485.155 cv
197.218 485.318 197.295 485.544 197.295 485.832 cv
cp
196.494 484.158 mo
196.268 484.158 196.075 484.089 195.915 483.951 cv
195.755 483.813 195.675 483.616 195.675 483.362 cv
195.675 483.133 195.757 482.945 195.921 482.796 cv
196.085 482.647 196.276 482.572 196.494 482.572 cv
196.704 482.572 196.889 482.64 197.052 482.775 cv
197.214 482.909 197.295 483.105 197.295 483.362 cv
197.295 483.612 197.216 483.807 197.057 483.947 cv
196.899 484.087 196.711 484.158 196.494 484.158 cv
cp
f
199.699 488.153 mo
199.699 488.81 199.842 489.307 200.129 489.643 cv
200.416 489.98 200.787 490.148 201.242 490.148 cv
201.511 490.148 201.765 490.075 202.005 489.931 cv
202.244 489.787 202.439 489.568 202.59 489.278 cv
202.74 488.987 202.815 488.634 202.815 488.218 cv
202.815 487.558 202.67 487.043 202.379 486.675 cv
202.088 486.308 201.705 486.123 201.23 486.123 cv
200.767 486.123 200.396 486.299 200.117 486.652 cv
199.838 487.004 199.699 487.504 199.699 488.153 cv
cp
204.395 486.099 mo
204.395 490.806 li
204.395 491.344 204.337 491.808 204.222 492.196 cv
204.108 492.583 203.923 492.904 203.67 493.157 cv
203.417 493.41 203.085 493.599 202.676 493.721 cv
202.266 493.844 201.757 493.905 201.147 493.905 cv
200.589 493.905 200.09 493.827 199.651 493.671 cv
199.212 493.514 198.874 493.312 198.636 493.066 cv
198.399 492.818 198.28 492.564 198.28 492.303 cv
198.28 492.105 198.347 491.943 198.482 491.819 cv
198.616 491.694 198.779 491.631 198.968 491.631 cv
199.206 491.631 199.414 491.736 199.592 491.946 cv
199.678 492.052 199.768 492.161 199.862 492.27 cv
199.955 492.38 200.058 492.472 200.17 492.549 cv
200.283 492.626 200.419 492.684 200.577 492.721 cv
200.735 492.758 200.918 492.777 201.123 492.777 cv
201.543 492.777 201.868 492.719 202.1 492.602 cv
202.332 492.486 202.494 492.322 202.587 492.112 cv
202.68 491.903 202.734 491.679 202.75 491.438 cv
202.766 491.199 202.778 490.815 202.785 490.284 cv
202.536 490.633 202.249 490.898 201.922 491.079 cv
201.595 491.261 201.206 491.353 200.755 491.353 cv
200.213 491.353 199.739 491.214 199.333 490.937 cv
198.928 490.66 198.616 490.273 198.399 489.773 cv
198.181 489.274 198.073 488.699 198.073 488.046 cv
198.073 487.56 198.139 487.12 198.271 486.729 cv
198.404 486.336 198.593 486.006 198.838 485.736 cv
199.083 485.468 199.366 485.265 199.687 485.129 cv
200.007 484.992 200.359 484.923 200.744 484.923 cv
201.202 484.923 201.6 485.013 201.937 485.187 cv
202.273 485.364 202.586 485.64 202.875 486.016 cv
202.875 485.796 li
202.875 485.516 202.944 485.298 203.082 485.143 cv
203.221 484.989 203.399 484.911 203.617 484.911 cv
203.929 484.911 204.137 485.014 204.24 485.218 cv
204.343 485.422 204.395 485.716 204.395 486.099 cv
cp
f
206.97 485.809 mo
206.97 486.004 li
207.254 485.628 207.566 485.352 207.905 485.176 cv
208.243 485 208.632 484.911 209.071 484.911 cv
209.499 484.911 209.88 485.005 210.217 485.191 cv
210.553 485.378 210.805 485.64 210.971 485.979 cv
211.078 486.178 211.147 486.392 211.178 486.621 cv
211.21 486.851 211.227 487.144 211.227 487.5 cv
211.227 490.516 li
211.227 490.84 211.152 491.086 211.004 491.252 cv
210.855 491.418 210.662 491.501 210.425 491.501 cv
210.183 491.501 209.988 491.416 209.837 491.246 cv
209.686 491.076 209.612 490.832 209.612 490.516 cv
209.612 487.814 li
209.612 487.281 209.537 486.872 209.389 486.589 cv
209.24 486.307 208.945 486.164 208.501 486.164 cv
208.213 486.164 207.949 486.25 207.712 486.423 cv
207.474 486.595 207.3 486.831 207.189 487.132 cv
207.11 487.373 207.071 487.824 207.071 488.486 cv
207.071 490.516 li
207.071 490.844 206.994 491.09 206.842 491.255 cv
206.69 491.419 206.493 491.501 206.252 491.501 cv
206.018 491.501 205.827 491.416 205.676 491.246 cv
205.526 491.076 205.45 490.832 205.45 490.516 cv
205.45 485.832 li
205.45 485.523 205.517 485.292 205.652 485.14 cv
205.787 484.988 205.971 484.911 206.204 484.911 cv
206.347 484.911 206.475 484.945 206.59 485.013 cv
206.705 485.081 206.797 485.181 206.866 485.315 cv
206.936 485.45 206.97 485.614 206.97 485.809 cv
cp
f
213.659 487.685 mo
216.598 487.685 li
216.558 487.131 216.409 486.715 216.15 486.441 cv
215.89 486.165 215.549 486.028 215.126 486.028 cv
214.722 486.028 214.39 486.167 214.131 486.446 cv
213.872 486.725 213.715 487.138 213.659 487.685 cv
cp
216.829 488.605 mo
213.659 488.605 li
213.664 488.973 213.737 489.297 213.882 489.578 cv
214.027 489.859 214.218 490.071 214.458 490.213 cv
214.697 490.356 214.961 490.426 215.25 490.426 cv
215.444 490.426 215.621 490.404 215.782 490.359 cv
215.942 490.313 216.097 490.242 216.248 490.144 cv
216.398 490.048 216.536 489.944 216.664 489.833 cv
216.79 489.722 216.954 489.571 217.156 489.382 cv
217.239 489.311 217.358 489.274 217.512 489.274 cv
217.678 489.274 217.813 489.32 217.916 489.412 cv
218.019 489.504 218.07 489.631 218.07 489.798 cv
218.07 489.944 218.013 490.114 217.898 490.31 cv
217.783 490.507 217.61 490.695 217.378 490.874 cv
217.146 491.055 216.856 491.204 216.506 491.322 cv
216.156 491.442 215.753 491.501 215.298 491.501 cv
214.257 491.501 213.448 491.204 212.869 490.611 cv
212.292 490.017 212.003 489.212 212.003 488.195 cv
212.003 487.715 212.074 487.271 212.217 486.862 cv
212.359 486.452 212.567 486.101 212.84 485.809 cv
213.113 485.516 213.45 485.291 213.849 485.135 cv
214.249 484.978 214.693 484.9 215.179 484.9 cv
215.812 484.9 216.355 485.033 216.808 485.301 cv
217.261 485.568 217.601 485.913 217.827 486.336 cv
218.052 486.759 218.165 487.192 218.165 487.63 cv
218.165 488.039 218.049 488.302 217.815 488.423 cv
217.582 488.544 217.253 488.605 216.829 488.605 cv
cp
f
220.248 488.195 mo
220.248 488.634 220.316 489.008 220.452 489.317 cv
220.589 489.626 220.776 489.858 221.014 490.014 cv
221.251 490.17 221.51 490.249 221.791 490.249 cv
222.076 490.249 222.337 490.175 222.572 490.026 cv
222.807 489.878 222.995 489.65 223.135 489.344 cv
223.276 489.037 223.346 488.653 223.346 488.195 cv
223.346 487.763 223.276 487.392 223.135 487.08 cv
222.995 486.77 222.805 486.534 222.566 486.369 cv
222.326 486.205 222.064 486.123 221.779 486.123 cv
221.483 486.123 221.217 486.208 220.984 486.375 cv
220.751 486.543 220.569 486.784 220.44 487.099 cv
220.312 487.414 220.248 487.779 220.248 488.195 cv
cp
223.435 490.575 mo
223.435 490.414 li
223.218 490.663 223.003 490.867 222.791 491.022 cv
222.579 491.18 222.35 491.298 222.103 491.379 cv
221.856 491.462 221.586 491.501 221.293 491.501 cv
220.904 491.501 220.545 491.419 220.215 491.255 cv
219.885 491.09 219.599 490.856 219.357 490.551 cv
219.116 490.247 218.933 489.889 218.808 489.477 cv
218.684 489.065 218.621 488.62 218.621 488.141 cv
218.621 487.128 218.869 486.338 219.363 485.772 cv
219.858 485.207 220.509 484.923 221.316 484.923 cv
221.783 484.923 222.177 485.004 222.498 485.164 cv
222.818 485.324 223.131 485.572 223.435 485.902 cv
223.435 483.511 li
223.435 483.178 223.502 482.928 223.634 482.757 cv
223.767 482.587 223.956 482.502 224.201 482.502 cv
224.447 482.502 224.635 482.58 224.768 482.736 cv
224.901 482.893 224.967 483.123 224.967 483.428 cv
224.967 490.575 li
224.967 490.884 224.896 491.115 224.754 491.27 cv
224.611 491.424 224.427 491.501 224.201 491.501 cv
223.98 491.501 223.797 491.421 223.652 491.261 cv
223.508 491.1 223.435 490.872 223.435 490.575 cv
cp
f
230.136 488.243 mo
230.136 488.887 230.284 489.383 230.578 489.728 cv
230.873 490.075 231.26 490.249 231.739 490.249 cv
232.146 490.249 232.498 490.072 232.792 489.717 cv
233.087 489.363 233.235 488.855 233.235 488.195 cv
233.235 487.768 233.174 487.399 233.051 487.09 cv
232.928 486.781 232.754 486.543 232.529 486.375 cv
232.303 486.208 232.04 486.123 231.739 486.123 cv
231.43 486.123 231.155 486.208 230.914 486.375 cv
230.672 486.543 230.483 486.786 230.344 487.105 cv
230.206 487.423 230.136 487.803 230.136 488.243 cv
cp
230.059 483.428 mo
230.059 485.902 li
230.364 485.586 230.674 485.343 230.991 485.176 cv
231.307 485.008 231.7 484.923 232.167 484.923 cv
232.705 484.923 233.176 485.052 233.583 485.306 cv
233.988 485.562 234.302 485.932 234.526 486.416 cv
234.75 486.901 234.862 487.476 234.862 488.141 cv
234.862 488.632 234.799 489.081 234.675 489.491 cv
234.55 489.902 234.369 490.257 234.132 490.557 cv
233.894 490.857 233.606 491.09 233.268 491.255 cv
232.929 491.419 232.556 491.501 232.149 491.501 cv
231.899 491.501 231.665 491.471 231.445 491.412 cv
231.225 491.353 231.038 491.275 230.884 491.177 cv
230.73 491.081 230.599 490.981 230.49 490.878 cv
230.381 490.776 230.237 490.621 230.059 490.414 cv
230.059 490.575 li
230.059 490.879 229.986 491.11 229.839 491.267 cv
229.693 491.424 229.507 491.501 229.281 491.501 cv
229.052 491.501 228.869 491.424 228.732 491.267 cv
228.596 491.11 228.528 490.879 228.528 490.575 cv
228.528 483.499 li
228.528 483.171 228.594 482.922 228.726 482.754 cv
228.859 482.586 229.044 482.502 229.281 482.502 cv
229.531 482.502 229.723 482.582 229.857 482.742 cv
229.992 482.903 230.059 483.13 230.059 483.428 cv
cp
f
236.963 491.703 mo
237.111 491.341 li
235.116 486.319 li
234.994 486.031 234.932 485.819 234.932 485.689 cv
234.932 485.551 234.968 485.423 235.039 485.304 cv
235.111 485.185 235.208 485.09 235.333 485.019 cv
235.458 484.947 235.587 484.911 235.722 484.911 cv
235.955 484.911 236.131 484.986 236.25 485.135 cv
236.369 485.282 236.474 485.495 236.565 485.772 cv
237.936 489.761 li
239.236 486.051 li
239.339 485.751 239.432 485.516 239.515 485.345 cv
239.598 485.175 239.686 485.06 239.779 485.002 cv
239.872 484.942 240.004 484.911 240.174 484.911 cv
240.297 484.911 240.415 484.944 240.527 485.01 cv
240.64 485.075 240.727 485.163 240.788 485.274 cv
240.849 485.385 240.881 485.501 240.881 485.624 cv
240.864 485.699 240.839 485.806 240.803 485.945 cv
240.767 486.083 240.724 486.225 240.673 486.366 cv
238.56 491.899 li
238.377 492.386 238.199 492.767 238.025 493.044 cv
237.851 493.321 237.621 493.534 237.333 493.682 cv
237.046 493.831 236.66 493.905 236.173 493.905 cv
235.698 493.905 235.342 493.854 235.105 493.752 cv
234.867 493.648 234.749 493.46 234.749 493.186 cv
234.749 493.001 234.805 492.857 234.918 492.757 cv
235.03 492.655 235.198 492.604 235.419 492.604 cv
235.506 492.604 235.592 492.616 235.675 492.641 cv
235.777 492.664 235.866 492.676 235.941 492.676 cv
236.127 492.676 236.274 492.649 236.381 492.593 cv
236.488 492.538 236.583 492.442 236.669 492.305 cv
236.754 492.17 236.852 491.968 236.963 491.703 cv
cp
f
260.439 485.052 mo
260.826 485.052 li
260.826 484.566 li
260.826 484.057 260.888 483.655 261.018 483.355 cv
261.145 483.056 261.365 482.839 261.672 482.702 cv
261.979 482.566 262.398 482.498 262.932 482.498 cv
263.882 482.498 264.353 482.727 264.353 483.194 cv
264.353 483.343 264.303 483.472 264.203 483.578 cv
264.106 483.684 263.988 483.738 263.854 483.738 cv
263.791 483.738 263.68 483.727 263.524 483.702 cv
263.376 483.681 263.242 483.666 263.135 483.666 cv
262.843 483.666 262.656 483.754 262.569 483.926 cv
262.49 484.098 262.447 484.344 262.447 484.666 cv
262.447 485.052 li
262.843 485.052 li
263.462 485.052 263.768 485.237 263.768 485.612 cv
263.768 485.873 263.689 486.043 263.523 486.115 cv
263.359 486.186 263.133 486.221 262.843 486.221 cv
262.447 486.221 li
262.447 490.516 li
262.447 490.835 262.372 491.078 262.217 491.246 cv
262.065 491.416 261.87 491.499 261.627 491.499 cv
261.398 491.499 261.208 491.416 261.053 491.246 cv
260.901 491.078 260.826 490.835 260.826 490.516 cv
260.826 486.221 li
260.379 486.221 li
260.137 486.221 259.953 486.169 259.822 486.058 cv
259.691 485.951 259.625 485.809 259.625 485.634 cv
259.625 485.245 259.896 485.052 260.439 485.052 cv
f
265.746 489.161 mo
265.746 490.516 li
265.746 490.843 265.663 491.09 265.511 491.253 cv
265.357 491.419 265.162 491.499 264.925 491.499 cv
264.687 491.499 264.496 491.418 264.347 491.249 cv
264.199 491.084 264.121 490.839 264.121 490.516 cv
264.121 486.001 li
264.121 485.273 264.383 484.909 264.909 484.909 cv
265.18 484.909 265.373 484.993 265.493 485.164 cv
265.611 485.335 265.677 485.585 265.691 485.918 cv
265.884 485.585 266.081 485.335 266.284 485.164 cv
266.492 484.993 266.76 484.909 267.102 484.909 cv
267.445 484.909 267.772 484.993 268.093 485.164 cv
268.415 485.335 268.575 485.562 268.575 485.841 cv
268.575 486.038 268.506 486.204 268.371 486.33 cv
268.233 486.46 268.087 486.525 267.93 486.525 cv
267.867 486.525 267.723 486.486 267.497 486.413 cv
267.269 486.342 267.066 486.304 266.896 486.304 cv
266.658 486.304 266.462 486.369 266.313 486.491 cv
266.162 486.619 266.044 486.801 265.961 487.045 cv
265.88 487.292 265.824 487.586 265.79 487.923 cv
265.759 488.261 265.746 488.675 265.746 489.161 cv
f
270.024 487.681 mo
272.962 487.681 li
272.923 487.128 272.777 486.713 272.517 486.44 cv
272.256 486.164 271.918 486.027 271.492 486.027 cv
271.087 486.027 270.755 486.165 270.497 486.446 cv
270.238 486.724 270.079 487.135 270.024 487.681 cv
273.196 488.603 mo
270.024 488.603 li
270.03 488.97 270.102 489.297 270.246 489.577 cv
270.393 489.856 270.583 490.069 270.824 490.213 cv
271.064 490.354 271.327 490.425 271.617 490.425 cv
271.811 490.425 271.987 490.404 272.148 490.356 cv
272.307 490.312 272.463 490.24 272.613 490.142 cv
272.765 490.047 272.901 489.943 273.028 489.829 cv
273.155 489.721 273.32 489.569 273.523 489.38 cv
273.607 489.309 273.725 489.272 273.878 489.272 cv
274.045 489.272 274.178 489.318 274.283 489.411 cv
274.387 489.502 274.436 489.629 274.436 489.797 cv
274.436 489.943 274.38 490.114 274.269 490.308 cv
274.151 490.507 273.979 490.694 273.746 490.874 cv
273.512 491.053 273.221 491.204 272.872 491.321 cv
272.523 491.44 272.119 491.499 271.665 491.499 cv
270.621 491.499 269.813 491.204 269.236 490.611 cv
268.658 490.016 268.367 489.209 268.367 488.194 cv
268.367 487.714 268.44 487.27 268.584 486.86 cv
268.724 486.448 268.932 486.099 269.208 485.805 cv
269.48 485.511 269.814 485.287 270.216 485.131 cv
270.614 484.975 271.057 484.897 271.545 484.897 cv
272.178 484.897 272.721 485.031 273.175 485.301 cv
273.627 485.564 273.971 485.911 274.193 486.335 cv
274.419 486.759 274.531 487.189 274.531 487.631 cv
274.531 488.036 274.414 488.3 274.181 488.422 cv
273.948 488.543 273.619 488.603 273.196 488.603 cv
f
276.767 487.681 mo
279.706 487.681 li
279.665 487.128 279.515 486.713 279.259 486.44 cv
278.995 486.164 278.657 486.027 278.232 486.027 cv
277.828 486.027 277.497 486.165 277.236 486.446 cv
276.979 486.724 276.82 487.135 276.767 487.681 cv
279.938 488.603 mo
276.767 488.603 li
276.771 488.97 276.846 489.297 276.988 489.577 cv
277.134 489.856 277.325 490.069 277.565 490.213 cv
277.804 490.354 278.067 490.425 278.359 490.425 cv
278.551 490.425 278.729 490.404 278.887 490.356 cv
279.049 490.312 279.203 490.24 279.355 490.142 cv
279.507 490.047 279.643 489.943 279.77 489.829 cv
279.895 489.721 280.061 489.569 280.263 489.38 cv
280.348 489.309 280.467 489.272 280.619 489.272 cv
280.786 489.272 280.92 489.318 281.025 489.411 cv
281.128 489.502 281.175 489.629 281.175 489.797 cv
281.175 489.943 281.12 490.114 281.004 490.308 cv
280.893 490.507 280.72 490.694 280.486 490.874 cv
280.254 491.053 279.961 491.204 279.613 491.321 cv
279.265 491.44 278.858 491.499 278.404 491.499 cv
277.362 491.499 276.555 491.204 275.975 490.611 cv
275.398 490.016 275.107 489.209 275.107 488.194 cv
275.107 487.714 275.179 487.27 275.325 486.86 cv
275.466 486.448 275.674 486.099 275.947 485.805 cv
276.219 485.511 276.555 485.287 276.955 485.131 cv
277.355 484.975 277.8 484.897 278.286 484.897 cv
278.917 484.897 279.46 485.031 279.919 485.301 cv
280.37 485.564 280.71 485.911 280.932 486.335 cv
281.157 486.759 281.273 487.189 281.273 487.631 cv
281.273 488.036 281.153 488.3 280.923 488.422 cv
280.688 488.543 280.36 488.603 279.938 488.603 cv
f
286.665 488.175 mo
286.665 487.747 286.599 487.38 286.468 487.073 cv
286.338 486.766 286.157 486.531 285.928 486.369 cv
285.698 486.204 285.438 486.121 285.157 486.121 cv
284.711 486.121 284.333 486.298 284.027 486.648 cv
283.719 487.002 283.564 487.52 283.564 488.206 cv
283.564 488.848 283.717 489.352 284.024 489.71 cv
284.328 490.069 284.703 490.247 285.157 490.247 cv
285.425 490.247 285.676 490.168 285.906 490.014 cv
286.138 489.856 286.321 489.622 286.457 489.309 cv
286.595 488.996 286.665 488.617 286.665 488.175 cv
283.487 485.821 mo
283.487 486.015 li
283.791 485.639 284.109 485.363 284.441 485.187 cv
284.764 485.009 285.139 484.92 285.554 484.92 cv
286.051 484.92 286.513 485.05 286.933 485.306 cv
287.353 485.564 287.683 485.94 287.927 486.435 cv
288.17 486.932 288.293 487.516 288.293 488.194 cv
288.293 488.691 288.222 489.151 288.083 489.569 cv
287.943 489.987 287.748 490.336 287.502 490.619 cv
287.257 490.9 286.968 491.12 286.634 491.272 cv
286.295 491.424 285.94 491.499 285.554 491.499 cv
285.093 491.499 284.702 491.407 284.388 491.22 cv
284.075 491.038 283.774 490.762 283.487 490.404 cv
283.487 492.837 li
283.487 493.547 283.227 493.905 282.71 493.905 cv
282.403 493.905 282.204 493.814 282.103 493.631 cv
282.008 493.444 281.957 493.179 281.957 492.824 cv
281.957 485.828 li
281.957 485.519 282.024 485.291 282.157 485.136 cv
282.291 484.987 282.477 484.909 282.71 484.909 cv
282.94 484.909 283.126 484.987 283.27 485.142 cv
283.417 485.301 283.487 485.524 283.487 485.821 cv
f
290.727 485.828 mo
290.727 490.517 li
290.727 490.839 290.65 491.084 290.497 491.249 cv
290.34 491.418 290.146 491.499 289.908 491.499 cv
289.67 491.499 289.48 491.416 289.328 491.246 cv
289.182 491.073 289.106 490.83 289.106 490.517 cv
289.106 485.874 li
289.106 485.556 289.182 485.315 289.328 485.153 cv
289.48 484.988 289.67 484.909 289.908 484.909 cv
290.146 484.909 290.34 484.988 290.497 485.153 cv
290.65 485.315 290.727 485.542 290.727 485.828 cv
289.925 484.154 mo
289.698 484.154 289.507 484.082 289.348 483.944 cv
289.186 483.805 289.106 483.612 289.106 483.36 cv
289.106 483.129 289.188 482.941 289.354 482.791 cv
289.518 482.644 289.708 482.569 289.925 482.569 cv
290.138 482.569 290.322 482.635 290.483 482.768 cv
290.646 482.904 290.727 483.102 290.727 483.36 cv
290.727 483.609 290.648 483.804 290.492 483.944 cv
290.333 484.082 290.145 484.154 289.925 484.154 cv
f
295.952 490.76 mo
294.525 488.406 li
293.645 489.236 li
293.645 490.528 li
293.645 490.839 293.562 491.078 293.397 491.246 cv
293.236 491.416 293.043 491.499 292.831 491.499 cv
292.582 491.499 292.384 491.418 292.242 491.249 cv
292.101 491.084 292.027 490.839 292.027 490.516 cv
292.027 483.601 li
292.027 483.243 292.099 482.969 292.235 482.78 cv
292.374 482.59 292.575 482.498 292.831 482.498 cv
293.08 482.498 293.276 482.583 293.424 482.754 cv
293.57 482.924 293.645 483.175 293.645 483.506 cv
293.645 487.439 li
295.467 485.525 li
295.693 485.29 295.863 485.125 295.984 485.038 cv
296.102 484.952 296.246 484.909 296.415 484.909 cv
296.618 484.909 296.786 484.974 296.925 485.102 cv
297.057 485.23 297.125 485.392 297.125 485.585 cv
297.125 485.822 296.904 486.141 296.466 486.536 cv
295.605 487.325 li
297.267 489.939 li
297.388 490.135 297.479 490.279 297.532 490.38 cv
297.584 490.48 297.613 490.58 297.613 490.669 cv
297.613 490.927 297.541 491.128 297.4 491.278 cv
297.259 491.426 297.073 491.499 296.847 491.499 cv
296.649 491.499 296.494 491.449 296.388 491.34 cv
296.282 491.232 296.134 491.038 295.952 490.76 cv
f
299.475 491.499 mo
299.23 491.499 299.02 491.421 298.841 491.261 cv
298.663 491.106 298.573 490.883 298.573 490.596 cv
298.573 490.356 298.659 490.147 298.829 489.975 cv
299.001 489.8 299.209 489.712 299.459 489.712 cv
299.708 489.712 299.919 489.8 300.099 489.97 cv
300.273 490.142 300.362 490.353 300.362 490.596 cv
300.362 490.879 300.273 491.101 300.099 491.259 cv
299.919 491.421 299.712 491.499 299.475 491.499 cv
f
307.536 489.494 mo
307.536 489.694 307.475 489.911 307.355 490.14 cv
307.235 490.371 307.049 490.589 306.8 490.796 cv
306.554 491.004 306.244 491.172 305.867 491.298 cv
305.491 491.425 305.066 491.49 304.597 491.49 cv
303.594 491.49 302.811 491.197 302.248 490.614 cv
301.689 490.03 301.407 489.246 301.407 488.265 cv
301.407 487.597 301.535 487.011 301.794 486.499 cv
302.049 485.99 302.422 485.595 302.908 485.315 cv
303.395 485.036 303.981 484.897 304.654 484.897 cv
305.075 484.897 305.459 484.958 305.812 485.081 cv
306.162 485.203 306.457 485.363 306.703 485.556 cv
306.944 485.752 307.131 485.957 307.258 486.176 cv
307.388 486.396 307.451 486.601 307.451 486.792 cv
307.451 486.985 307.38 487.15 307.236 487.284 cv
307.09 487.419 306.914 487.487 306.712 487.487 cv
306.576 487.487 306.463 487.452 306.374 487.383 cv
306.284 487.314 306.184 487.203 306.075 487.045 cv
305.876 486.746 305.671 486.519 305.453 486.37 cv
305.238 486.219 304.964 486.144 304.631 486.144 cv
304.155 486.144 303.767 486.33 303.473 486.704 cv
303.181 487.077 303.033 487.592 303.033 488.239 cv
303.033 488.544 303.072 488.826 303.148 489.081 cv
303.221 489.335 303.33 489.554 303.473 489.733 cv
303.617 489.913 303.788 490.049 303.989 490.142 cv
304.192 490.238 304.415 490.284 304.654 490.284 cv
304.98 490.284 305.259 490.208 305.489 490.058 cv
305.725 489.908 305.929 489.678 306.106 489.369 cv
306.205 489.187 306.311 489.046 306.424 488.942 cv
306.538 488.84 306.68 488.786 306.847 488.786 cv
307.044 488.786 307.209 488.863 307.337 489.013 cv
307.469 489.163 307.536 489.324 307.536 489.494 cv
f
312.903 488.206 mo
312.903 487.544 312.756 487.03 312.467 486.663 cv
312.178 486.291 311.786 486.108 311.295 486.108 cv
310.978 486.108 310.698 486.191 310.456 486.354 cv
310.215 486.518 310.03 486.759 309.9 487.082 cv
309.769 487.403 309.703 487.777 309.703 488.206 cv
309.703 488.63 309.767 488.998 309.896 489.314 cv
310.027 489.633 310.21 489.875 310.45 490.043 cv
310.691 490.209 310.971 490.296 311.295 490.296 cv
311.786 490.296 312.178 490.11 312.467 489.738 cv
312.756 489.369 312.903 488.857 312.903 488.206 cv
314.53 488.206 mo
314.53 488.687 314.454 489.134 314.308 489.543 cv
314.154 489.95 313.938 490.301 313.652 490.591 cv
313.368 490.884 313.026 491.109 312.632 491.266 cv
312.232 491.421 311.788 491.501 311.295 491.501 cv
310.804 491.501 310.362 491.421 309.969 491.261 cv
309.58 491.106 309.238 490.878 308.954 490.585 cv
308.666 490.287 308.448 489.939 308.296 489.538 cv
308.153 489.135 308.077 488.691 308.077 488.206 cv
308.077 487.714 308.154 487.265 308.301 486.857 cv
308.452 486.448 308.669 486.099 308.95 485.811 cv
309.232 485.523 309.571 485.301 309.969 485.142 cv
310.372 484.987 310.813 484.909 311.295 484.909 cv
311.786 484.909 312.231 484.987 312.632 485.147 cv
313.031 485.304 313.371 485.531 313.659 485.822 cv
313.945 486.119 314.161 486.465 314.309 486.867 cv
314.455 487.273 314.53 487.716 314.53 488.206 cv
f
320.713 488.324 mo
320.713 490.479 li
320.713 490.821 320.637 491.073 320.482 491.246 cv
320.326 491.416 320.124 491.501 319.87 491.501 cv
319.625 491.501 319.425 491.416 319.276 491.246 cv
319.122 491.073 319.044 490.821 319.044 490.479 cv
319.044 487.897 li
319.044 487.488 319.031 487.171 319.004 486.944 cv
318.976 486.723 318.899 486.535 318.778 486.392 cv
318.655 486.246 318.459 486.172 318.196 486.172 cv
317.665 486.172 317.317 486.354 317.148 486.723 cv
316.981 487.083 316.894 487.607 316.894 488.29 cv
316.894 490.479 li
316.894 490.815 316.817 491.07 316.669 491.243 cv
316.512 491.414 316.313 491.501 316.065 491.501 cv
315.818 491.501 315.617 491.414 315.461 491.243 cv
315.304 491.07 315.226 490.815 315.226 490.479 cv
315.226 485.841 li
315.226 485.536 315.295 485.304 315.436 485.147 cv
315.578 484.987 315.764 484.909 315.991 484.909 cv
316.214 484.909 316.399 484.986 316.549 485.131 cv
316.697 485.28 316.77 485.485 316.77 485.746 cv
316.77 485.899 li
317.053 485.564 317.355 485.317 317.673 485.162 cv
317.995 484.999 318.349 484.92 318.744 484.92 cv
319.15 484.92 319.501 485.002 319.792 485.164 cv
320.085 485.326 320.326 485.573 320.517 485.899 cv
320.792 485.569 321.085 485.323 321.399 485.162 cv
321.711 485 322.057 484.92 322.438 484.92 cv
322.878 484.92 323.263 485.009 323.584 485.182 cv
323.902 485.356 324.142 485.607 324.3 485.929 cv
324.438 486.225 324.507 486.685 324.507 487.315 cv
324.507 490.479 li
324.507 490.821 324.431 491.073 324.277 491.246 cv
324.123 491.416 323.918 491.501 323.666 491.501 cv
323.419 491.501 323.219 491.414 323.063 491.243 cv
322.906 491.07 322.827 490.815 322.827 490.479 cv
322.827 487.753 li
322.827 487.404 322.812 487.126 322.784 486.917 cv
322.755 486.706 322.673 486.529 322.545 486.387 cv
322.412 486.246 322.213 486.172 321.949 486.172 cv
321.736 486.172 321.533 486.239 321.34 486.365 cv
321.148 486.488 320.998 486.663 320.89 486.873 cv
320.774 487.146 320.713 487.631 320.713 488.324 cv
f
245.272 487.813 mo
245.271 487.81 245.271 487.807 245.271 487.802 cv
245.271 487.807 245.271 487.81 245.272 487.813 cv
cp
f
245.354 488.332 mo
245.355 488.332 245.355 488.332 245.356 488.332 cv
245.325 488.184 245.3 488.038 245.281 487.892 cv
245.3 488.039 245.325 488.185 245.354 488.332 cv
cp
f
245.89 489.836 mo
245.887 489.829 245.884 489.822 245.88 489.815 cv
245.884 489.822 245.887 489.829 245.89 489.836 cv
cp
f
245.839 489.736 mo
245.825 489.707 245.812 489.679 245.798 489.651 cv
245.812 489.681 245.825 489.707 245.839 489.736 cv
cp
f
245.505 488.91 mo
245.584 489.161 245.679 489.403 245.79 489.634 cv
245.678 489.399 245.584 489.156 245.507 488.91 cv
245.507 488.91 245.505 488.91 245.505 488.91 cv
cp
f
251.545 481.603 mo
251.859 481.603 252.09 481.628 252.355 481.673 cv
252.43 481.195 li
252.43 481.195 251.698 480.971 250.736 481.049 cv
250.66 480.79 li
250.959 480.727 251.184 480.461 251.184 480.143 cv
251.184 479.779 250.888 479.485 250.523 479.485 cv
250.159 479.485 249.863 479.779 249.863 480.143 cv
249.863 480.461 250.087 480.727 250.386 480.79 cv
250.469 481.079 li
249.448 481.22 248.635 481.618 248.635 481.618 cv
248.779 482.059 li
249.397 481.853 249.933 481.728 250.419 481.675 cv
250.895 481.625 251.253 481.603 251.545 481.603 cv
cp
f
245.878 484.014 mo
245.882 484.009 li
245.906 483.979 245.929 483.949 245.953 483.92 cv
245.757 483.78 li
245.452 483.556 li
245.435 483.581 244.955 484.021 244.576 484.837 cv
244.56 484.811 244.541 484.786 244.52 484.762 cv
244.407 484.638 244.248 484.574 244.046 484.578 cv
244.044 484.578 244.04 484.578 244.037 484.578 cv
243.912 484.578 243.826 484.537 243.77 484.486 cv
243.826 484.416 243.86 484.327 243.86 484.228 cv
243.86 483.998 243.672 483.81 243.441 483.81 cv
243.211 483.81 243.023 483.998 243.023 484.228 cv
243.023 484.46 243.211 484.646 243.441 484.646 cv
243.478 484.646 243.512 484.64 243.546 484.633 cv
243.648 484.748 243.811 484.847 244.05 484.842 cv
244.173 484.84 244.263 484.872 244.324 484.939 cv
244.393 485.015 244.417 485.124 244.424 485.207 cv
244.423 485.208 244.423 485.209 244.422 485.209 cv
244.15 485.953 244.227 486.878 244.227 486.878 cv
244.888 486.905 li
244.902 486.568 244.95 485.978 245.12 485.511 cv
245.449 484.605 245.861 484.038 245.878 484.014 cv
cp
f
257.295 482.155 mo
257.065 482.155 256.877 482.342 256.877 482.574 cv
256.877 482.609 256.882 482.643 256.892 482.676 cv
256.777 482.78 256.677 482.944 256.681 483.183 cv
256.683 483.306 256.651 483.395 256.584 483.456 cv
256.532 483.503 256.465 483.528 256.4 483.544 cv
255.908 482.854 255.303 482.434 255.303 482.434 cv
254.828 482.942 li
255.187 483.268 255.553 483.677 255.908 484.186 cv
256.155 484.539 256.407 484.993 256.618 485.446 cv
257.258 485.142 li
257.258 485.142 256.966 484.419 256.555 483.772 cv
256.626 483.747 256.698 483.708 256.761 483.652 cv
256.887 483.539 256.948 483.379 256.944 483.178 cv
256.943 483.048 256.986 482.961 257.037 482.902 cv
257.109 482.957 257.198 482.991 257.295 482.991 cv
257.527 482.991 257.713 482.804 257.713 482.574 cv
257.713 482.342 257.527 482.155 257.295 482.155 cv
cp
f
255.635 487.907 mo
254.753 488.335 253.304 488.903 251.396 489.169 cv
250.647 489.273 249.921 489.311 249.253 489.311 cv
248.384 489.311 247.616 489.246 247.027 489.172 cv
246.354 489.087 245.828 488.984 245.507 488.91 cv
245.584 489.156 245.678 489.399 245.79 489.634 cv
245.792 489.64 245.795 489.648 245.798 489.651 cv
245.812 489.679 245.825 489.707 245.839 489.736 cv
245.852 489.762 245.866 489.789 245.88 489.815 cv
245.884 489.822 245.887 489.829 245.89 489.836 cv
246.08 490.192 246.307 490.519 246.566 490.804 cv
247.466 491.788 248.383 491.944 248.391 491.945 cv
248.406 491.946 li
248.419 491.951 li
248.427 491.955 249.24 492.217 250.476 492.217 cv
251.692 492.217 252.886 491.972 254.022 491.487 cv
254.864 491.056 255.661 490.402 256.056 489.819 cv
256.361 489.367 256.582 488.886 256.712 488.385 cv
256.782 488.119 256.837 487.693 256.804 487.244 cv
256.556 487.411 256.164 487.648 255.635 487.907 cv
cp
f
248.678 483.763 mo
249.651 483.763 250.439 484.551 250.439 485.524 cv
250.439 486.496 249.651 487.283 248.678 487.283 cv
247.707 487.283 246.918 486.496 246.918 485.524 cv
246.918 484.551 247.707 483.763 248.678 483.763 cv
cp
253.829 483.807 mo
254.43 483.807 254.919 484.295 254.919 484.895 cv
254.919 485.497 254.43 485.986 253.829 485.986 cv
253.229 485.986 252.74 485.497 252.74 484.895 cv
252.74 484.295 253.229 483.807 253.829 483.807 cv
cp
246.161 484.223 mo
246.135 484.261 245.753 484.801 245.451 485.632 cv
245.225 486.253 245.235 487.159 245.235 487.168 cv
245.235 487.171 li
245.235 487.383 245.247 487.593 245.271 487.802 cv
245.271 487.807 245.271 487.81 245.272 487.813 cv
245.274 487.84 245.279 487.865 245.281 487.892 cv
245.3 488.038 245.325 488.184 245.356 488.332 cv
245.793 488.443 248.405 489.052 251.323 488.645 cv
253.153 488.39 254.542 487.85 255.386 487.441 cv
256.086 487.101 256.537 486.794 256.71 486.667 cv
256.537 486.025 256.059 485.016 255.621 484.388 cv
254.367 482.597 253.016 482.138 252.323 482.023 cv
252.058 481.98 251.846 481.955 251.545 481.955 cv
251.266 481.955 250.919 481.978 250.456 482.027 cv
249.992 482.074 249.474 482.196 248.873 482.399 cv
248.031 482.681 247.269 483.123 246.669 483.678 cv
246.649 483.698 li
246.56 483.78 246.374 483.952 246.161 484.223 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 20.1.0%%For: (Ayib) ()%%Title: (Road Map with Pointers-3 up-01.eps)%%CreationDate: 24/04/18 9.21 PM%%Canvassize: 16383%AI9_DataStream%Gb",KkBc\ge*qP_S--b&-IIafoT$b<_&Wmp+<qG`7.T./nK.S:]:oRm5hM)+%`oFjf[\2@fkFZdf-cs=Udn,`$0H^\26OCb]U7E2%\^YfXMlH@F**"5oof`j=k4cA$4b^(tmO>"p)j:rLatd7cj,shqYZs_ir'O0-ARYXC#k^>Pe'-_7"ANu..XaGJD.b8cbV8CNi70gT%^u19`X.>VTFRON6mZ9!8lM&)dh/*;cQ34>k=SNd5lu2(-i0QLHo3dpc+WO.\Hs[SK"8qHRH\-\_%R0[c5s4?s+#*1'p^kA_O4UQn%4k@[T`UPLq;p==U4NGT"dkS\!\-;hojMRPuE]g0)Sj^3ui0_E_[X0_'5Ok(c?U-R8BD6]lStO9)[ek\@[Fa`:6_2]=i[Xa?7K+<*%k=D=;Z3'XW/75=S!SkIR!4;5sBW96iP.dD_4;bI:rY-'V=(Zb(%Jh`Mcd2f()Yt7Wr=q@M#^/K(5ReQV#'g9k>$q?Y.1q&#-t9Z9%TJ@f@%AntOBug0inAjPi4:Cr6GTbpGj-U(#69+<Q[6(V2MD+r9THPE`Ac^fXpB-gaJWqZ924u9>0BPRe'',ZrWSU8FI[<)<r'>Ea%!i#^HMuSG2"58$lSBTXee1Ol>W=e8@f)aUtUmGW3:]qd5Q2h7I!LcG5"/0T-)7>"8B2a?eoY#[tJDScY_Gjg9Q9`&ScTkEpAS0Eh%UsGu5nK-.&eP3?m1Fs)M:L34tJM1WC$)tAE_%L#R!.8/IE=gXL]Fu8-N[<4B,BsiL?2T3Pdj_R5-KXN4iRd__09TqE,-XDKrU?gD%0d0XVqL&[Q7/[9m#f*#H5hM4[mhA"iW\F\D5VQ$$%Hol7Lmn#^.T)B]!9c@njo8rFd1TlZVJ!tp0W]nomX\O`OaMA_$$ZC7V]]%I%IL%JU3U(NV!5d>&QQbOGhtGNk,\WVbYf(WSFk$eA`XUH-L7ss<-/+]1`,2FZ5.MbH]aH27.tqiRBo-O&o9&"1U'E$1M'/"!9_/a`%R"/HXSiK\Rb@dX?JAtO(;?&H?0Jpb.=/$N0;?bO2lI'5A&''l+CttPskoL!TWf0g/fr+g.!N(@'lKk%,ON9UC!E"BY5,3@C2%uDJ%'S^DgqN.)-Lk8(Aq@]I1%D8"Z0A5a)*>XYA:%`*6"D_E;.d-At3i$fQPtT^OWdl0i<#8"1"T)h56We4%hjC!c-9L,i96Fi/#u$UY%jc$MsZ-f=."Hag":11\,mE>Z>Z##&Bpcjj<S'$CoR,4ofJs`GDI]`d_PJMRs^Bf-4o_k9En\a1R-c?kp"[e^P[N..m6]r>rH,V$\%\ple9asm1^R$^*.9um8Je+(0pTS#OmVC9Pb8ld%YJ!=@i-?/@?D^RE6Do_,,OD*ZHBr$'Jk8p("+.Iio+,cQJB5@h6L6F6hPRG@'%$:VVCo?C6/Qo\"Df;Xu]%eYQ:\8ptBHfk27NW\l&V631)A;2DfB0a\`c03/GhbG?E9ViH/,WDK`]=UN+Dl:^RPb?-7>j:gt?O,ei%p^nef87qepNq#bH5EQU%)[aj3C>:m]nBJhL1GcI4AqfSNYtp`8((`A!!KGhm^(hs<PXH5i`Up5Q3,725:%lfB2%dBJE:TZLNC+SR%d^esfMuuL[8r)=uOaVBIS,s`R7HYBS=QqfCJB*rWHN)):@%S`1gdkd.'R*:R:FlfO>e;uYJ/b<_=:V:^espfsEt3H?!REda3=#IU%`oQr<3T'oPSOsB*GQ!gYn.83P3tDJ9;1e_(V!CCBa8Gnn?6p9%!gG57QCpK_(s;B^'_rQ!p:q`2(Ps71G2bRTCle>eK"U&t,(qL%%j#Dp`,kfZ2Mug@r[Hf9NNkM&=O3.c+m]_"%iNWl\/&uPWR!tYPq>E,0FD$(,;0[EYSq`@Rgg/Q$k:cfUmS.]>*p=-:]\5@6r<$gk%MWpOlh&/qkl2OJG#rtkcIG59]5F%!:R:IWa:OI]6eUuaSUuIq&gl1V6?*`<5%T1T\LX,Vm'=:#1WQb)"f!cLnA$N?_rri?MA]R)n%H1B3VjO3fHZlF?s^j?&1#8RMm-krX9e:]Iq;IK?FC6`=XmP.?*(ut7_UBBo9Z('k4\_utN,1+0l%`b\sVj8r`?od=NCkCY;H_aoe%7R*SUapE&<-cGrcKIHQOUHQR>0d3-`-=i2(`.[&5As.YsE]q6:r,>@#asf@t07%T9F6js4VKd2q_:aP1GG1pu7iu&/51lt7O?C]3%4!5[o:G3tSFK5:KOo0Rd3,^qUR]%#eD`g(3NCO6#FR00#`Io6*^8(_Zq3*)Acj?!`s&$EIqA]01i=<gSUKO<]c'/T\dJYo%Ku]aO%p*b0TiGVC^'oV9T%[e`s\Xmi4;eT/0S^<U0VaG^:U1,d'4DDtlZu0NGG4[][f,^A[IbNt$e%QuFqDJ.WIu>cA-sgRKR2LM,Tp$.W%nu''IpUAukE.EZ`q<\,7gif>MN'>M@%Q_b]KG-)uMDnF_qQ>IG("K:.VGk4:Tr,?jSK&9+#t``?)SJ-sGp.S$_='#m.pf.K.$<6p%IQN[=G(>G)f3q0%Id4#RY6cil0R-+&A#H)(b>-%&.];K0geisgVDQ[HiJVm%`:W\Ld[1$-'X(f66EZ!@(]UME52p?"Pu<T*.?F6>%h2ci-*P31j>dc^3ds'I#N@/-1KGUsD0H\>Kp'qYSO\Z_R-_4''JeZ1lq8q7i`>&7YG2QJ7?iQdi7"'ri&(rC#s+"2d99j.Sa%sni%&AjSYSlJAmdHa[!I>!K7>!;BRJ`313:/mQ+#7$XpH1)h7d4ldN`V]YH"Pnd8;,p<@l@J!gBml9b.lRp9oCn^Y`G4"'IT)QZpBO`;%-H]%M[lYPTp2=.I)[Fb8hnN6KrgW\X=B6Ppi!K+MJ4&Q#r?p84a*f/b/^RiL$C$EdrM^m]9Sa!45!\B3V)'U!IJo^"E8EKoA9hMU%f57!S:=6&*7*aP!jAMD<.0Ufd@7NNYrsRRnIf#TY]>&7@N:OS+:Mo-NE`nrjD`Vg,3H(G`Gp4!d'rS<Vk4\uq#8k+Kh`0*`FW4tX%;fjMWke(otkd%$J]4HH]`gHq+f<Lh8?ak#E3CTiTqG)@sbQ6]_nu;2\2pQMph8U>o'V1+%pu3Toe(O_AJ1(r9+[76p'>CR;J.64*%@@Zb6-)VuGIr?;k4,.*`ARmp\:8-ueg4rZSIb?&Kj[H$[\LcuHhGX?4(FT0GM>b6_4D4PgaM.KLbP"XbnRq`B[VogUG#J#cc%7%_%iS3%u*P6SATq\-\gY'.YDV`USgY'0/XkVO?rANsg?8cO?[Q+90N1=A:^LRNBUfIfJPN[NgjSpl/,/qKm-dd2PM3#&SC9QWVJ-+E3%"82eRT(r#`m(`4.V^h@(P-36OTCu^V0n5T3AB?R4miI\A\s%l;oZ03Rg&"B@nQrFK8ar\]Y+ZCina5t>YH"jub#L=S'OFh8PbsYU%W^aOtcI][uYBTeg\eKm"?[fK-GL&'&*d1t,g^F*jC@GRIHj9T]K*M"`INIT@d[#M=Z8n4Il5.05np@_(n(n+n_!C#Vjg`)L2#ToT%$llTANnbW@)rDI6g76/$gX.)JB?!l)")2^c[`<?8JXQBYdu[h]G^=O!ERed!>gZ#*TkDLSfsCED9SiQnWXjsnfs:`--H'uTK^=hl%Qk90`9\?WI:kGP=iL&\k]:.4?V$H-JVrUGLrTbk]JL`mSjc9q/p3[5;"62AE5G-Q"cg/nTld(@B\ThG15-I2Cf:UCTci<N:V4?/0%cg/p?p#kcM2rP+N$O\$jHCi`YO13tdg]b"TRe(gLq7Pkf4\IOnWo'FgA<N>\5<;ZECKo,5]@-X$Bq"j%.@i:Q)"O?UhM%;X.OK6.%Z/]+o'./5-T\JMYT)&B,6EurNZ$h^P*_+o\6cX$VO5(i'kPB,g=pL5`MdK,)0#=)OE6PiqG:p]P(n7&Qn9Ze(rF?6&OJ)U&lYo2%%'-=A'3=1?%OphF77h(jT?PGkkI$c4,@>6'TqpsHH"hO0:O[sK2Pbc-^K5+P`-beL7#8@h@r'QHVr18+WMW`]fs,U00;A:TrPb<U'%iOq#r+\aE1D;FGN!*jfD5:*qW8$_CZ9n>5eTGk6:i")nZ*_PP127MrXIj"44P6Lu<MVGZoFWtt-`I'Y*j"8;\DU6:lF"rG1(N[m@%S3u,h\X7Fjk+%>ihrW6nksd)`bUYcRVK4BP*-X#^0'7PYR.Ct,jgXVM3hjbrI@bqZDJAA<)<A%M`P;5'NaHt0ppfT*s,)XmiTiLg%hk>#Mf5i>fjEs,2O_sAGp?O_fji^5Ep\c(emWq!A01o/jQ([h&URb]S0qUclFr,J=iTf'#kc_PUl;7(pp7=M54[2n"3#)sM^=hdQ%h/%5<=O4H[I:+$Z4,.*`X4;^clDOK?kV7Se\)0:>$SO,/I#lnTie$1t&5N,,^Z*jrp@_Tgn\1RorIBbS-UdK?F]$bcSh%j!e<k]W%,C)7)=L*.4\NVl$:dL?FVfIHO$hkGb$caH]mo`pV*P%](\0Ff/E"AgIWi(>F]`U0Tc$OqiiSUc-U*4g'SucMtDl:^;HPP#*4O3e[%0^B9BP_Zt;&c)DRb9-cKCTi4rq87D/J"1-1F5#`:^i(ZO-n"(\r]#H;q:)L]\bpG"IiOYX5F4U[jc>TTJ,I?M31`*;PLj_HiVG+Q%jU(dPTp5#D(*6L)iru;uVQ9U_m25]nHN<=n`HV(+)9%F]m+n>u"--9_4nJXL?lb-./*[ZcR:453)*-q2:EVQeqL3!T>U;FrH`*.d%'K2A=/&9%"FauB-+$!e5SM/GUhnO7ipFfqb`G_:*)<K/5q#OBBnPrK%pZeRWI!D8p`lcO0lMU&1S1g%'5+Tt88UWa-#K4/[IZN!>%<0Ig+:$H#a,W01MB1;upT4"YgJACj!1Z%`r0-<E%pHte8&"HBVQXP+#f=u2>g&VnYat>O4'HQoh2!&hLGG#u&il*BLC%&U;iHHq`%n-XfVdosQ^09lF??XEJ^Reb\fs,&a[ICeqJ6_WiqkCA=9gc5a)B7XDPFj=.J3=@r^J`eTRS-Am_(8s3]rf((=Dr&M.?cW<ahjJIZ%"#idJYr#:^aNeMX3=S*KJ`elZS-FF)C%D872"1L&:*g@Vj1clP4G8l=.X4(T@#JH>"-udO0n3[Spa]_7TfCaihb%l.l-Vf+#Frk>%qbI$CNUm=K]*LFSYjoh#j83cIp^mj_Rn`dcqa/$/g.d3%:O(')W'_6S;-5FJ`(Z"?`W$5b:fQQO5IBu:pq6@qT?B@XNS:9cW=C-;%<9@-a.cT\eWP`7djSn@e<_Yf"e^:Y:_!(M_&0/891\htahLFM_L@^aL-CG0dH+WY&@e7-K=1l;'#9<W=k:_Fr/+<cf.Q8IHrf[+d%k+^]Y%LDp^T)!QX'^ohrAo++'P)%Gnrm3Y5rWFeX^6eRn*7pmf)udPF_Y=gPqa8fib<]-Ad1bDU4Pbm3%.OicSfP&R]'TIa6m7oh%PIDG./"p"$6=E:HO@A,Xl*c,,?l)FVf7/CWTAo+JG\:jhIoBrG*YA9e5Bsi'd:00^LUc(LSn$Ps+S[#g"@)C5l$r6#nRF;_kNM0[%U8N)%oWJEoosoo=h<=)*7deprp?u6Epn#a]a00ohp+h[BY,X#GoHWID2Ym_;;bkE*4(uQc\<!)?4W>ceKQrM;SK7+^.4,2t0sgf$%G3T\k`=L#M!H45_,u8i#-2cu?-r'53K%a;k3P3XJ?C3p"(TO!eZO8oS6B9iT*brF7hX`,.kD'BKB+Oic4Qu$oWm<>`4Q=HG?aom0%,EdOp*2f\M^\%f,?hfr_hg_WSYJ8gnl2<lF\)$QnhsL/*NolSpFrD"oPi@$@:;O[)C2EmQe>MC]8kDLEPUkghq["+$A+s_@n0kbq%bLJ')Ji(B2'hlDQ1`X7aN;D)VU3u9(^`T"AVgYCtrR]gR@TOPN+8_lYhbpcVAst4,Il-qUm(oZ-a)Q(ZF6kCN4#[4iHm0U23Xf8k%J<Vq*j0IoVYSM9]i]20,JLc65pF-=)@Z`*'7X8`IlEhf*?fuX,cJA.b2FFai:dmA[3V,X/\Vs=Xk35bo0!Z_URth_9f:MfKMniqg%DXI(Tb-+`%LL6%?ru:6h4fd>`WuM%F0lDgihPc%s+aC%SK-_jL?hrG/N^rt2'(?lf&GJ8E-QbIREsd%'J[?YY\^-P)FTJ2lG]B09%!mqtq90T5ZkA?k6(rss_i?PP1d`:r=ekT"eb?%i_T=jZ[p,+Y*!YFQ.+1q#`JfIT#EJ*P&$<mQu99l*"^D6A^*L/)1@lgDH_9TQa%\kGeR!Qh>lC_)JEGFMcL9G00V%0R1sn(D(cg'Rc(\jM<dVciBu"p7?02O#jA8S2L@k]0$H$QGF;*]8sdkWejG9A$B=V8EcM/TI)[%_n4M\Q*WGYrgoc9?k/VHJ_UQ>_k)FR>Q\hn'=:MoV_ksJJuL9#e]oZ>mi;FXW2VJ+0,SY:+?suCr#UpF"$a9t50OBupt\5s)`HYm%^WR"7_-OS&(IT@XStPp4Y$15B]))TD'YoJ_nC-9F+mQB0nJP:"^s@3^'ggVQ3RPihTVWiL%75fNW8#Li.RB7\:Ek[r*C,87'D/nU%6phLr+r^@rp^MTV@^sJET+B?A=9Hlj4Gt]3J6d-dGQ4U"IofX^g[$]'cja3Xm;lMWi$pV3*?eOpg4XVaWO"-3S&/HK\@O_OkT,,U%%n"Zgh*JLhNlDY>@.#/a0o%jS_u'Q-!C6B(TXBU!MlF#p*5g;5n/%Q)(;mh'p^DnhHu9Jki5ON$!MJ?5n`/g8)BAP1$i!t"JDd=V%p_s25>opc1Lu"d;H[UG!50+0Qo=<FBm.GV.?skka[1U$'BZ0[T`0_X!?![G[56)f!"^E[@D[t.S`ZZ)r"[ERukA`-UiXfK/6NB9-%&Yh\_@\fV3?SV\i)uOmjr[WjcmIU2V*Wur`GVDO.!:tiJJO+U1?:5EVJQc=MdC[&B!&,VO@"V+NmXW=c@<fINO9hl0kJKE<6!cJ_%WI)bC3I&"LaO)R?2R!2I%CcI1igq8($)A9>_X!!:_`\#ZN`bTK>__MEGjb8M3m]5\\GddZQRdTZJO+Te83R'H&$co5K\)"!O5WAH%N]mIAn0!T"PIJC)(1=s<g_bFYmDFNs;?Ler07Z6u0fK0Cct;`58\?Qb>DMNM^ifNnJVC6,mL^`(a.]H)(`1'[q&gmbL%4.8i&hBd%0#0hB)BK<5Jr#g\T*IQ<P\[F#9AT8f>sXMc5kb=&mL'B!%!Q+\,R`Dh_>V4N!rt<L.=m2G!eR)R!P4TZ+Q2c7\RU0M\8VA_1UdSs%aTO>sQfnMaOd+QQ!!6/E+Z[&;_#C&=hB4Gd>7_^CF&MeJKKKgMC1:oV(KUMHf2r)D>jN!1]F4#o&K_E*.b%Gt1[ZqR"S;X]J_'[Y%1;N'_9ekJWR%3XpJgXOo[WCsZ\7t_4S32>jX1VoR;)UNA>o*P<^CT<3i6+O6qY%';8Dc<C-=$F$K&sl34b5HR$\.>MqCP%tj[cnh%D^W\u%Q/ej]u1X>#;EDXo%/[,q`,qiD>RHS-d4traC>!ZVE6!r^$?;j@aXe*`;`EoGNFk][N`7[YZS%rnb5ZHPU:_?0?$j1G5Yi$%L?*Ji*7'RnerouYH5PWIR#aS+#>BnNFo9kS731bQ4dMf>L0;[ls#sn1r57!6UT*[\gL;gjWLYo0T]O:#]RkU9E0kL85B;@ADkPu\%dH]ib5=lL7dfdST+K33I^tFsn5$q`t!Ep;l9A9(q5>.g.kM7Yu5=u4Yo@&r^%PQu=m%`ZlMTk0Z\9hcLK_;;I1Rn#cgtr4;o[?/E%P<@4piQl/W&cC]LFM2t56&@XZ3l>=/KjBPuEEp1j;i`7JBjt\eH2n>iF0"Ts\,u8q`q)JR_=AV$@!cY\l3Od*oHb;!M80>G;drA)%C5s4YkiKPI(&,1'.7DcjEkj!d`kuXL;hB^)8:V:L4b3;LE[S++a+/`'!$I-HlhRX9YSV37@QI;A?>fr(R,CHN:S.Aa^aSB!\=kiJ%^\+IgA)fk,VRR'CcV5:+.B[o%*M;k\\jgX$aY#"s4dO222&iT3,T-Gq^@nhBVMN;u(8F,S3h*-*J5i,1!.e*POs>8F.d=uTee`A4%9QJ#s?6hKB2A'Z(-Rpp$$?TnS1Y>T-gOh!gPJN1pOQn;O?)ZQl6^;3@D/29,(RYGID8USGZA[1CM"TVTJ&-TUcInJ7HG"9+Tf^I0%>r"S]cjTgC\SsREYe(1Dcg,`BkZK-WlWi*/"=,t)-3-^!!KRI%#$PT:#nP:seg#;Y0cG2%',QaA>*C01#.btj1n_I:QfS%q@.9BZ%+"oMh6I,d/P._!U+IXfj"BX1JNHanJQIWq0m*]!>5KHX(9J862]c9JS'$C=DTG7f)9WHk/p\B$tP6gGk#$-C9GjblqH7Mlle8muQ%j[Xl24RjOpee`P<lbMKcpE2.Q#uc\[qb*[bHid#:82X3BDo!`&Ue-`Hl]T9>-\=l_GY/Fh+>L?X-J[Xs*14g6NT0cXN2@E"U']0H%I0Zn&L3c!&WfqObi5)`G#3['aFrY7`$D!K2!Gb4aT+^l42`G,f&$^"SDAcc#4Ni[!_4!mTX6-i-&pZ88/E$Q,9B9G*]hb)Kj]`Cr%XI_[#,XK@,+0/$UC5r<QS!i>*q9Ih7Yag-u5VR`W0RO1hKii?<YHH3K;rEEj2-Pl==8jDs.D%EIS"a1PHYpel/eS\pZ]O4oM;JB>%W@JX)SE89mQ6`mZO5s!7d_pfT;B45\TH'V!?0\P?R8:sE[2K?]S%m=.db,s%Tsu6WX2lX2.7ol'VBD[cV6p9%=`OLs44b1]G;Vn0%:U%pRgA_6,5oeAtk`m;%G_*I4\8gE_i@\i!qB7bCEoVgN,2'_%27!i+-h:48i-mloeGu:Z0N/QnquITN1EKNf]G+un%q%iuq?UUH%@n)Z`O;[4/4n=)FZHGpf#C>PZeUjh9NuR[>'@mf7VQ:IB@R^+D.$P@:Tic2`efR^80n`S"A9(5gm+F62jUI1H;\FreEkrNu38nW]%=`aWec@K)\/!>CX66/Aj<ZZb<R&(ZS#A`CB7WW$C,C4IWLZPl.X[!cUgCT?9QC5aDrJDgT\%L6<;1<`)-.Ep1AqER@lW?Cl32MHr%AV-JN0;eLgbmJ:M';AH7ksXO=Kt!N&4B=ljKHD&N##c1S$VCKp/2-!_f35`'NZ[a=^1"59gg]L=]`Qg?q=gV=aKOVfGJLmKZjXiD%&sL'9DABhBCRJ[T@1+"s$<!dK'[RnsFW6kf1<`O7!,7U)He`dD/!8TGi`(5Bhc1`1[k#(4fDC_HG-tcd"O[H@-[XUS8aX0&ppF_=%e&'Z"C42Z_3h(`58r2<R3`fbQ,kQi5\MpV3Gsdo:Ur>FRY(rGWDB&kKE>W4=o6Zl>H7a>qO7#W-2efC1pdQuhB[E#i86?[`K_Pa_%]:dC<8:eTf]/>nj3[QeY<L9gBbKFFec`gBRc":3c$(<QKn3KcC:u!ik_OsRJBL#0_(dd[B9CsW7@N[#2GthdM'gm5E"F1&98GEab%jdQd_@hSQb-n=2TrO<=hRCI6t8$#Y48#e,hVeD_^9>fmc:lD:mY:&r;J2]n`P7JTi)GPMnX;2Fcc$_G6:,si8?oUO;fgqjo0C)6u%n?ka'[P3]WPH2YhPo(U=1?GE`!gWZ90Or1iVZ6ScO%*W.9kcF"UK4-E'soH=^fsE4r`T1%Y\78rp*PiQ%i6epg5,Wu#;l4K^B&hk%JSZN"B$ki36eLgd24rdNi.KF5^8>8Lq#^I47UHhs5kk\8XU(I:&)@fpg-oB/JK+=tHn]7Xm)sXHqUPnDbRsWXU!dS5NjoOG[_PYl%>#ml!G(WT!C\W!48T>1er/(^D9fZs3%XbM@W&9bafm!5a(4NZh?_d':pjiEpK&2/rfO<0/6q\)Mbi^"Mg,$kMF6"G#K5WeEG8ci,%F.&K9*U_@@`LUu%X7=1kVpD.P()Po:krIS1#X,']`gf4mS@Mu<b7HJc.Qq7T26PC:?)bKKlq1PGL9T8V?Min-_t8P?q0W?\i+q!6%+'`N>4lIB@UXk,]<-n<UM&6Tg[QbS"Ab7,C-u-G'!Gcd\aCf9-r<Su!58O<f`o7C$Gsj7\C-tfYPr<<tf2e[>,Ag$-e?8rAVeZO/%:#%t_ijIX.+d$s54E*D0a5Hp8RYm+LB`iEhaX3U,YDH,TB8aI\;[JR9Xe8^FSjBk1np?,=H[O$GAsph9^>e`!]?MT9ab?h\EX@f?%?Zl=uF=D:uF'm/&s8:ms'oEoFP\9r9%S[;(Ghj.),cO'?"BGHk;q-pR\LW1+Tq=op6J$-#B<cCJprAHjmD`h^iB3I-UcXr\(,+P1%qEU3^eq?22o9d\pnj\m.6-!Y_K(eIkI_V*4]Am]dO'>,jB/i&]2[+`B`5Lstc-VnM]DC2?cJ#D*Up1RDfH&[Fhu;\3--G?5VFUkn%re#=f+-"R)gGM$)GHB3cEc2jjWoX7Bb9f*8Wr`gPWL_5TCjFTHbh%(-)G;Jl5rt%e$@9p/XQ^UOdq)3H!;jggZI@AAB-%1`P9&qs%`h:]tSjOEe/Tn2+E*57@]cTpR6_r]F\o/!c=cM['Iajb6F[fjiL)h2uNAdK82.)djqc!>cj65.?)WuX.BWuLL7Y>c2;WH?u(E3&7%eu/$V/diSi:%tCPj)%g1Lm?eb@)eDZKPiY#RW'(7b0WNb/\`VN/Q=Q.c,`-`S)@=A,%O8ZP)m2_->d-D1n!WU9U!q$T/?Ad<2V2!%B5pY&d'kma=&uZ)C@L=B2k;q)WTVGGbq4*_X(fl9[$j(rQI\1*,=@"Cl0d-+H+BW@1p7@l:"*h-lC-ScoKq$q78''m6h$P,!R#2s%U&0$C;fQ>*n(lR,L:=^6>"tTUBm%lm=_gRl$sM-LmT+*t?=@#!Vgm6+AKn3uj5mO<YP#V`$JN;'dA.5,-;W?oOgro\f_]l0E`fAX%1G;1X2ZK;F[ABd+79f#A4k^g&1XY(Mc%bp5")sjkZrYqaCYILf(guceo.DV;$NQ-.dqA'T)TW"3]^aRNe(31[S\]A)e=!:294tI*%E]W!(+4,9BDQ>BD-90iCCUgR+e_V?hWTul>Q`FU6?)]]=kc.E;*aReX@b9H%bXUE0E2qG#<J&b`KDJ^Ejsn*EoX[UG3Ri&'pu"JC%\a!N=D99VJod)]4^r"("$a8]9HkCa@^L'Be;p@`dKc;[cm^W4iCi+GNC,R\bd;joG(Ji=gon!J6*\[BOip^FLb0;Q9I+G"CKP(m^%?>m?c0'TJoj-(P!-74$\+1LMgY74?W!peJ2g#:1P?S4glqRYPre)+s:48fOMHIqoJ.%gL@rE@`Iqq\MCdj$sZj/@03E#?SnK?(/)%)a[R&d1E)4-C*GLoehY^o%dtgBGbOt_o#3W@j!JJ@i1<a8&HV&EYrD3F3A7T>'?[3FP[luc"DedHkUra-Amc&R'5"d`p-Lpb1NF^%;rc&;=>ol$pK$=aP]%N:;="YB5@ZOE0ff*H4-M>]$^i2W!T''dK^VTG?klCq8_md#H6Tqt?=@"md0\$0iY+b_fpEnoAnTOq2>^%C%W;5_4F-s<&.F)1@N-aWu6F(0OAMch3'l<q%k'&lE[HLQX<f=lbW3c8j;t$$QS7cBS\M$LsNI`6(pC-k,l-RA4AOJ[G>'QqCBJl7a%cW4+tBj8J8D9&)k`VS/$>Dfktb'0qPcuOHu><1WGo%KO>V72lH\qJ=na^<dTmED=Wc"/;-V9A+>pWljKXo%BYgW#d]bH@Bm7WuC-%C:3q+p:*87rSFgrkrrTqHCs!df;D[&5'#/-p=\@)F''*:AV\UYTcLDs'OYnpS#2LH=h;7b&B3CoK.]i2VmbNtFP:N<N\f&2H(E&[%m_r<8nS[O-D;iG?'[c5oYJ,*4P::s;\SlU8m)ht3YQA1^@Eh*<Klq:g?>K]4iqg<eUse;u[FpC,lK07]-a5@TbP5@f#>[,M,Zeio%o^>c7jbanWXsfL2?,bmJ^$Eu'aLXW'm<?71F@N`"<M-dL*qQEol$^6f=8du-q`/m5F2*tE!KXZh_,P`AP>>@FO\<I*;n0;O4a32"%hF$.,E$!;Q_0N.-$h"P5r*""sRFHS%SJAK?CEHs@GFQS?ZWIiA^&\/$o48Q[]!"u3[s]:N7/PhnpBJCoalDstc+OPTBA&X2S\H%b%NVkr*Z1tjNoI]/s.r^p"9`r@F_@q0ML9C\Y1%lC4<FW,(M_%n]#t&bP]L`VeK<O>>R.#T!>KB.ehh4<6XTmFZX).!k*)8k#,Ebsh%_\Yb1$%%ig9K8:mEoBLQ\J4J>$H=bq@'*)GV"7p4P&Ji]FkFrG&qMG%ja7$d2.F>3:I_(ESiLgc%(hXFo:d(i(;0(6/R)b\O]:L(%H<mo=U[<glOFD:D9at0IHZF3C]k3n?.aq;gMTFFJ=6u.W`gi<q1D]_sNNp&dYDMqlUM4!)niVfAM+9%embJE5X[0!0Ikq_TK^j*T%Q3c?k`ei[h@hUMPX=c5=]2k1\l+"13PAsYQR]Q+.+kc<pS#M=X=YJm?>]Zl2`Sj?N[taG&oX.q"3t5%:SHr?Al.[R[4AAtupDIK,%NQ[!G_dMVq*8P3f'qWT`6KUhiCCe'goB'h=-2Xe4QF$$\1Rl:6`FLT$AOj;C@60hr>NeB0egO#ZEO5HmJ,@kmk21bn[U>];Xp\*)%B._UP_rnn@8OeW8as0uH4M3M/+Sc9EHV*`R;h2P77G=nt8meS;j-J,tq=muKj-jR?8gTY^`\$:%^EpacCTDq=]T2m;O4PtemeV6W%q37m=b*d2pon'_(O4p#(nt$m?X0*V>X6-UWB%8g>_V]$uqm2bWL=+jWJgS0'J((n'bVbTjMUelbDuNori4Q(LYAXek-Y^)mB:ZG*%rM<tp2Dj,8CEq39\nk>5VFk@6pH,jMDGtbKGV"Se+6p,#>IG+b28(XT]NH:FbK[aErRN_Ol5l5)'d*'d>7UbJ[`.s8krW8?q<b=o%221K'UN6+cqKh,8:HdTYm[kS,JHlWMocHN<da^_&(1J?)BliMNmrOf8U3lD#fR)jNT?NG#jsd:-*hJrae*+.#fjR_AT>T9ScL^Et%^%BN*B`F!GnEF7/RYUkMjgX$R*OiNBG2@oLgYKK8p!rENcX)eKI.[:+aENK!I-6?rMD\VV6`aH=B)1^d-X<]Q43_*<g0lS(=uUEF%2c]]lS\lP]9JK?8I($jqn"u#J]lEYk9R7&5Q`NXt&gX"VfD=pjHad?rh9GekI`sro]A33JV/BrW7NA0@\o/qS@F[AU%d=SK;P#7W%R(Bg;4]7L0&r8a/I+<-6Xo;iO^J+t/a=(_pH_Y1&mN6Fe;hD_WhZW0?),?4"GN7mHG$,oJ?X0#9`+TJr-YXh)2!I'+#\3HfGc$RD%\!USOH9$+V(#?6#Dnf$bX/;Q<^B\)?hY1'Bd'=S!K4JJPk9erlpp6Jnh[f]nFLdb`OftY//t97h6@D0o>=6c)@Yqj$731/9EB-HM%?RPgsb;5TbVDPh3!cg/[3cA)Y>aPd]ofnVBP&-cG>3fDPLWeB*eW+3^RJ@5t[\j6mgaqW)p>O'n`4B5ZOW=<hYH:gu+nKo<l:KOA%\#X\1!eYR%[EM3:7Pr.I\uW6Vn@SgbT8_:hA<_CW$$9<CgaGumM903qF+,gTR``i)2i]ho_b>?LU9n7i.52cb7;*=aGPlp):L)Qa%pQDK+DD;<6I"0tiF&aqW=ta(lA!jd4(#4P$4V;21j'cUTd1e>SS&q%n#R>S4]?R1#\kq`O)_HE>6DZ&>3QB@Ur_2$G%d7nn7u(MX%l7Flt@2H3<Mo-1>Zq\(J=*-H&qH18'@2GIAHt&2L.E*o&A0#3Wd;I+c0FkNfQ$W0)T0JUgL\qZc55"W>n3#??+K[585Y_$I2<rZ8%1+CO</+H(J>:P'$Ntj^=^b5Q$^;"sbp_7Wl*DLgTidRTaf]=OQ*"-bHYr-+AcSDA6YHQA!An><'Q!(-eh"&@)p+Fij%/Ju2s+%;X%j407VihcD%-&?dL3+0g4nn%=-J5:oDQk=*Hp;#EO]Pc=qKJD6o]pVJ7Ho"p;l)sd#PT5#'iQJafD6P@iD6GW.^<IqFR3gQ<k_:5[%,=_/9APMnl6NK!'3=.oC?+bojQU3>kl`Z7jf(q4]Qg0<L3.>p">St%PH=+2X*/dV(`j%C!%QctN+/.8kndrNgfM**j-=E>#8GZP.%X;@Uo:'/KQ01S]Z)k!AteZhBUI7YMRjtCkZZn:JFflS_DkgN!!8`n!<g$CkV>TMWV!ZR]o!C9ST70c9Pk\L!3-BM$N`5q;OcW.=)%.q/4ZY+0MFQ\LI=qS5EK51o@VTV*ne4kA$C4m940R^nr<\nn4$6MI9-r@.egh7N5CFmh#"1n(k`;HJLl*)8#))=G1D^E?*##7TNj%'&GVacm_go%cDUi!8J9f_+pd2rT;WU;Jj?e=?,jG*dhn^GU)ln:%b'rpG>/Q0+u"Em7jgb^UoJ,P)3qR?`2ajn'@\Y8tYV.2qe<h%++1bWF;q\I':ug\-'NXj[?K+0cPc/3on,rDDnuGVUT],rXiIO4"mYR:@_>UE'Jh1ZY:/mP_.Z./Jb8c;j2QDq,i/]VU:pU>$TE<I%]M[U"gSA\*<lBcI+RW@V!`U2aS4\rGl-g/+rP8)PH'Q6%:GFe+J]lZg9F>Hg`F_gu_3[l!X`IMofS(FNc++aE6l9qNcm%UNTp1PG%$TQS%9C"G4RPFJnN];48G]9'(?7pq_XL#f'Ws-V(aY5S"LVDIjD(Rb'.np0\i1>K8VOm3A%?5p12)YH_FQVXlR-+>*mVOQDIrMeR%APgY!br+/-Ct`dm"JnL!*0J498fqu9HWFN_U;9g'F?bp,/a=eMQbE.f_5'Z70NZh(hUW[\RP@n.E$j[pE*8sh=1_)>U'jfJm:Xir%Y<V!P=.74g3:L2%L6/:&Y>\*RNUMi?oVBUI)oK8q!2=.4!goj%bdAs2YkoO&[JnMY*d]djI+H_BYa/m'\b1O$1./kbVOMe?Ka@ti%MU)`U-8p\85m..Ul?J&cpoV9RXnOWiCQ1hFn4).cO[WJ7!e=k4c4mM+`5jd317)/!,dQeJ2%(Si$1K5b@uXuh=kXR8Dll.H7Ouhr%'CR#niK<f8p;!^dSEKaa@WutO"?rS&j7V"jEo%^n^W%mI8I+JMg&tHLA4YVhZZ`uFCNrm^W&(Yfi.l<2m=l%$[)DRbH%1*>8P]2k%rkO22?>ee@KB=?eFZP@lPGK,o'ZCD^4G&]dckUFS-*NWL79<9`oW+SI=84WR9jnYtLq``N-.`TBN<i<5&1$4Q#m"0+d[ouUmAZPT%r@gs`/siLmr!IK&jmWnee+F'.J-Fq:#8(/M5.Z+cN4QgP<7-enjMoS4<-gs05VO1B^R?Z3i,<$,CkW%DfOWB=aI>`Jf-S*+*6[ne%oLp+1,;QE&X@1mln,t@=#2u$t$gNP?9.ZDKU'&hN(R0Sd59Pak1!Hm.cTl*E?m@E<T@V[-5uau#,%+'f=c"lO,\`,'(PshVoP"V/%5e?qp:^^\,jV1'_/R[biP,aeI82:Q1!);<^<^`Sqc("r!+tK*jkDBsP2eM?<JJ!HC)e:.aK[rFoXcFg>`%:-E##`rr2=#c>YGAQQ%e`]V@;0U*<\AV>Q01T,M)@o,*;8[eL,Hus0HFLU2Q6S"+aE&Ac14Y1fjjZCd%0_kFkE'('d26Z5!,es4:BLD:)//O/cbk(mB8JR9%`CVCg,T@lSn%6LJ,8d$Q?TBNG?H`):N5jiW?4>6s=Eo2i"c-D]UKC054%N7&D3lZ+_Liu;-mj=2&42e'7);?f0XJpp]*1Ku[f^(V%WPh:HTL9i!"kN7UOn_1nX=3q#=eH5b=q?s8%N<g8RRU4"eY>d`.R!?.)d*$sLJfJeNB(oU3R^A40Ab;.CTYO=O1iZcA!_AR2H@!H%]PGV1a=C\.](4f6:>YKXM9[54>1+]bl[mPg-IXkgL&qPSa2WJ=RQ!H&47Yd0aF(*e?+;bQ/Q""ZjX.Bg&1RSt@C&S@&NKe@@C&S@%&ND#`k/d[rHV+m6C^VL'Ki'1VK-[\h$bA$^0jt!SNW_K7q(0^b3#Z_F#kNpL.o7@?Xd"3ib[pXmZ-99h]/(t6GngJDpYS/u72V$A%E-3O.I8"%&oQsK/g?m<PmS4K3-&Sf`pG*f%eW8iiU#O9_bbrt+DS?_tjMq/D`/Cb0$S["1mjkiGoQ(n_,g)5I!=UW)HC8;^I#iAu%Y+25;OHiclSg'N-]/Gu[ib'cN?VQ&NWW6Ym<`1(ZBJr0R#*5fI@?oc+$8/r)""]7>R=:=Y-srumIg!biQd<K#cFJW8NoJ]$\ejSE%@"f2TF1m;[<S3=cH=IkGG-ui/f<0DLnAiDbHYmr+*GUng&&IJE!d(N8mC`N@Mm0A:XX5Gi&DMp10k-T^a@*1>kR.hmAIm,t2@!Ma%E'7FL`)q2-lNrh\<sVD8]*c<iA-_1)=?i1scg(eAH_B$?6n[Gd,r"+tb:Sq6B*YZ1O"^$2\7f5-1d(4:.R)2()\s&:jKr@2D21"(%#n?h`bUU:?m]XX3d]ZVjZbGFF)!R4$-VXjlG4"uACe$37.U,3Y=7(@cAakj"\K[JB"7ge*`ofsVR[`UG9d]?TV0Om!PFB!Q@2Hh+%\iY3s+DCu9fO-&tdSCf<nXDWpnC\bET][q7gb?4_GD-1BQC[-k;]J,IUE\T#a0miPN\>_(kO1GcKsN^N7ii4\D#aDBdM\pcAG1lc%!bQ@oUaNt]\@J-uL]QI(Okt`sM[/6uk"JUniF<MEF'n`c)shm:J,a>QGDX%p;,q%tJU;mfKc#fUGb?i5#cU#7K*I\YKDSX*U%&Kf%N"fA(b<KSlQ^++`W'GGEMqZ--##I1Y\]Bt)#Yu49"]t-6(iLZMoou6&Zc>Da,AQ>F<dH-X;@U1j?/5J8HVE1]ngki(d[!lA1U$hP%m(>)fTF(^]4u)<W!n^dU9Ju:,?so8>rL,2OR;h_>Pjj3B_H0=j]@Iqj>6CM<!d""BjC"@[K1t'r%Fi;ELNLRn%D\S@8u3&(&&M;W%dkJG<#;XAo49c^YMgD8&1Xn2IC7L&jlAkMp#Po$o?Vh-R8N?c(m7kt,)_285i6?!j]Fiq]n'Vn[mD2s'`ffU7llgD\JM`#b1tNW:%I?b&b'AcqOPcU#,FYD8a#Al!8J3K/'\-YM1kh)h]kuhdW%\5uXj`LTU'X\#<AMmjrp0M4s#s8X?O^"0\CE1&_dan8G3'#KL(Q1@:%jaHUCY\U9I?.W`C,;9q7O+jKRpWDDg(%[l?Yc<2r`4/.u%J<q/Qu+EI;VDN9Hl@af?jqmkD,WCUlP%QPXP(?_5TrqBdGZ(02>c`!%""tGak+;211$W$5!@gC2?S\e=peA8p(BqWr+U1Z?!`tqCg$Nikp"?6dI$2/hf'?07.-UDfdQ)WYi:&0jK1VR_a(p[e]/]AQO3@o^%f9.HJIgRQ5U"2<eDn4\7]Feeb<6jSG]dLI)ha;dSZb-CTJ!oPA,%ZU#I-s!sfR4?>U9@@.>&omp<Y1lu$cYFA@Qrr6/odY!Hn)gX%@V[O4.?HqTRTH9:ATW5=^NC;FdiG48-eG1$*.aN1hCuZ#8!&ur>p^G=*e6KKFs^3@];2ZM[MWLmjM7Pt%l^D?/>^P_!&9_Ye.[Wd%][piA,!&s8$J=EK,<>DeeO;K?9Sm2e+s,YcC0]J-nb'l;3V[*V[M(=!jos)7:"NIVb#9lS4GsK"7bFj3NdWEY$N^-p*S4E+c9G4+%^*,uO]PP*3<arr,96DYV00\U6ngZdV3>Ot/R0Zu(W-/X0\i?0+?6;mNJTbP0e3NbM&,4h%dp8UA16+d2isg\OPII]4W_gFC"1C%!%#<MgN7FPm5.oC6cB%H!r&7TeNY5;V^=WYMIGH[u4`9g13<'&@)IUhA>J\B:(g/f]5"HFU(R'1jf<'c`KcIZEt^=Qc*_K;]lCN$fb%6o(`m:c$p`qh);mqHSC]_BA>^\.#Sa(NlL_S%#3Q[7NBDme#6G.4h-U`tYTT?\7+0]<,1CF,j\!m/[re5p0[MPO]8KD5M-"1.\8L%RQ`'N`VV?iaFf<*HI?g%<PObQ'sg2'k-SWqMUd/.(HKGnK0\Q696Z3t1.ap;!anPfLNp)HXr/fQ><iJ1fi.]/N.7?(3^mAhB]IX4%#;BLM<0SehSR+!6#/NUk@\-39f-)6qp!0q:8^VbaF%+0'Lf.(V_Addi77.gY7KP6k0p12pY\f#;US2U_KT(;TcuAjdZVJ[PArAoS%@W/):S(I=7Oj\!o@fM%a!&]1N"]+<Y5i(<2>JWe(4p$-&>QE7E1s3Hbf>2RL*g_ofI*lZs%T&DqH0*>=U7TiaU&bhkoaEqZ2;g=0%@DQ?7eYbsY#%j79/oV%G/b^:8jNK@`hZ3?u47CN1L/Wdq%L(M+r3b18$2SG)9hCSC?j2XFJeS`j6l'l\$8;e?Oere1Dq.r>hn.iG%"d:A;kC,VGCugFHS0j?G=OOi*Y?>6cbYSu[U[dZZdJ=PjJ2oMZcI]I*#+*m5@[C.;)j!_)Rn7eD\CgEhB)Fck78GHN/Ho<E]jA/[%\pinf19W@60aR!Hg^<Zi<K.,FkcrM[bS!Ub:/?!r^;rf"D;*rR_]gLAMR3(F0@i/k#WL;WD4\7gq="r8O3u#OnQ+$T%qI\,fJ-3<%&<k9g4TR)Uom0Ms_&2=++ThYDA.GW&(,.PHNEtDN?\$j8C6u!F.jH#;M;-Ma(T*Wd%kq^M3j4W5I(jeeQr3*F:LEbM;Fkqo`$f2j%SD@#pl@&lBd]cF#(\VQWR[,krBl,XkotfO1eZgf"!u'o&HhG'^*/MUuD_[$g#\1$;_&A0.HTpBEiiU_Go/m*NbK!$$4J>Eepmeei%r4m)W(9NZ;71'P/+e92Oqft)QI_V4._M%7^GbTOj@[&X^V'!:>#763Fhui!s%6NH7Ym(shDT,)b@a5`ce@o[glWBM_)8[TSFmd<h%QlFFX[aDMtQR,;CjZDD(Vq-*PAjZK$TJ)4l-t63b:XF9tOaRKlDW<UOoEsOX/G$E`%/o6H^D%/:-h>9qB2!U1dW\p_3Pjdg[B3M-%I3>B/k[:Od$<H,E<sE=ZLVR!fLtEtu;bfKj3>*:e"-r4WHtd"1;OKfB5oR283)&,G074':2t?_BNG220`&F^D5k*F&1#8C75rb"b%B:t0R&PN/d8I)n?+qUpl/M4K+L'$XMj>ZQ[TsS8-P$j8h-Jg\<'l=-;V3oQ(3iK87$)/(@(FqUE1u$i`bE)L;5a5Es(fgF65*O.o%.f$Gq6,0p%^9S/6rb5j`n<IQi`uG4ZS_H:\=JK%Hr!h4VJ:EE@n6RF^W9%&;QV6'ae]F0s)O%p)2=Ak&!9W0f^D\/4,8LX'$2[nd%.m363HNGeB&Fi'e"ft,n`0O\If9>^C\dgHsIa[C$^Kc_O#bfmC-I>o,5ik:A`qjP!fi`cMpVO_Ti8HfB>pfA`Z%:<XfE's71SF(:%Wuh#H+2OQloZ6:&2$d[W`#G)/dol&9b1p7V74I(4\(X(rGD9E`B9#a7/(ualHHak1%)$&$@F_+(Q#,g#'Q5Ge1,M]LTW9)];Hj[j%0#MERdr)D>(`lE7p33VO"#<+*1E-ScV7J8hh(.kB>a_gG#W6WF)D&Ut-Tk'100P/uS!PVH%\gDCPf;,hOrUGJ=AmBS8Tdg:]p^0k%GVM@Zrd.12e/SLuPcBRs=tD#-R?ldhc`=18MgNejl<=aL"Fo$SrF'='.F8J\1Js?!$FV),!k87s:#KGd&L*\_+Bq#j!TR8Q$j=s(%eJ((?9;lRa&%l;1Qqh@q.pNh/_:S7.iT4L=J/V*^?j(9Z^nM\`*ReAhV`=?c14h1*EU6^i3%#h1!U)./9t*pM9(>)4E.!T1^g"/=%McI86JsqYlGMTdlB%IU@`CpSih)u'L_L)C>>TDOc617*%@(L$U9!o2dIBaG86=8o48WR8+U8-#><0`jXdiGa<QqRP.$!0]:*O4IP%9=S^HhU==?kI\[+9rTm5RJuR9s5F4fOj9g-`D.%EiA(Xqgq7o?"-CA]H-ekIh9nHR"gT[1;A1e^V8TD'R_E'piL>$,2@M]%^Un60%#K8<,&oR$YJ2%/TpG^!M`4"4Xp$H6g"7EW7h^Gp/0&,!Caj@HihQC/,3*3onU^OO9h+t?)6Ba1*,br\,cF@Ca:eHH4A)I^S*G0;*%b[CQUqF)^:-f/F&%`+Kf5:!j\^"I:W'e.I$@s:iXF\\OLh;/q:kA/RIm"Gt4CQb+Xd*4HD*fr&*Vasjn2TfA<[bJ*h1Mh,Yn""3V%,#WUOW2(YD??IWcr/eRsA(+7'\:Jb*i2(7bB.)`4R`]CaI(Ru_SQWn4/b66ZZJY)#:^4G2q<adZRiKi).qpDZG5cNq5H>#"Rn1['%MRap+rXs*r'[sQJ(P%&Oa[.GX/eXFp@+S,;]B71h$XDrI:;8g(Up)SDNB7f*U(nq3o81p-?#.);&-RPH@KQ%cbG/d`h(,:6h7MZ.%j1"ld"!u)`p_qX)AMJgJS?aM<!mno1COtO^Zj8Q8\P+B9SX>>aFIe(\/48J%KdC,:(>\P\mE:L%]8d$^5?kT[0tM2I_6=$^:rI/6%?6$U0GL92Y,$gX[FO;)eiQ]b3<([-LV3_5R5-08$L=HO#BumOYm)U@dFRF_``kT/#We4WP.>6M03P5b.03JqDlmWZ.^lHn>I<"i!%Vh=N\d93;4Hd!Ssrl0&)MPk[N("A4q0;mRl1Jg;t^Va_`o\p9*K+Qlk"N/161?(_<5^'*e"Q"U[gL80#[kXt%0`A_<?Nc2mqU/#0%0<$'E!Pm"Ib%Jj,Q5.*b<UhKg!Ugs30.IH'%g$%#f@cRVUOH,Q4Ab%CPRKNpB/s^TFDDk]S5/,+29o)8\Nf$n4aM=El'->7$VNga%e`g=Y2n$bIF&eH[eK'PPjHAp2*VQcW@_-^3*U4En;(!7>/UQb1;nZ215+0rN8K@0TJ2A"(Vk(_.gh#4\ru!8SEemJ"11=3LbI3X3%VaWGYEUr`'"6'lnh>BtcEjAqn,e+?'Nu)GqpC%g$2;),>?,C/r)j((o*R(lLPG\P*i8th8rseF8?>/lfGliN'Hd%;XCPGH)`8!P>%\i\mdNi*\^58E2!"\Bf>EUUe$h*DXCM;fD]8,*Xscs7&[_P@19'MN@3k/8?`a`S?5"NcGBFqZm@*P_fj*Du'6#=tQ[?MhG&\[:0"%(^4"E/JC9ERf8t8"Kg=YX]*LG!`WhA<i/.1BM8SnZ0EW<D$4%S<`>53mQmpAU.;NM0#,=bBY96IlQ&G-`IQbN[u9K!('B[<9h[tV%hX5j1?2]il0qpUQa;M0&=rpe\gKb$?E$%3l$b\E08"Z'm@//]`iXLt`/D0=W0TXd^H#Zn7#P9%@13\:A_rScq]h7sM3A.R[6*#*u%*cttYTEa-"?)>A!qb>-4Z+A+^1@!d;*HWmR*dkbC9m02o+i'MOI:fc8*J3*,ON&oI%Ue0[*8XV<rhraH(alpC$jUORAd%0/H=[b6%BIUJRneGVlfq^-j1rFUPH?k2!bRrh?$-DUn3lU5b;KcihB,nHa@p0UGp''\i'T9S8:`2V@?T]ODEb8,$/N(OJ4@R`;eic'Wh74+T%"\Irf9i!eY7W<qM@Fm+GP(^l=Ya@krEUL%TidpNP#K)P_:%ntr_Ze_fTrt`5^i\Kq\qnbmD<?S>Ddd"&of7[M]Fl7AA%ZJRTn8="%(WgH:XASGehg3i>3&.>=CpRFWGrPZ^nm(%)grkGAjX8OhG$d-%7&h?QNcM^7KLkd@qrk?9AW>2e6]KciMeMHP@nifO=JMWaNVWDo%W3Hd\d.H%9BWSO:?"5DBV)3@sm)#9THP8a7eKiBu*mV`i_;J39cW0'al:qK;!T/NJr,?A"bqNh?nZ!>I[E54:ca(qh-Z5D[(Lk?+%(CfFX>E0-`i+](AV["dGOL]:?,4S2?\&A4YbZQ*-iRnn]<iFT4=RO`*FM2F0(#3C@2T5dgfP9nS!^-/j7iY0]U;>X(gVs4Qc*K.d%1.J[NN@k\g(Wa1jFL`4W2+qFB_gQ:9cP":(@BR^9d=EM(o[F$[T^.[T?isR1SND")14]]##olQK`F\a'Bo+k*V81:nc"[Y;[NVFf%VH0>1+ajA2HYsA[/$s(_,HosJb7p..qVlk#as#$ok`57CKbSK"K_A=8aQ]/f<GA6f&S!Y^Hn7f3[>);b9,XP^Th976\FPl\C%^9=%@2[9eQ:.atoR%JSRe^+o.@+\T;CeP./n21OS\A9ga5rDs@ThO)XYeJ-4_Do^*-Y:OJR"f'#i?V=eS*a"W]SGR4bONJA1,&CeU.#C%<OdcSc.b!r4F/45U_P$F0Im$e._T)!A<D3&MO'Sr9!BrQI8^KP8e7N<FF=gtc]-:h,3@h1DE4LQ&+b%l80bgtRQ.)"^`oRNa4AVC%ZWCCM2I/I09-L]LL21goqK0=Cfn3W=.C:e#qaW29]W=^\=IU05oq(L!N>,8A_b^M>UkWoDbT`i4r>)N,HP4NYkT6OrHJQI1,A4=m%OSYjo83(1g]jU<Bh6]MKdNc-UpJJUNd$fD%A_)r,7'TWRk_;V[>En8>ms\'las2TS.ujEO640jV)HqeN:encIjH.)`'tR;07TqW4%'HI[<h*;=O+LLgIgFkuG6<_NXMB3Y2NukBbYFB*bcM2]7qrh,G-#%4*4=,om6!cX.E_,e(o>MR&5RO_$BM1X$e"jOgP!n$02\!&`%>B*SD-\mr'*c)Erq5%f=cBE18Y/MZCoXU_Kb9@s\BObHQ.E!F'ICd:%?K*#?U_TqRC'!I&''ZIoc6S<IHiIPp,*+9@l_R(gZC0t`%,.2;_RYiV-eHRY<!,:YFdjE?/8TTo6'XT!YF2*d_^:4&N(*Nk<hNV5SYdnKX0mjl`[;F7>L/VHQau+]+`beVB^7JeA<XNO9/*hp=%e70;3@FDZWq+tMU4PX?/oPFdVF_i!`]uEU3r:^2*AqlBK0=EWi&Z<;g+MGXMp'mhO7\Lum#PZbcW?asui[5XGP4(`5fG:;XpQJ5L%G*feI!42pS-A,GZD-_D:l?K((isOrGnu_=thS*a\nm^0`KV;tL#,^"fb-kdDbFWRu>+]V8Qr5L0\7feu)>I+3dGE:)HgStbQ8S;B%.=J1=c\4a#[5&]7ag]ij_;M>9Mdok;Qqk^eh5E%CfiFEJ\J@plHS8fkS%&Ck7JkQr7)PIGj@m:qF]#j)dHZ'6XZ.ZTSf=Qf>9CM=%<r(>0Of>X$h<*@Ja`Aj0oZQ0HP\gTL4W9T#ST>562!otodh,+M<k^F'oQ]G$YG5uI#KQ>VHRLH")DY!S[VW"a?qkq`X_i6>A"&<r%FL5`MCt_(4$VQK2>GiDX(c4%VAJ/aFB1^LMq/Qi/;gC,W5"$tWs7BL)>%S#M80^"/P6klqQ-teKHKrXVDZoDF_[Lq8<b"n]R*=>K%AU:ED%04`m='eRb!:-.SUgjU<e>@dc^T+Eh5$$u)7]LVTp4@RMLsi6ID$7'N@q8bOSoZQFa.28,`!E[,],>]8:qc^l;Fl@-&)jfb%;4]"be>H70@A`Y/6G&!Er^dkS#]6JWH)*.?=juGSZnTrH/<FIX1"&^S=cCj/^C[`\l?.rFp'_/]$7X%I@/Rc-lWusD*Q%$4Q:C-o%5Kb;%AdHF\4LU7c7K5,65s>RKs&U)6pMF'/J/3"q_C%u,MZ.1KK$XM9'SIISg'XejorTtD]%E6;$=es9<P!^_[cJn64C#0[S=@rn%l01rP$6Wf]Q;DsQ^U^a?_:Hb8^`nq3G\4R.AOP<VQ"?]+ls8%N]Ya6$/agl8=4EO*oeGr#iD7m>8M8Kb)u(V5)u*WS24FSE]k2&3%iN@khJ57Ur2b51;)hnZl^TE*k#!Ik>B9i]&+UFYa&<3T&QnGu"A)c2U0R?j;X4OQS7&Qng@id?L.,p[.kRIe8HP\`Feb.:N'@%bh%d_e;\-$Ln<PrV+G@gXS9N4C5:?)q]N*-*m<TDu0])6#p(%4T3^*0Lf@h;U?fkA_R7cYG0)O]=eC^G;XD]9tk_6enM==nMuI^qW,A%h&#$ZBgn^PIIPQHq&-S<nq5@tP9?Bf/TFN15p$MA&!Gh_66[^AN-lk>LG2A-);s%rgo.UkQm-*SnFSN'Q/]DJJ#Ht5*=?E(#2_ih%>N^C'rL0.,ookDi-@^PK)l>"]'Xb$3T(L1t/EZqprWB!:De%B9\/auV"/5@f%YG=WD=]@hZg#-dl-7V_B1?:`bI/_c,hE.FXF*UO%SnEnS[,I=@PsRW/Ji()?MR9Kg\VIPmcqScjBu1iF)pfR.%:n9uhV4pN3OXjGCsar'^4`eiT2P@lK#Es^0gRLa'C5I7)Qr>8!WK(C%rQDX4^SJ+uY.[&i0cOq3H"isqZ0nM'VRbDKb0C1T6;^5k=Q1K+OE();:b'.@Y`3ouBX?:_H'd3+q/Wf:[F\u3>dN8Xc:R7e2Y:X"%"4>94RTdom)%<mSh(MU<+Abr.HV6:Q>;gFL(XsMD8H.2N26r7s/?,k,[d9/'dQ(j>O];guin+a'#a+,88@&,eYVjlS`6"1^#B]EG%ED,:C,97=HK14ILEQsE$!rQrVUd2Ym1Dp&59Zepf//%L%cKH^hBrAG.AJ)Q1q7;sSTLc2TYDb&'UM*1PTTf&6Q.jXdlu=(;I_,]n%]eR:#q^AECT`!ABX9<,mm9c_!9d/F\g$@gP3HpNWFV$7n.li?6*QMDlaYEPQ3&Z!(b?YuiM<c:>oo):bG?1G9&fnRsG<JO@+ViAH%feNIuUH$&TSs=r`H7&WZ=ik#V*1/.LoiOd+9AK(6cYs,L`iq09l$.#'G;,1nh^V;7C9k4RpWR/:"'J:d@!&Yt-kZX81N>>X+r+=6%TkqZ5*u]rKVU!fgp>gs]QHr15W#R9m.o6rt>L#+^.^@63%e7]+@_ib.9Su=:bRJfn\gYKNP%>*<S[Z7JE\3hc0.+aE!s(""gq0YK%Qcb*FLEpX8QMJ6]!ruea4`4EF!6E)4cb.Bh2>"G_RZ4TqQVT=VY^Et4,B%>!9Iuf+Mg?J@:V7VR;2Fn)mro#d1LtNHT_nYeXLQ>&%50b^?!bG1WA<rr=0!,OiK!2;7?/Ys)@u@lOK%&EP,]->"#usO9L%QnoJQd[&,%S9H*K<[@85`=;/BLL#!k(_,;O2f;=HDB)7[hB)%,&M0taqZn3#.!KZGEt1RZtu[&?C7jmPTM(tq!R!p@&9oG46o'6[(*00m\A5!@8&mrH;IE?fj1e40b!!cNf&g\.9NW-XG>6Lm8/+4%KH(X1dsD\JK[T:h>H;YfI+b]&e)HBFWP*1gXeL%T\hP\5gIaoOgSBNe5@:9Vj9(\4\[4j26dapdW7n*2`Kf=bEpQ-rD7Vhi"/+)c%=#bbu2!`=u+#*bG/O#G+!FtiDZGeCc-`>'I-*]"+XBOMrE?kCiF4R<)cT>fnXWQ$u;;DkV!V#HaI7h0n";Tp\bSLHU<X:7nJ(c7,%eN^Q7You!7b&`*^PD-?R;Rd3*V,n'qi=(s&ZImnV_"mUp"bO&IpQfG]%e+je?qJD6;C@A"rf49D>imn\`1-6Ta6oA%;5f)RaOImG%0^NT1%FhXAd^%12DQ`NOZEcZV@\n`__u]'sMq2FI/K4CY_P/W)m!qV.cAg(K]\O>tEj[s=[Ai0G((GdDbuFQ<Ak7bI!tA8TV^&%M%gWs!/e_CCMqZ;Z[Tkmpi.37.Nk?s4VN0H6YI,:S`-jtsAXBURK?>`g037>(I]"iK#d)*ZYZ8O<UV+ej,jje2'%d<AM$5R"am^^Ks%:Ht%406Rp-JaTe%8f&9dW6OF%RJ$OWAekGh.lB,@h6p513W8RqTD0h)bftETnJ-#o93U(H<!qS(\-54!%YN[f8u_QF7XF*WBSCY3%8A5DsYX4XuIK.rs2gfr/p4hM7K<o=WN"=Vsk@ZTb,VUHeZTT1uEc8I;2hal72^Gc$O%u=4J%9?C7=5WA-K,=CpL4]ZY4u>&(B\V?%&`8M?/:?F%]l4>:XN1'U^//^47m%5b$G>>8?b!hipM.-0Gf)V>gQ?#pi@7`?ZTGgnGTW6'=PsZ)l>gYjM;jYSRCScJEYXKX5h_?]%-s(IoV,o@_!O/8L#q8*J`Dm'ACa<@V5K%BqD+sF.NZF?h[TQ$RmrFb`ABbEU#02bPo`7/G:gOG4[3K5<+)5])V%0unQ4T>lpGM&=%Qr6Nl,3Mh\`nn,:,3a&.MLaHF9;j;].a.c,m^<;75.5b^3NamF=SeHn8V^5D:L6R)@Zf>t#\E7"[.tI<P6iu%IKF=U%<bGjUmESi%L*Wf3BKs_tkp9$Yq6Y[(./B\qMm_#Srr-EbT6eR8lRI>,aX9\pp*J/dbSe"J-g3I+Dtrf>]%natKGE@iT:t"fJe"?Tr.6_H]2-eU%T,.A")7nWOkZ%D^3CC:Q"PqXC_%3-2gO4Y`=N`?X6aupqh=bR!O.E!!I=c?R(VqKEd-X"_\%\"bs7CjuFF2Ui5C\E*@mfgq^L$8X%\&9N?rFrGpY*2)$F`5TD$u+OUm2a\c8BK]NM0*Oqh*71X71cR>\?FQo.oGQecR5.92RVf:f1!0I_C=JCIJ5q39g6\#M8PNgl]-F@%CCqDCZ9rm0ancq5BCooq4tM9!rF\TCSX`VNT28HYD,m_K@/@m)Uc.tLYDalAqOYj[cM;M%TfKZf=]/P7G2!)Nq9;8^LK=@[dMo&`%icM<N:!r]YNRG3peXj'$+RNLO;5-4LWUpF4#*D"6[V+Q+V=:_D^5B1I8hW<np?>K*]kt>:k#]hFq#uQ0Bo&!#VrTel.*-,R[pWA$%&aW[46"K]NjGM/KAg?Q*W/rE#HdRq>*\g[^4_38d^$c;k'G\nod03q/Nf='3$>8[_BHC%DIVG!9!VU<G#sd%sVSs=C(-Lq'QpfRQ%/)@o%psuW$pn2=ikP0XUcG)Wp2(:MR[_C41@h8J<LC<(&FL"8;M/G\0ZKM#6/"!rOB%S=m=M`d<k$@NTlt(C5M%O4?"+]dQ"[N?W%eG`taD"fLeLPuW;PV;(Lc4`!hEbrcoaPe,nY\8e(\P`.`U[Mkln(R#o`8/UFJYVkMihN4mg!V7&<g-en`4j]@)ZV/7`V:t*]0sR[%WcpH!Zc>*SmbTVJ=%,?Dm,`C<H]-F->p\"Ujr1+EW\4TbHPaL.8]r._gN1.78SGiX-`8?INcX4G+cZ+&K*U3*ci*h/:mAia=QS3q%-+DdFafS,CEaVr9S`^cBEMUNVk?AurOZUlkXiHRp-[k^-)(SG<F8T^tn[N_BZP>_XDkAh^jo,!`n^oY$hjba^GjM(@T3!`,f@OA?%q8?KsTAe8ajHrPh=F'(>-f\2&K*HI#7:nQU[7]n8:^:!2Fpr*V:6eWE8PqoG-;.OGaLEmT,NjAAVJo@#ApNFDjI%[gB?M(NJgdu#%_!rDL%.KuW=m\PlnXPLKDYtVkX1WIXpiJq/*^c,B4</O:;W36CR>hlZn/0kl.l-=1hKhU[mZ+o-N:@s23(Kg3g[%hjI6?\c_`<gE%:mKp#LO+*Dhm8eA8[&V43SilE,Sl[5A.\.=P07%+`D>A1[e.Y7)q3u2Tuh0)6PW%D)B-37.,)8:Xe4UD_bfKQ2ZrM0=1>SO<\h8=%H`le`^$FEU&nHrq,:%X1@R/fF'kstjD<iO*Fk$9eqtcPZPpnj,\*(K>000UkX<h_TM#6K/E/3c38']"Dm8/KaftR/Bgh1f/.R+HQ%lU:$iSVMh8hcH<NhgHP`h-.r%qs8U<jfKF.O(s(/4IjV:pb+fA\"/BEh9u%Ko5OS&egjqT8T*?cr6b+FT@agf&R3,iB4&%onog9f%IqJ+-)5Zm#Y!'J6$s>e3:2E1HD_h1M[2'%nmLr\Pj`!D'`dX&b5WB+;o(Lp/M@S7?9u;nEZju!`Hp?GYL>]Q68LV!)5hRtVA5@jE%NRRCld8t-Y7\CliYF:2?WNF9t7cTTf+&&H]cLCogDYs>gKMXQRiCC1T!R;hn+luI>5rbLMl2j9)?\_Jog'b^WQ<iTiU=`>02G.3\%%$,Xup4Uj5G7Mff8:>gaOqXh)G0_Hab"nhmg<I;#'.6[tX[d(<]'Da6Td:En]%J)V[(b`lC?pdQUpe#$6u)$\:8G=oY(7@"Hj\0&%XUAt*)X+R<$PJqf[SCm[9LFYPT]'%TgYE?5l#,7Z4UNR`P*>EF?Zd(N"*[%\i$dCOrKWP]^?R*dWa"o;hEQ9":,9$NntU/%<J@V@%$7GVkp!@[X;)i-<iT_%aag9NQh$=O$i]T6;9AKfbj-81$03"-u$NTlh0:m]lfAJN@?P:7%*I^Fm8I@"'>jgKj-]m[P_4oEBpH+r&%@Enl`8Ycsa4!G0fK=[Mbn==Q^l9(D`n?u[?2pg2)2f4PVq3'=]j6d_C]b!lTf9n#FVgFD?psstF@N'%6;:*rn[3YYP?`=pU=GkS3%1#Vl*2QK8Dhr8ScL[/+5XBdo]jO(P*60WH'QWh;0f>Tc:4&4F203s2L)5KHemWM2earPYPfQ"cgdq7H[SZqEef4C'_n3X`;LU=O>%_J\s%<h_35\oH@s2^DHoEUs04o_i73Uic3]S]?+2M\Ij),(IH>b65(c)5QJEI'p6F7IJsac4bAk7ilBqp=`aph0pFfC%;erhT+g3%KsYBT71//bG8o)Rd]/0&J+gTuZ&'`/pBga-Ahd\PjkMYM*=N.`eIBd;1sdcpRKa_"jdnP`m^(gG,-n4H;G!1@5,5qTF,#gob,h[L%^5P4HYML@'e]k+C4FbK]Z+U).mFKqIn_(*qq;V;&p5V:j@t28'rqQ2I^[ls;IFmQE7F9HN=,'i)g4XN^1o90Np[M7H\m0,CEiBLg%YT5WrB@h<!q`fC6O/lc5kN#)m`k<2e@Qo#Q5$-c3HNmX2*IY(#U68atpKQ:5%]GQG`K!!"He#u=S)-SSZ9Jc_U7E>UEcq0M9s4A:%?q'.r3_q]ips^I>kB<r*1AZH*rlHS>2S%DSoKue$Z6Sg`d\h&\SG'UcgTcc2LIZDq:<Qo"!CkNINt?X#IHt<2U?T8MJ6K6<\7iH+%L"ARAc3&p#lV]`eA=hRh1gQFMaKU`brhJ_h@d1no]%MEeh=On:rC#+WFJ\_u+f$WWXt,fUZB+!OU?T8U1nqBAaCr.;\U!\I4G[[^%@^6mhmBXFn0:K$oQ>TsOaPN]V>,f*W5BbE$FBts%b52DY:"L+Q2e#M6G;NT,/0,tZJO\+2XWO1%"-'24JQ"V&BY(@L``dW]*)5&8%e]p%+G8j8#?o,59:Ull3gKQMjQl/!DBY(?K\uB2@VN.P>_Sq32O/D6#V-DTWN8nfNl,Lc&*+Um3=6s!3]cL!,h%!S#%k*mLCP<Z:%p;!EeVN`V*),3'+npZ,:FBtel@Lf+e9IY_WGI9apT02=7BqBg&h&@%.Ds]<&do\&UqVFEA$c!W!piLpDE-;KS@Lr.s\eq#1gr8.8%eW&N?G-"b(m6$pZ4/B`Z1sJ/MbZJt)J^O=ZcbKH>[@Ui_+Z3*CQ.(2[I5s9_Bb#1rR5/JQ4)k6^%&l]5)V!9WH)DhYh="8d9F7,>%'%)DO_\*Q5Wck[L:8\<N?^\MgA!7;Vm=lqU/9A9fSWRp@^WSBVA#a)L(:r71csqEUp[4ZdRkf1$r0,l%GP_YEOtq7YegO9nk&+TW%2jF9,\SHTOEgt?@GPcRW&?bKb@D0Ju2T+5*`[elK)/!A24c!#>^CIU*ST_91a1;9>k1,bFpaYVSOD^0OhNP-#Xnh*se*qR8d1+k*%p/mu*RL%OdU=+K3lZTcg-Sji[&SAP2$<oU2'>8^;E_'#m>%u0Dhg2kl%cMtK:>N(ce*h)nTJmR-G#7$lGIFC@L70+En`o3m[3;H(%HsGNPE:5hXF"Es?G<^uN*:89B;tb9EO/!SmPIN_LFg<GY]?jPr.^Y^$Y]b<ahKsYM!4)`)B2cg>/5-XqEdp\8/+9XWW>o$,[jTC!%F`IgTEag.YPDZnu$;o,E2XaA<qRc9:-r96e,#d]OgYn]Io"#_*CoYphdoA+"qI.#UldSpmL@ZJT3V%/+m)4.Pc3FS_guViP+A2_/%ZcbUg0(0;<Vn9Ii*Wd3S?TC&M"(J0)L)l<5W*]]Pn^]qn+MUTq%!S^j2dLgmIOj1_a1b8jEctaIDQhjjmOI!dN-sFX0c]B\Z.0*,%cVF!udoOWG?T_1i.<#,=gjb$i:5#%@K(\aNme2am*77Q+VauiQ'954:\A6fgbiT>(Qb<XT5+4$&:L!/\pV6HdT;m]p>WmVQ>3_qW%S$bn]/*U]u)U&fL\Fd--^fp#7@U?S#`ODUIhKVD0G-)?PPpsV<?@EbTL.'d!YI1Sk`A+0tH8`4YqD:K3K=BLd;cBPfT-B*Ujd4qK%flQ.5mVHO@I:5aarT0BFeC8"$Q@gt/%S!UsQ$g*Q$b:9dE'<&X&6"&#`'NcTOa\H"SMXCi5?T"eE?.er]I1]Q=3<V7(tU-@&[&6H%Z.g,IX,fJ=G+(!62L/TJa1)V+D<r]/<R,YSSUHuZ1RiuOH.!Gd]&u\2e!>?NR(WM8kmjNE@i^\X&2C=>_[cFprmsmeP0?E?;!H'c%T?h3]dR.-o]d%/r^:f$Wo_g9@TC1dm^7SbY[J'A_bSSTZ:ER`qe_6iXEXL3GkDu,O?i2M3=]=F0%[OXeH2Q.SntI)%_fk><n[fl8%8UN3KmIs0ek?b6MIAkl0)K'a^FC@`Jh/1nf0?8e*]pS<9)b9i$LYfQ2j[l/V)@jYHp36<2qmb"[$1W!!\'&uRLGki?1h.NeGjaUE%EFF+kcdS4&Sc1`(#]G+O+&22c2/nH_a8S6:3A05D**`9Dp@.abLVE&"-qDk["KSk7n!\l"hu.Y5lpHj3IOmSu2n`l!Tg]+Yi4Ii,%0smr?R]H@2r`"Y\IXaGumhV5'VVB-LVs3a8m0cF]pt_;*00_!&q@hQ(,A_"@FK+r$;aXXL,k:-mh2^6-W1q*>[sI5UerW%.7!H5'%.V>;skqY(ZqPR#helft.g+$Gk<fF!e?"2n5+54(Pf;c*G0'=0<Z%I\n[$i8/V`UFZBUt`V'BeW@NjTh'N_8&sCXn(<Ya(cRdWVmf%cCLC$Iae/e+N/,UbN9N-2\9IfKBhiQd^t8ki:/OdZ#+]KXq'a0FSTW._"FAT2g,J.St+ITWL:V,jo`sb5<1M>s0;kMm.FX5[jK^U%H?&mkm+)eTHZTU_Fba%fR*0)6rRd;iTD,,4Wb\D:s8CY.`n_Xcl?-m.$acEV$?/d4BF!uuR[A_"fncdL0<G^Ibd8\,RgPCT\`,N%%>c'TbePdX8X.t`j+-;GoEA1N2=jN.j]CB3K]2JiKFJZi-X3452Zl:j2Xc,:P]Y2^XF^[he5AbLH)IK=bWZ2V)oC9&nEpnQiU\Vt(%&UlR&Gq8J7[Q;&-d>?a5rA<q?Rt;S$*7OuFmgogc0bEjLcLLd1LN7;$&4;_*j&:YPNX=4'@P\E_E8Ob8XDGPQ&B.+i3ki>\DE<,"%\UO;@Ao+AISmBUn%[P;o]OXL=K:0!hYo%Jk[(f.Ej8$SI;1R+&Z[?*Q*!J<=%,b)f29'bnF[a!@54Y;>!-b>:hJ3g5o=Q)Q!!b$Y%mktMlg).VZV>Wd_:)a;FYcfIjC$1[uj?6!6:)a9p/0jU9$?-'Q37dpa3=7I$B(W4&.*=JR"lQ"%au?hoGDOu,F&BXPal4Bmb1EVH%47Jtl44SU@R%etuU&E]S6.,>?Mt2kX_B!;e^<W+."#%f@+S@7//BTo9Dg^!+-Lf;9RN6H:mCTOYjJmY6&BT'&\Y42LlSj60W;Y6=%CL?H/E^PhglShrs1s@?9[BAEJWd]<;%Fn>-DmHrj>^YXNlhX>Yl8Qs_T#tVa@TC1g/BrO?laPbBY(Q4Eb`Q-8'SnTKWo*70=,sKM%[gTn253htRY5+=4)0T<;Dtb<QH`?>_'oof10ALI2qX(YR&#QMejGRna#LhD6FoA1n8iqR7IWbQhG?)Cd4o\jSqX&`mmA6sm=#f2*%`4QW3opaa[cLpu+>KXCWa*/);r?_c`2\rHBf(GO!k16)WB(pHH-;/*K^=IY3ldpQZl`,Cqa1Y5Lf5L4Z[[+l1eb,EuE4mqLVX1Ff%heo1:%P$mT\>nFghK"s*rUt=+Vm#DF0hcVaLe-?'5EiEum%PQY!S"C.gh0p-[[/VQ<?igWZ``3HWd]!^pKuNjZE@SDl!WfQNSEet%eSep8cn=V[9t!!)in,=;qX):\@./7:8e:47Wd];ua1%PtRZm%,mGf$!^#0Ii1ODJff5H9?X1_jeZh@>Ip"NbAS\<VIRk.Ap#d_jg%ISK`@B7NQ&]hYVkm],S3RE]/ib6+^/2n>sG_:7N".11:QH@5V=B!q=,p/fkLm\MuPG?6t0*Hh=X$\n-"NUNRDhrJ0iWL(!l\pe.,%mTe:\*00EpY2A<?IYHm3?Zl;oMs]?dZMV4^PH4QI6Z4tEA(,]im^'''=3T.gR)H\hp$3Sq,CT$FD1:3MI\Vj1=k.G,XQV;&qK4?*%!<ij(A%h3NWSFb]hrK=?+b"7RFoAm\d9?557#g1YlMBlf?$d-*r?`I"b.Kn7WU&0+cd&P>j8:KQ>M!fAN[V90'8sSbVBB1mg:QlP%h/[HRO,j>oLK(mc6acf-P%o2mj1XY.#6Pc$L:i2k9-)S*9-4D!4]o/4LKK'e:Vh'5/M)h9q:*^RO=Z:A\!q+)aGKB;+'j;:KP:*D%kF]EB>lXBVK"63t_=K%PN\#$;GN@gf[;k:"VgH0!0k]tRZ?#BnfrHV>078=8s+?sD4K5L`qUqm.lM>)"nbi2WFlU^?];csV5#_Dm%:Z&*X:4MZ1Hfn.MFmnFgX6RN.YMZ@8-b'+T&,Z3Ap$hQKa46qXYHOqg[m0elSq$&h<\JBnDQ>ushd'-0S:@f&prZrF:O`+cja$Xl%p!\b%?bW02p?_+McWC.sZi0MZ7s;WDFQ[*mH/t:s=-lTCp$1W#SRW2&hS4;_qod^5$0,@kHLd,DB@G9*5J:3*\\E.IjMg$%DhaN(%&9)(BjNYs,YHPtFM8*^q<]1N_[X.#Xqr_`f\)74+QeD=t@p_]l0#.Eg*Ei4%IN'[9g&K2p"BWm@?Th&k=P%*RFO1Df:k/C`lF4lR%\oR4uUUKI97C@.8d>#5Pm*hLY?dkdZ*(ejPUq5[b.i6c;\JjR,M+P@/rNEU^?[r)t%^]_5%(i$mp@qn*n9M"[XKiQ`CKp\dJGdhQ%';qI@Hq/%ta&5+mbV,"u+$$b*l6nu8J&4G5:f?o1Ok$iQ0/.5Z;/>cI'[j':\/+I-eDBGZh_$9_XXdVJqHpH(r92OdQ"t#u^2KOQ%H0Z5;TNf0L]NfpZ1S*bX*ZW4?+:JS3IiMZ-am#Q"r@>UbAL-t.:H"hAS`/SJpQ*Z*TrcPadh;CJ2te,:4d3X`pNlVgCDs@X>^uPD%-:[U=^%Cgceb/[?f!JVmkY>u"2nrb95;0L`"P6_'HZf-hs2Z#SBr-',1]<Rtbo^!05J2fAbob[&4f=e3h3Ih^[rjbabUG,l<,4EF%S8P>&oX[5QIsto+9_!m>a4DuoJ%4#rE9(`%]AH[D=j)JkIsn4Zgsu>Q?@$RD^>?DJH=<f;i[%rg7,?es5#'(1o."Yt!+<[(8T]>t%J"`Li?:/J<1[HJ\?QX6rVsX"hlPk8#B%MLBpVBb^q^X05O.AMTmrE5u*miY>CJXf-bsVN0TCN63Ed50AD=,mL'5-3>T7!k_rjr!-%]b`GIhg#''WApoc7u]BWFu>8!Hi7>ujSmBFMasu$r@S&VY`sU;dZ'70-TCL$]Ce'P[aJACf(EXcDq]n(b9((4]Dgs1h\H+NQ"s_(%'g:Y_Po&f[m8Zj,)4K'b9j]!DA]m/`I]W2-riKc.oM!FK^\7MX\QIZCZrXA;g%s0%a'Ic&rG\*M>\++u^-5lHD*L-]oqrV;=T-ji%MY/XbnU,RsMa+j6@UI9Wr8X-YQh%b9fF!#TfW3,kF.4hKs0_i=fXQA&@lfn_(r:49;/,Sfm6@=fW"fJNmG$Z-o?]FAX*f8foF66E%'Rb;(lVDFnq`=k:]C^R0rc4DG0?<+f4kr$1I.:Hh\9de6NB_kpWq`U&-XM7]lDGROT%<1PaCk%J3`[pEK:E!;jdl'6$YT<K95F6c%\@MP'do-C6-OD`HTB.=%2ijJ3^3%*l2iec&nd3-,=gAE2:,+0FTt,3$O'E-&pHIc4]_WQgS52[r]&PJIVZ:im^XZO%BF.2uc+c/<%(mAkj9:5=c:B$6gR@EipP>=@6IF=XuI,m:@4<X5(Ms\GoT>.f-rpdIhkTSfT3P3.P%cQ(5T=T/;"KB084LFt[dfXng,W*%KQ^\/,%Sr^\+$S)DJe^7TC-!jj>4adYgieOQVO)AmCW64T"1N@[0iQ_$[5$WA;iqSM>bLdcK@-Jm&XJBDCD`g"EB[ttqVRF7^je-P)F-s4>%Hh-jln]P_"IQIL#;(oDDi7N(,ff'rh?3pC?AUA(hYM^6fe1#5lPMsl3hGhP!^[T2<hYi2/f"VZ)DZF]b^9/6!e;6-KkCVT%g6$<O%^,@"e)6C\+m*4c64a6M?Q?p0MI>tbW:T$hiRQ8O^X!6:Sk@m[k:Me3[8:H/eX2hEo*P=Be<4<cO>[8kkcl8$akXHu7RZBW!o+fdL%?@.1l_0'@@Z-b2p5-JZ2s/p'3^-I"X]tIm9T0N>\Dckk:mEFb&Q:r79gI^)bF'Ek=g;_;\pqpTMVFE@9#__^U&O4:#U'Iu!]OELW%rh+U#;#\B'WCtQ$%e04A=k:C.gE1II#4l-0>TL)%[sq7j[l9?TfCrf043)A'@ul[u>.ZE_'#%V!nr2b28M]iu*>Ncc7T7GnqK"Fr%06dihX;\#XhFtf8EY<%JjWo4ET4M$;s)H^-;m:BCa<1'h\@$Je39A7K_0\eOUWJ^=l0O1BScnE!_>TcBdu/u>V7ZQi:GE/\`I`=6%pET&h39%Y94#+]<^eSL&4PndnQ[`m"iTBagdD$aPPL*MS]+;]D0%[FS<d/C+hIDb\+IkW$GHmLJ#\FosjGBYaBaeWMSXH4)/A64N%Z//^@heP>6]2kQH]r_L+ps[^[C!NYU-M#8aX=p\tFtr)XjtnLZQ>131&&-&ao=q_>fOl:K._GJgY'(dP3L'tF_kU<sIS4_u?]X'R%H$,rT2KS`J(]/FH],OiO?I$=?pe/*2>B7JbqdV%:r]^(Dp]0]"O7cdsJ,B/_A[UDYG4NsXqqYasH[5A4>B\A#3R`.Jm'4Bp.(^=A%N>HSY;`VG0cFgcn[\)*s2u6%"O)(>lJXMnX`Ih)>],sCcMs206H=urZ)T6$dG$Q:"92fc/)kYIEF^s$g^;8FhlSWR_DQ'ga+a^6U%p_l(Y?ghV9oTYi3m[>/6j=_>$FOS3'pT=2JHngB-0:$dk"8G?W1_[(MXfUl-%%e-L]<Bb0F$-Vn%k[IDeI0']R%&s,d$q8rgrOh)%ibpI*\l=-lH2DXXosY0-#$1cKdq;_i#'9TbmqhfBeX\5*L9p'dYEpkK.)4Wo\6+4YXad<404t%Eh94p;h`SVNIf9'$.LRtGc0J<P%l.0%5<_<>2?+[K7o's-VYAX!aTDo&ED67?i:MH48g+dg/Dqr*Lp?D6'07$Etg^LsS>^uG7Ve;Ffn,DW[?$BBIj+X<mG#iQS4-+/c%BrB5pSnT9"=lWW#5OEO3MEC5KAuoF`%Ud:[T\Sj+2ARgO8A;2@d85CPJY4*>2,8MIe;K&l)I<;j2"_5Le*?5mUT#'#dPSQ3rFkIb%gG=hlIQs9INo-I$=2,hO^"ALFeu\=;;a98'3`]=s+&.0W)rEq_^E605Ao'M6rI-Tr*P1bq]))A=lKLd0;HLUT9g-ccFS/K+$u#G(%SJ83okpu!DT:?fVmX30`q"Va!NDqRFd_m-mXh?rFkCafYFfP0nc^=0ljR_qQ2'4[DQ<Au58)Q/:Sm<KDqQGg/</p.(>!,ac=7AjJ%?tk\8Os)YE(%`F:c!"enZYh8dFD.3A:=Odgq%P@G+U.km^m1Q=DUR,G/aKV)6L5"p26(W.bL6]_C>eA-j^8#r<V+PJJ3B(_6_b&S%h,j^IikJjB$Vr`/1f;?3cH(f1;aig-W8pN(!:0Apff-2#5a^G(\(9jEGB"e[U_dOBo]"T\miOL'h#?mDh>?TY1CN@]eumfVqSDm[%:E*Y!2t(\ahf%+1^%oCM\c$C8m,H`aHgA.Y-%Be'c)8%?M]C76s+h+hSB6E.qq@(:eXWt4mXMipm9eD'%l]R*^$t=@^XSI*_j6gV%TC;dh9+Gf#QtM_H@J\Z>1M5\(O]+3RT#'#+U.aS#Is(\1L;'qlQEJo-8!&`(9@,UNTDrV1E6.N6(7)rNA_GqQ!!CYTfT+6!=k_@i%@q>?'Fe^"qkG;V5R_gGJFs&54?8?_N0eBGV^\2bZoC94uDnfXdIt$GGj7)C2gS:+e^7G;go%M^)k;K>M+7<B`FP4AfpU%\`n]&V)%O+/Mej2gO$W8d,qG\W.h!qaWj#R/T/KdSP=%Jn7kH[dncjq$/W+*eNjWEBE`>ld`:doATEF=?HNq@jl>(kM2k+&B5Z.W7t0iJcEm%Y!.;(=.ipheI=Ig)EX<9Du>fK^22(l-hAI^^g7HJ`?.:I^MEg&FRi2uTqeM"e-Dn?_u8nhndk1o_na)^7ApZ8?4$JUn[!96`.$7,%][D4Z6rqP!D](?%H9@\#J2=rf&pGZ8#B>]P>@[7I,Vr-KDn0'b`OK,VYREHtIT[;.--8eJc24R'om5ln\RrJ2^&##.mduc+DuS;%%p@GC2pY$)0fY5oAI9;g?I@dW/A32H)CBrGNDuC(2Jb7jf*8eF!r+UII=3eMJa5:6RqXtEgrP!1DYBg-G`T<&[:L;\.YAhI=?b7#A%Xn$.j-dZ,qD&qX6UU>F&5>n#gml;p^O*#em4^o5::\\Ii:JSL2IVoOR:JZ%m0Al995AceTVlKQgbLJP$Ql#5WnN=4u5l\@fiHWU(%r8m6gH(%/([<t(coC:\coeY,R*Gb?;pe#86Pd>kK0)mKk`W'J@bNtlp2gMTTW'.D5)jC,grd"&?B#!N?q..Y*rUS6bk1\50frrHf%gVt<GT<)C(8]r%lf7/(5C//?`X3K7/"*S@]0b6J(a^;&+8"-JS<j"AiMR>B.C!=4(:S'`>aggYtY5\B]d.6h:Q--`12/[lW7">!n%-^+;ognm;@\?o*R^\a=ms'mu@rdB0pheEHcE,+I/T=-Led<Ob\^H25?1*<n"-P-6s`pR8q:DKU)_iA9n3h`D>/uPmXpcO4qpDio:%K?i@3mrNc>F2gRo:-?^fLL4dc0V0)Up:hZ=IFdX[ql^g&IihsEr!<Y@ecDp(*N6P!J1Ade]*l%>rSg;iF$<)LRZB>DZ$Q?!T+)ho%oBm.q]?rjs1Y5["XUqCNH):06aB[M[NE+qDKIsmb?`X!s?W@<Vd/S/qWTdWe83gar3og`2keV\AoP<Q*3"ir)F51#cJiN2<@9qYH%fD\rfm(I0*W*^JtZMU,q\,98GftXVI>3R]r.lt35qjCci1h"qh`<S%l?Z3RX*d"n**%ThOSsl:+g^2L'o=(oIq'3*TaBa08ki1`]%S#lnuoBW^.KiLA/X$N.A>50m4=7E3@d+0*RXim,Z&0XfrN@Z$7f_241Wf&JKn]FfH@YQQkP<U-GPF&ub:F>iDE5d@`>)3Cl$sY<'%8md,Z:P%!6'Kl8%?e84q<gRFhjn5Ni?dt:d)lPI]L\lG>=(#+$!dG&bRbYM%=^8b#LZU?@ceBnAVbEP4hTGiQ,qa]1.=g)i:VHmQ%f_ncE-_1E9RZQKK2st]>9$+t5#'Tao[Hia8CRa1)#4"&"`Ts`)I#UA*&,C)')4Q(4mef98s"_Qb*_:^%n]o<4a(!c%]X.FAbPd+T%b47Db+"t48[/TftJM',,fm+!s;cs?M>eK[iB\gXkXgSU[o9UhCb""Vj^"L.rMM3-'Lgq_)a+!d8^$U7:Z-@4aF7Hj3n]8H=fYd*)%n$+74p&i"X_<Wa[*RMD,bf%t%YOUd^Vm>,g+272^24hH#Ip<eUVX*77htn8nQ\F)YSBU5!j2mpa-beD7ip&Jm2*UAJ@mAXY(%].G%j3-rFkW0T%p;`0PqpGA%iT[UW45\-AlgJ[,7nu8Go3U+hldo(m!R6Td1lBnSJ+#3-4,i.E@S70)jg6i6qSUq`U?1_.SK/k$hF"LH%*^8MQI.F(]q>0uNo';cT7gHc"3**ZMh\?#J7+A5+)"Fl7efrVI#tiSDOk$L.glr#gPEQHG$VL^<N&95'$&$uK0N'D$X1,!%SZVp2%p2o7CJ,R@>oCX1XT.,_$cV(UlJ2CQsYV,WL+_D8]d'KNK5+/3]riqi#?^/k`iOYR\%dk,>>Eg$bDCaor<jE=Coq?<KCj4H3fPm8'%Cj0d![PIFJdohF<e*fjJd`DlXkuc`OWusK;qWBHE5*g*RV>K#\XI23->L)Nq-b"=H=%YRAPM<c6REC9%*a6\cakaA-rh-mUCQB!*%gLGJIiU$E+#:IgqZ2SD6q=BmK=103-+nY'+dtBE\J!]%TDA7QoD6(<#fCsFf9O[B(S)3JCU7+S@Tk4&llKCSiJ'sS=@m(HoQClm#%d%ih`n.>S`QhL)60=FS0dX?Ae6P:0j)!P(j:mTY[0)jgp.En6b?7d_YIsU8rc(o:7jgDeo@,pBeD95<c,l_CJEgr)nJ%j]thk$sT%$B`>Vjg9EHrqfJAnu3K#[s+-PX>h1<9mF6loAd6./Ub=IY]T^=V8oaI@m9X?-GN,_O$3#^klbc[lDW]Yg#'Jd:`KjdV]X^-G-DHU%gPpZ$pY*G%PBWcDgq@l-K"H3(+.SuE]^l(T/t=/&]VY;Ele?>N1ZlR&&lJ(6If'*^5O^>0DSCJ4h1,+dbqBHN;?!?S5PR0<MqXsq%j#qh\T_;_GS@X#XrT>,DDa4$ig@A^&HXZ1#g6F>KY.]>VmJWsM='ts?GS[*q^[rW']!cj,ET$$C(/N>Fe4XOAIpId4od,Uhjap[K%6N;K35;\$DTBXhl"k?Q*>I0.c28M?Qi3eO]?*B.%7Elp5G83;p'MMbZr+\OZ2k^0L9j`@D%t>2UIhoFqr+5EOF1(cYcapaHQ0ro4%h;W1BQeP]*DaqJ7gTR'\[_Em_/jKBfN\`tnDI%Ug?Zsc5g2Os'n#(&?s.<@7hnNH'>^N^R*X:hThnHb\I^aReebc[cmr#l8p1jK\%a%cF*l210YqSW8]J#7-VHCqeAqPQ"$RpVtnQF;*ZmHUTF+%LhWn^Es<s7?6UVYj+>Y2.o]eaYH`na<Hen%X?8He.Up4Eg:JY2Ffj%-['Lsf(QS8?ej@as6]ccO2$*mp%HS0m;MQ"YJt^0F7]@B5JQT+^k:+>G;D1(?]Wq.bRV'>4&*_ipM[hF\XU&_qcN+]ZrO^UAH$Ss%ljM8;HNMI:02LYQ0j#ZuIaX9!B4R2jpYZ"Cc$OrS_U._`qXSCeCOWaDVVQ/m1qi^"qsDGK0>G6Tg?e7@5h#^4JT_*@#56Tt*MD6j%lKS>(OT+t(T<>BT^GcnO2o"/dj1f5Wf.,2J!SD67M!#:K</qPS`T/Qp4CPtopg>SLc)qW7`E6WW$&%ff(LR(,=&&_eMdI!EQ_0=+%pc3<nB7S`^1C*=d.`Y?)*4Z#aJGX9%7\CuNi1:B9GbCd30iYs1&>B=3+/ACcS^A,2MdJK<&3O-BeV`&nN[=O$q21iK,oRGCg/*S'%P%\^Y<L$^oQIoA[]uEq4L-Ab(#`UF"@a@&I(Y9J)1-OZS"^ffFlWKM>5^1J*JXT=[H6D2CWfO;QY`A7\`1UR8>C$j'&01@8Yhr/k%ReOGj`1p!5]ujQ@S`r/0/Ps2.-:aPuEfBt*k:QF3<BY,^Ag6%:,[#YbkVf`6,\(::Gp[ir6q%YW+,&fmXa?>-UWAKO52]GK[QUDM%C*b(KRdkX'88FSdmPJX=:(uJ5TJ<R';>_P_Nm[cD>*qQJ"Nc>rX:d-4+)%8lNF?umRV0Q=]nhMMFgRf:Gta$r0Hd5QhEd(>d*H0q%l#9tX+tI+,N9TTLcr1oI74F\lo`_*?=r1qXl=f%Lp6Z5^KiBeOoP@JhS7&;YLrR#=j8pY'NLl%EF?9)2AMFe.U0BP7.>g$Hp>!.b%]p&S%dlp_&'os5X'6ug'Kqb3.7"9E&"R$#'`e1[WX-R(M2DUlA1`GWZ;:@:%+je[imHoul[YCZe8I8[+j*FlVT(C$]=:(,P$oD-A%=4,&g',(7$<]nTg!F_K5;'DU8@]#?#G,-nc.=js07.Yp@q21J=KB@/I0clCt@$:(Dl48psm>eXt9qgTM\):P*CLR+>5]@mbeFTQS%@q]Q4\MQkK]a@k.1u1eolbuC^nC734V3Ou(;d+:.\=LGM-e]3eddBBhRa+bc3!^Pbi8N&kdg!j\dr`71a!B%(p6*;2qP;Ia00u>W%>g^84U@$>_22bQ:qP+d'W-#GGK-tWf9[^:lFPu*pqC;d2Bf@Ll]93(64<KU[ao/C$@$J$LBbMH`QM,9lA&.TuHO2+U&o">MH_P.`%U14dX*$f:9DNAX,n3RM<SXZkPq65'*L;?d:TI\acF@J*(+)_uIA']HbS:Pi'A!P#Yf5q@#$2eJF.m[QpOI1pFrN74;60QI;?<h60%')%3XM$OGbL#H$(pg>9aUQTF%imIQYdOA!n-TOqq$F9C`D@p\.)K?Hj"HhON^VkdR`XGN/CdR7T)0;Za,4/!nJi'r&iB\LE`:+j"%</[Z?(EYkF3;oDDR;30[MZb6Uco#Jf/uD/KFg,u#!bN(c`Dq#S>@P>md^^QDACtgiG7rZm"@@cMOT?33X^^9/Qc'9P)pnX`24m`>%(B(e\AP+B3jkf(Ae@YQ4jc*p[jC>u9i%h/-ShF3*5EgbPL#t6O";t4d\=`$<7JS5@,oFA:$(XfM;p[6m*ke8bK*,fNLfIK^U]`"f%`)mTJ-'8C%=#<\o5p)jk-]NA+==)9`OC5.Fj+t[%idHZW#\/\PF./58dFs-Z%tYaZ0pEGP:)2TtPs^nr$g?#M`WEc_MF*8`3,o#`%X>u&2M&Dsj/i#/48(/SY8!/8bE/?slP'42\Zr2qX[&S5H)(I]0lO13M@nOsh;%%tJhWT%fG\4tZEP^'PFLZo+qWVFNc4CJlG)8`+%-O?%oL]j#g/FB7kGZ,2M6=[HLC*Q=$ohkDtfJYd@_=O8:git?o(#=gr)-@-kg[V=PY_MsB3m)aB;Fb'b*BZBjJn$W!(1`3B[DISX%>W*XR9qrrQ9>H\B'g>QVDBLI&!Q:d09T4'.,i8M4X@*>E9EL3HKh+uK^d1bCSfS)`Yfph>%\Q0+[,<'Ll&uX0_D,2#0B1nDH1VU@%*R9nG4-0FS>_TM;6s)^geVk,1'W^A8M*"m5ilYf#M*W@u*Io08$AjW3FtqtlTXi[*O!LDR4eKN2'p#.`N<_nm8)=MM)u4)bi'/DD%X/GibfJ6`B,ORdB!]I_5crpu.:)h^Q@q`b+N,9<bZndmT*S_*9M;X_dOI;`$2eS)b*W`%HMZ/n$#nb/fRunT'&8]8Z)4roR0UE73%k;)4eQj";OcfiUL)86s'q@P48q8AUi/\cCX38E#Ng$"*/,f\T^0*t(#A9kU@8CY+6+n=-*JN,b28BEhd+r*iiAfZi"_K:#VPt[t5%VZPar%1S@@"HX"JFtU*d*Ai^.,egdq+pl0GOCO?=MV7e2WP_]P*%3g41nhj4@_$Kg.qTVKNME<29N7>H@H'Je<EYFfkd=lkDIRn,%D@eYP7"JI&0^!\c_"S[s>'abCaKYV6oJ+5RFY'St5fCFBFCU-Y8cTPd]_$G9$\E_q=<&tq$4nBONK(9f!h3HinjC.\9lo9KPV7Eg%^%oN(&2E7_B6G*>#$hc'P<RC=,t*][)0O[)_)'RC&"N7H*!jW@(CY-f%&5Y%`.Tn9N4ok['*8u.J1PX/`CD=AgCoK2Cb=JI(adNV%0U`QM_S*rVVhLAm!@V7C-&krV(6-WqmQ0.;SM\EJ1^=H@&8mk)6Oe(#)Hn9E8W&YT"/YLG/fMpM[#.6Z\6!pY&D&1kTP67b/I0p>%Ot)*#.M5EM/Y)BiLi?PJ_C6RfOh%LRD9)Ooj!#^)@GZPg+dQu%`t`b44&&_+AQAdlF"THG%P%uhh*VFKETgiY,8.g'SHZ5c+[uAB%@+!oP"%lNfpj&;4(LkY84!B;+B97fTm;([T1:;'e!a[*VAD&/,=gfGe/'A\j?C!0FlTl1L0Pbou+H7>&`p"`fGmd;]&C=9pS9S5&%bSLi67.<WI4PDUh9B$g'hZ1$gB`,NT["iU;>Wp"N,.5BYbj3<B^rIA"aYHPA`l-?<cpKY96Xk5".(H`/Ok,aU1,5&28`1R<kHZWR%ETqu_8W%X)i;958=f95mn0Nu3YYgejKdd^66QcRWOM&;0lV^WU9ArU`\s-$,;YVXO3#bDGHkm,4iJq2tc1[\G*QtH"&S3GS=W/K%%7]5<l-J0.$!7=1?I*cD,B6s^$?t>d>Ka'r2Uh_#L"bp@n0o2_LXm$V@j[+lp.Y0IR_2)X\g/L@';;q?VeC&/Y!>31<=u-?U"$E@m%$'HX$mXmVqj/e%=,Y\&lGlf4(e4=bVGkHO;HsiZ_M*lq8FNVsc`B&hE6`cIB$q?+u(#pS\6B[]2)V%Y=\m"muL?FdR*?!CHLP'%Q%A2&Oo_0Z:El",*bkguE6$5tr1I\a.Z3oGH%/>mbM/AsdiP+;%$[&q-5iPKS81cAYW40,&;iU2NPAsq8&-T+$>+V586,JpE<a^ddZ%*1Uto"ND3NSZ!N26,j>@8Z<j+$_jR>)1&V1;NDt:bsdVkdMQH@*#C3/]H0EKkZp.rP&=s2J7bL=@TEVQ7?\ZV9Mf!F\$(SHEA^"G%&KE?Vfh$!5Qsr6?M+)Ki_\(Y!,XqbQZf=<lRSU=fl`p_]fG.7SGH;!!c_)CPH#qVK_2_Js::rZ%"BWH\&ap%NhCA#SU_Q"jMR=Fg%R*0(7M@P5JG(B:<NI9LW`:c]`Jk/'+ak'c"*>2P7gf4+%B\jT/8&m""?m%N]6O4T$<+K8grA9C::%n^)$oOneWD'AG2%?*AON'#3%>'-Q-ILKWn1Fe&m"Efu=V'!r2bm&6l8sUMZ9Fn\3'&K34Eh5(MOBB>8_,"iTR;"b1%ETMbkcg;spRGlu1U`[,Bqjf!=jJH>%:4fr%OnFOWX2mA_%[+k->_RAQ:uWP6ObH79i1*%?d.fAc'#;KUHl,s8R"5pA/3f_KZFjci?/eGR+*:_*<AlhRB"e!%e(/.Kf+u-<0XJ:^%l"t.*q$pC<YZ7q<aMU#07foWF%j$(V9f!OO4#,!q@Z:mT#eHF4R\?/@Ek!SWZOg>8M!!XR`.utm1!J!VUpcPYK1^tkh@P5G1bUR.%86/$:dK3C_EqA:6$Q5-hLdc*80[B1,h*iladqPYbm0AL#GtuR@F;h9a:$Kd*q@ku%-TjQA@MU/)TZunX2_H0$8L0&+.N).]7\.K+%3RBGKKi8V>Q\+rVDGG/8:dai+O@[Zc$i5"Oo()u1=RK3Hd_NG?W3lFh"0/+a_U!P,(e]=W/n35`_u%9J5pEg"-hnQ%7F[uFTpFlL%djEYh,`;Q9@]q=]qk,PcS[E(oS&':]Mrkc`WZOSY)WNHN2f]-8(Rtk59oKEo+:tk'Vdk9mXp<0-acDjXNf))"&5fj^?qI>N'dm\;%$nu3G0j?mRXB"EDK,=s3o.*gPStEq3JKnVkSC8Z`,jR3(BlC?&6A+BTUqpud:E`CfMgR5cGHOIRLb)S+YYO\po7bKa#IG_-$R".G%#S'kAB$l<-<35J*$Ao`HdqOUc_KBFq'Lb-spYbLMSd!2B!I*3X959b].k"N$'.#;;"(#+RVFmqdd*o;:&P=[>=a.G22,qe-h4k`4%)1!*O.gEopPn1H":l@BnqgHG@$eVqIB6L9V6c4L',RH!!;F+s4Os;4^<f_Lh**G93SYT#+9gfOJ?tl1W/#m9#89=u4ZZ)%GA'mAN%=XY"1&r%U2e]XT4*2VF'&dVcEOM6>,EBlY6D#,=[5so2F-*O%6A0ZH*7Ma'pM=iXVM/lD@D+L=a77&)[#`l??<Q_L32[h?&4eMI0%97P6Fnctnr2DQUq@XaRl)&`4j/'$e;/!tF2/VoJgA!"uLmU6,#g1XN77(U?nZ,m%ih/'`k^0+kTd=G('$1KbqZ)0l?c;HOeAVfh"%!%Q$mk&JT9\`;LWH$_g`.XVPYMQP$CVI0ilH#m#&`._qL$$&;=i"Br]iY&?<LVeo=LT_jB-I)o<[>^I_OogjUFLt#Ii$iX)30"L&%2'YM\3mgS](*?p8Zpkh2!l"s$5$JS^E,IM?-F&f)!$/q@5_81*2F2,0RfkN_(%Ue?=V8J?JW9HCG[]LGP/)DbJpBe_=qhRB@eBf@%rP5-Y(c65=+;h'JYWW,0j/$m;N?2P:+4frG]pSQJ)g)N\-tA#bfh>lF7(]PK16"na!%X9jW4qP$(\Zn3Fjm!UMk^6)b,o+b#keqV%"rF6#1kQ]c3q>()@e=66PZZS2'4g2LYU3>\<cV1i_u^lG*>Z=n!H@2:3Ml=Hmqo]^X3I))_<Y.]+tu&Tobj\'cI3Nn)>(*-EHBGb%1fj@m4\ZHbXW@W/1=(^XY'E7IpmH%))E7bV'-s6aCpL^8JN!n6;ralYl-SH?Oc3H#&nBMQ76\CAYtd3TL$+)f(I57N#Y/7.Xb5G)%WdIM)G)R`,Gk-/H:":fm-k.-6(uDLi>[\,TNhIR1;jI"n&IJSo5<9?$ej<,eOZIciL"J)&YTgCl2F6)^m7GOE)R8np$&:MjL_A=D%&snjni!ZZSUF\:cirNYY@5SR37ocC=+,>Q0f7@J2-mio#UFOT5)E,Fsg2Jo+pkIN[ChM).!@2n9IP2/B"+(suk8PVg"IQ"s.d>Wt%-k$aU"ZXs"(n<i=EDa#k\BhfRn6XhQI3X<"d.Ih"^m?ClM-eEq0^VAL!"KjI7BJ7)cA(SXZP'Xk5"`pIp2/3/YhVa!R?W^Y,]*1!%?n%Hr$%Oht\mQ(([Aeb6O;l.V.@[QSCcODY<$LWc1mhb)1Q?TT,slVW%I1Tn,uOo/KM=^Rkadoq(BUM:`)K,e^G(0M-GjRu,.+fs%6<TdR6s=rR?YI%hTJ/d91WL:%DM1/GM=1])NXX\4@JL8%#72>P@NCG<@rGE:>-[_('35a2S\\9*m.q=Q-f\tGHf`pi)B5/$A9#M%%";lQM@a(Y69i\L31qS]nRU&aWKu=-H$I=`TX`lA!Y(C:b]9dc]R6+ms*@RPlYh!B,$6:gG=;GB@@D(^c*fZHO9jM*,Cnh[D1XELE%RpS^\E^7j75eO\UCrD=XR_q*6:3(/f(G*URd`F4QS.).>OZP=1j.u7W^@1<<oqEsJF+LRQ8Sjm793B5*#uQ;IJTiH*8Qt<U@A%*E%/"nq9BjtV/Bo93[.V$DsLZ8M1%9>GVZ0JSSN-?g,.SFDSZ\ri&`I;&L]04_`:+Tt).Rn,'9$?#ljc*kP5&9OBlX?R344D[VM1Z+6%3u)+ooNZ>0ar&q72&a8TD(P9/&D:N#e%(5GKXL/'0d1.CdmJ*o`?:bj_hM1F8Hslil/eEcJh]/^6A/ig$Ynn$=WJ6FI2#Np4$'\I%''m,s?1H-2<MFb?_2Cd7mRtS)76mpi?_`uD57cL/0rLbC^]LO'XmAp8Jp*$!(TP-'4'oQ`0"cbgS^G8Y_!XM`Gnlb'<jBYhN%+tp%Q>j`30eUqE<o3!?\5X,e>;7j>W7_)@o\KVI'H0E@@0E=J-b*.1rY6DFW4<P=?-F?P<$88P8ji<e@Ymn1H*e0&08Sm?ZKiM0Cn6lg%K5I3:f[I]Q@Zb@jnqhEZ9Y;VAd@)ZF8/HO2'5%>%n.o5"`01O/&ea,jT`>aA\.d=R%A'[[Uhk=u4JKet9s"/GNQ1K/"'$l=#qN`L%5rZMFq2U+9NYW`\nN138Z\9faM[4*:'/!d^P&rT$_*ShYgjnSl>%+qGM@DKOi1t,D3O8`rLf")^VDY\]/ST<al@$\7UhG%J]]^!;%jS,a;_eb*mm:.gh=sn5<*TL)sr!jWgW=5"1.n70;,/!8rBLU7m(,pCt+Qa%a\MBj<A`EFb00p0c?ufao!q'`bhK1oSm"e:7TZ+pR%+<^ql9.S;Hlrb(]N/gmK8`WB8Nb-9fTt)UA-`GgG9("@L(qP,9mlVtZbdW*oie7Wb&uGuDQm!rE?QU<n.3$K!!:K'V>q$s7^9*Y8%^tTJ8>N-UJJk^&TEQYPA&:/NZcN(BSjus[biM@=Q`6gaf((D+rfRtE3Gf4oOROfs=q'aZSmKE</gE^qE/UeK)A0D8j&dV#@*<g0+%>4CBbGOo:Q-;Z&?UCq?LWYu74N2@4$K?_[m\>c5GFhf\u>o4SoUH=%f+4sT3_,AE^\^5M!+_4M=ZJn/<a=iDQ5r!AI-_;)9,7brt%/2+p,W!["qE(Us/Ld6tJ!%M>a;Di;,\YCk[=YA+'!p'`=bDEH8*Q)\H7O9N._I;Aj@Hj5:$kuCZ?KlEe&`&.PG"6]r9R,ot&,r*%%MoMeeAZ,0N&^"f1E:r4>_g;k73T=ViHWL=TGeQ,V<Lr4cE!3S<N#!oQVH+s837O&F0#%Pg0iJLgOmjQrTi+1(FIZTLUG(Fo4olk$%p^RI@pjAZo!$`1>s3Rd&590*+2J0cAh?Fj`Jnk^Lb%=Fp`ckFfmggZ[^-4+R.`hAsro%X6Wb;#I)qBd1LF\'Y@I26l#fO^9_hhG#%mVY<c2SBOTaBHeb,erQUCdTjTYC-[ZLVs,+`j+Pc]S2:a+.>*-Bp6#9la@D/&%^/okFREXJe>0gn1KtCd%f7>!AJa"gk!EG8^^JT%m]C_&/\s!r;-:VG+jVqmNXi3l=AnV5ag8Cb>L9Rm(Yh8N2H`VfIeMQr-qNRT>/qTt:ke6cM3ruZj["8*/R)>0]Lc/,Li1Cn2:Y?%%"S`+:ZPS1meYMb;U=!7bFe6FC&XO'Mgrh/eZYa+#N-N\<EM[eg<C3>FO2@d3!3(s\20`<;I09?V`f*tdI5Y"oRfSWrgp*.KLTCkH%IWg:cc:G2M_1M7+j_tAN8j.W*(A11DCu,SE1cncJLK[nRe46V7#ju($-^lE`Ka(</Mf&r0R">cT>C@Mc1t6+.@e^Z`<d(]J+]d9t%/Sc]1Be>AJ$8CLsHX?=hROrJ-gUaMd/]L.`2P@%U(ES2>c&']*gVhu^(I&O^`,U?1OX+8S=YU>/AIEhq]2'*Ha&f2!Hcq=WEt2:a%Y6P35Oc[ji*OZrTBlCsl>'Y,aL3:E82^"OCi#C^TP)!Zj\o;^A"K[3_WEFMFTkp_LW8[QtU61d.C=+K7$'d/;\;+;"f@afl$@X`b%lKg$(A`fLM08sSKBHoqLbQUkKBp4f%m(7)tfH`n9"^s?@9qq`8YrAocca'l<*4<!Of"76@O_YMi`*V/J<eV[4/bYj8X#k[T)[U<]%+3Ej]3n?4\]39g4R&H8E60aj!1:Ur#iWs%<MB`?_LPSss<NeR33..j$?P0JfG58uXq.sLEWlS'CG[#\aUq=mmQ:QSi!?@>Ji_n)D%s6DeU?rR[]>>MSN<3t>n@Rgma-AXV%IeN9/cG&.4\6[r<=g-si6R..#E3L#]1(K]Y]_i<d=A]8LKl>jK#To?,0<q"\M+P?WK&Cpp%$IhQNd2Kk,J;\Pm>R**_]E)eW^EaFb6oR(I<8t^SL?p1+r'2PZ'1&!6lT9s-rY]_.0EL1$8`PWoK8RKh'&168IbO#J]kmSO^A5HZ%?a_,pArq?Dp?")O&YZn`4t#hWcgTCMA1M(O"/_Ke%V#7,G4;'@G4;fCn>AYo'\s6g4R>(ocrA6Md&!-N@OkO#FhgGR@Ta"tV(AIJ%JP;;e53?NO7R*s=!(4a(J\b3XV%\ODYXd)B5Vb$@hh"C8MQ;TX`Nuh=JT#YON@N>5q->r[n[>(ql+f!kc@CmPfKc4:.SdYcCToIr%>mE4G,IEE"D&<=ir-g("Z5ORF[E_('g1AS_[MNpN&(;)n/?>9:*M[E27J%Y:m2=6[_i_?C[-(Moi'AL_>761,-rso<GfN.c%.s]5%5U)'shW<ZY];hQ>Z*=llRB,JCl4iQ?Z&0b^@BB)m@d7(7WcDpDbKSK"0UjjsZ0Q?=HaCqGj6)h5-KpDK6Q4X7P*p?4XK8Tg?bK5q%!aO7VjYeX90N_d'A6`;U*0+2q3@YT!5)31s_Tkb69N>XLQ3_6O,QX1J_e]ko;K<GFa!"2^ltjIdWXZ(;crtrL)KuhKeht<DFhb))%QF4u`?1Y:dfUhuKFVh/sb`6EK3107+gP+"/3-*0+7H42sG!7I_-\!h5$nEdrOt9-R:)%)-ZAY4\J0Z'R+BEP,nk`;HC`226%(?2G%3]'M]`>n_'.UA&N'+[/7r<tHN=RQe;F6KN8H4WluN0,83nj-_n,Q$ZB5pDjKV&;R7+p:mbR6=)[];Ga$Op1>#o</LK^cGhR`3<BY%9#m7dG^;fV3T(fWKb\k6&J"TJgb_=,!ERbA$&9,>M;SO(U#gh1f!Fq-%6Y1rKaRu^d*,)XS/$Ug@p04k+upr99duePF%1g>L7$^*%O;tGY-3+H`$8MmF#WS+a)=B1X"ekV6!qY"410B80a5Y$HL)mnqYS[m6Xb!p>?0[hRYWSH[&[If7U2t++E/hmBKr^6n3,>#k%<_i[%l8YlM+g&)6Koi8ZZ9@&cn:>1Y0&A-&L`Vgn"V],s:1?(;K*47nZg&I\LM!t7RPC+j@3st'#/`oT0jc*taCK\h&lbp"*Q$-A]1MK,%mR&@2?0,5VLe'Ua<(3=2VaD+?2=lBM)_bB%30U[U$oB8PmmNW;!1[\!cI&Ei#,0@P:MpQKJN?><!VM@nLcre\^a1.i[!k;Vj2lNU%9]ZJ7OoU'8PFMV=e.]pbTK'NPF#hmCbCTV#`5C".alSUn<QDns?kU<f61f]cau5CQc=S8k)fZi%k8L[@,>(34r9CWlg*=>V9/I#5%jK.^.@'fXD_eR,0XW5N]ZgJ9O"74[U.4gj+J?2t[Rq@*3Z$dJc0D<h)a/4;+bhpG-MZX;6jG;iPUACjYe$`]R(]#EG!k;VW:OiqR%WbU@:p0)B?q[pWI@i._#:k#Z1JVgAu3$L0o=sV(qGpa2UXTZGVfM[R\83t`VAU-!QQ?'!;%rOcs\WARE%UB:@YY^s)Lc-#0H)/V=%0S6-Q#fV@,"pb(*Mo;V2U`)\Q(CD?+R9]IR;pa1,!MYrl3=6^Tp9J8&VrCf]%Zn\b'BtBaTtqW,rdi&$Z7PMhlk1e;F]LdY:)D@f%]&31,G]V3B,fY,"2eJlE!oQEEV0B#!J1STQ<_Y"(D!g=s32ZkSV]_*`>#KLQ/ESGI)Q;h!b/eINE8#rdLLn?,q)3Og#+18.cA@X"%`DMO<^A)ST,ICZc%D/\JoMF3')E3@Y\0n4!#*QP:I5?n-KQ4]Jq+;@h5?IrZ3Fo*'MGdkYd:HjLA%ofghh-!ONYVT>_tZkX!f&QQ%>toT36cKO723$H%p2Q7<\KOq`(pO<RZ]H8R83?tqiI.6%!7N@$W00l/[5FIK7>R,``@p@Q0&g`hq-C?F+A.)!f!9=0^;T.o-kH*>%ckRkhF@aE/L:,,Sq6T?$#m>p$#;Zl:/.;k*^2)Xs"rV)r9%Um569]PC'L9FP3EOkB[/b^%\Pd#<.Y2$egQ2$uS9'C-?"AGE*;U5:%P)G!1kB/J5PA!HGh'B_"BFbERN=J?3Z1'>[$L$AVhb;?F(*!A],j*%\bjOQS5bJ0`M&fi)Pg7P\MQU^J.aX.8>H#Em]OCUrEaU[3%O-,f&_?sJb^k'p19dMi_##;a=gP8RaA2LNH)KVE4LbL5+Z02d(,O4gi^)DD5%dQGF/+GR!0pVN?*&esod'k=036g\oGYePuB6J9Q%3Sd=F,"fE_jr`Q%&:'#G]4G%Q%eJXQ7l\_5_E5adkpiA"AUb$3p`b!bi$L(eQR!LZDgR03YQl\i!^^;K.rfdK24E`I=<?$&Z+8`'%pA-_bGX)ijg`P&3XNJHq<0aS&pjq<7Rn.,V_WVOA1sQ=)OjJ*aR,nmA$^FjpZ$`=2K)HEn$5*@aqcP&7!X1ksFC[u8d;[=h=@#8d%0e+?T#][D4Gmq37M;]/HOKB(5`6I^q"VLInm*15EA#ZjY6EM=q$a@8M>6Z]8\LOp@ih<2/[9CXc]7Lg59jGe$LnC3"F<aV59'e%?%EKYRI,0ZSUj>[s-PK[S(86*:&n\)lTp9H/ESUa^q\enHg5+<Tu+;24R?0,$h)VjjDgJ*m3rIufl)Zls=**h/cM]?]X5!i'ceJ@/5%k/@"U3+BsuoJlb%h^UVC1`[@e2P!"'H0a[]\+ZO)Ae$pHKG^;clpCh,]g@_]p64Xn&h^eIGn.b;>.+c_ps7La+:!FpX-O=>e;54j%o7)j);onMRm2T/(5c']I)hC?d%Z6\E`:lhgg`Y(uBZ=X9,UJ"ti_rX)SKJ,n58eg2l^UD(3KQ3koPj@U,nUDcMdPE?P:9'LK@LO,%((([\?.j$R2Xi;Rs!#BKa%Bjsa0cV\RDFI#/C`>u6pe4`M,\'*)@<N?`DSQ%-FtHn!^ZUT2`+8s+_hHEo(uT24@3jf%hQPr_$(c?%[h9uG%4'A^>I5A_aT=)hDF2="!9@>B/3bi>"`YQ8>!n7*-HM;PcO8hJMpX6Q93Mjn.)\&t7:d?qiOf@aoW:-j9/B)\P8qLC!/_"Q%*e:-#GI*UQ'r5s^ISbbh=;+-tS93#cA5>S5l]Lim8sq$f<lK5U3,rRYjA`lNQl.K9=Ldob7rKW<3a2sLq]skN3-CIhe'AlFH!qi@%]:L#U@nnN6ngm*`);Q-up9jh=:0rLh4$&5F6Q<;5[EUdiZ*i6;,^,H9fE(&m0bWrq9IXL4p.X.K@8<PI!Q\8=Fo4AlGO00al^fi+%obb8rFALM`"WO#iX,@88[lab0o1gK]<Ff"\[`?,6/IaV2.V<<iA"-.eCarsu:06FW!C(\D3]mrQ0$3=@Hr`C632K5&&)KsA=^)@r%QFnegpZ=KAm)R$3%j&_lf$!;i`tj$6,pM]pZ6$"m_G$I^CXHP^;fnt3_:'D"D`C9\"1BaNQgooaQI4<C;:&";fToQV3Mf["pJi[4%!G?R9AW'4f_O[W-93Ai(`#[#D7SBJ+6QM6iPo:V'(eC[nSd1Tg7Mh]Q=4fjp^lh.'Z[u/,?UJAW1]naf.u6/W/$Z:O3@)-Y=CR&C%XKlm)jO,6mnoNq2N&X.pnqOir/H6,-H^Ngqm-@-n``,9_k;\o.9]W:K7"b?]n?kQ\+I5X8L+"\%(:h8$M+9:;aB_g$Bpl?R?=akW%]<t&@,ME(2$K#bJaU9"g'\oNoBY\=W^=E<'Pp8WJ!>;gi(R\ul8ANNu*(-ZX\\_3#=c:(u#^sf0+Tf'7I%^NTNn@ph%MA-f-lbTt%m%CK*flO/50[/,VfE(cW./)hYm2!_oE5[+J\j3Cj#4LV8Vl,(:%8\(E%jY?nkF\D+!OHWPW0un'Xd%I>d>/lKAtQk\B/ZfCL6I_P%1"JHJ4[P)gjtI(34i?3c)am;nQgdU6pCnItm#7Er^qp+H1l]SKL?/Y6G]lFId#^7Z&6k"$W5LE*SX"emX`)/0+N:9mf)V"@+qp3.%[?t+GFgOE^FkVCSC8E'MNUf!$q`EuNTS^iX,8&'5M6K\5%E(PjFUYBkk(lL/H2'!9N"+XqG1iRIUf!,frktc@&@0L!Z)s/p5C!PW%Z/@!h,gdoM,.K\G?B!+Qe'4T!G]+hhXV*d)HV)"U+cE7(`:i2AI=_WUK%;[#f$ILKIf_uiI(*<+&b.'.eIuU5+K,h+e;,3m6g,^0%\%fo(jOGo>i'8kI56jEX+WD'"QeZYtQ#%9U).pJbS-->8VBkIXf]JZT.u<10OK<Zs1j1Yj-&,ja&EIgV/V4I"j?WEt6$+QO##;]3%[qbV>'GZ@82(&4?6NtabN*'YS6G=G<0Z;S#PP>/2E'(ja;l_Tmk[);V1oq+eW)e)+CK*&s:YG!5+bFP8cPl@4j.h[,Q!?7'r(P%2%=bR=@$9..tSEuCI7p)PuAnai+I+UGCSmEC>3nSWaq@U19)s")X/n^khRkcSrnYL7W)-&#=cORWZj3>R%8C:(L#;*1*C(2!3>_1fC%04J`q=YOq;j,`kac];+0rP=U!(j_5-""0!\;/kAh4;!rO/>K#>MB^X%W=gN#0PB^mHucZij2,;-TiG4O;j%Qo)Epm>O$gT360N8!%Mo"NA-`41lWe[9LCjj%([Z"3DfaAK1N,nK`RE.CnACIgP98+Aj:bm;WQoBO,`(@n1S=pq)#&A`*+X+/kElc-7`r^MMCXp!V#)R,*%G9cWN8=<WACmXMF#!"ECG7,J;8-+`'"r5<YO1sFrj*Ks1refhfgHst=`M.Ho]qlu_+W.ehAs+-8<f_:FCP:\t'rL?O7J@0p"tOlL%7V"P#1jUcfr4;C]&iXiE9SH3JCt'4`2_t-GS5leVjG=nPD1#>_cLB1o3@*&`Mr1ArK>["8AdXu/M-P,+(Y(.C-La0K[p_H&*hf17%)R^8X55^#N'A,`Yi0sNMg$rWq*6hGaQ%YL1"JESdDm=.&M:4)?To#s-hk?Q:#PhYNnNepnb$3K>2W/"^=R2#57T^&OYfEUEepZ#M%7g]Y7,%Y>EdPurB<1LJAL*fum0]c%tCc5j^WBmi6EPc$P`u:fZUP6[0:o[TnW?G3Ye0%&fRHW;S5j*Z_)jk/G(6M96qb=AO4_M$P%ZGn_%j=D\[o.nc"cS"a!)P,4*3P*AE,rjF&agGG`VHpV<9:?9%-+mYd+?G;>@tQSd$.Wi'2MoCEp,Re#/3>($^_\2r#Y`<)^oBZF%RfeS`]QZG#TpZtqg6#?5R>AB`Ca_W71:kg`OYE,\jA;5,Fg0gEP/)l(Bgt+YPZJ?EKZ>q!8Q$sg2MOYh#FLQ?Uu]#fc5&,q8^3M1%[q$8Gg#iIW^b'.f*N,<ALg]V8KNrRBD,/5U#EanP:Xok+gq!$^6I3or2X'TCDd\C6SB1k)7Zu'rU^hPXaf%J;0q/X2Y8(fe+VAZc%+rFP37b5N;>te#D;ijVJh8hZ:QNOUX18n`Ql%$T$s5#Y7e<X2DC^ne-BU^-KBlP\.jjY\@cJj7-Bq;"s/Z7'3LtHmJ/o@8&BJ?=8%aX,-6R4=3\Xb?!EGJKVmfYK#A*Y"QQXP8'QgGRjR]QNOf?0i0;`I!qq:eT:THOp8E9X1"&1g+d-5OW`<p#Bkc&.P[tK9A@(!\PFF%F3F_1\N*O#N`@%Ibt29p2]*l7&\);2di3h@AB.F27SZH`C.E<sF"<aN<oeUgEQGC7&lG`&p+\4ej>aLjW,][`nNUaEF*'Uso,`I.%?gOPI.m0G;=a+gm&pFO!0rJ:lj[W]dKMI^Y!KK]91sT#EJhJm)_Y%]8f3RfoXIb\<$/i+`aXPFkZKf8Vb6B@QFL.l$B<nMhqiErC%*&]q/?B3LHZd/hc+!uYN&/7)G&\!O&Cn)_T/e<4Z<tO,%)E&$GO*(t0[<T_0$P3ebCU8Q:_:a]?SZINsVVB0LL1E7`+(F1c,U",%%?&l$(G%qcI!GtTF]XV"/%D$lYb*t?I\*e_Ap'SR*(PUXMD)%DkBR:b5JMAGKJ>-O[A1X)?Ju925Ku7#+9Te[/Qe]*;+07B_f]Eje%mDmnY2Ps=pJlOdHC4mLBMds#lMG%&"(An?kLi6^bP>%ece>jd[`.3>EP!Ioe%OY_Y-TJ9/3<gN="sVlO2/\'7&Hgu.)9;.)_[1l/%Em#Os#Xl`=>[F=\5d$b=gB`Vj-7kEIh<?n4$kdR!d1$Yjl3mkG-U<2!:l4?OjJGOh.$XfL03Xs0*p6edIlS;NO#T@I,9KA\KYAak%Rue^3!_ohl1CXK(N*#8K!lU%*+M<0:3&In\-ZahYe6K&&;ip9:RN:CpBRX5^b`9UHLhg0/PDr\:8,F8:K8NSNQoIUP"08a[aX%E4%"VD_9QFT,2-jUK"2=@L?_*JWEANfaY*<JN%em[QSK-4e,QT.6R/7Tt_]*ECRAkhWY6l8TI<u9HWY-F_N`0!5dg##i9:n5,-)L,4K%*-bG:F9`Eq#fh1m);NY0HfPDl%L,N,_U3AR'ZAg-ig#sHrITcg?Wp#t@ahiNfX;h'lZ9G))QaMiW&[7[%b*AJC/?nSYTbrO#uB\K%)l,ssbG6JCp]"s'7[Tg)>TKc''&;IR(gbkF,':%8_GNR2:RJ#)-a@MPa0cf&22#;iEEqni`3kET'8I4P/:1u'.>Gb!=3ie)_**p/%WS+2%Me+,>8YRhQ>/-kQh?R8s2G2^V>17X)BX7kUT)EWkE0e<Bq0mE(GG9S/33ujpGoALIaH]:Yb&$*@5RLM^'3B-nfIbBUj0W?F%aM`O!KYL]&aP,dI`4#I]e7K*<fPu0&.6`EhL>p/&O#u&[335-Y6KlOk^BW:@+uJY&)b\h`bN5&B=ZrZ#L!<[S[FN3E8`Y2U\PPT@%]T^u+TB"XAi>S6^_`5o^+bV]eGAr=:p-]H;6@l&pf&5WUB,oG].VOrCrC6;YjQ_]/T_1qrQR%ViALf_,+>kb6?oD4s"s5aV7a08]%5r0=tRS80L1db#CAGM`jPD6pWG/e+>2J""G8g.[EnS$WLHtQ+=QULU&4%W-%2X_p"c0);h>Hh."/DhGtC5j,=@-U*optQ=["jQ]D%-\lmCVdU&1p8t,N6B6Lo^-h;k6t(&E*qK;%:,'VPH:bcF3-nHm6ZDR7c>/?dQ;U:nUru>IHHm_<mbCP*i8!rYUB_dEL32*W>c3>g%"Q@&Z%PJ#5<*u"""1b.dR;LLbrb]bu<jTZEJ?3ZMQpJ&F96=4opA/@l:?('10WV:GY/IA]%VrIT!EIYI\>0"Tj-kTpAZYl?(tUke%_:aQ#c+X1O0R$.BB#CI#$QEbF/.en"hFVOQcXC\!?nEO[r#F3i?Hj^Ud%SB7,iLIf/Lj,T`n:OTCqI&o5mshUJCH#Q+.PS*eXJ\a%e#A3&P%[gc*O]Y<8SjmB6#F%q%E]B<!R>,Uf#+1JmFZ*O*urm/7!ZG3nfY)(L\.i],E$1;f2=pZYZ0cj&8!L<b82PaX,6e<=?p!C%]T^u+TB"XAi>QGi\9S'@+bM6YcT8.Q!$$%T9a>H)7.#/:n,8<b)G1GfcK@U5<JmP?3QJ;P)pPa=5sq)'.i_gK\<GRRSqGa5JJugQ%R"t>NbSi;dnW4*O8G/"mcI4L`<YCD<1oaP(FN2]3&LitY1M[_GS9"VSRb09MW/YQ%k'YRhPLqdcj4]IN)CcH#EEDQO`&3cl:l!P,%_"E3DPVOXBUQ<)"B*6[\R_^='ZKmTWKjAkmWQT?>`-t9o'kTo+:1Dt*NbUA*C<;FZ^N^#]%HXo,CD%tHdagML?T"i0,XE=6iB/?`%em_Y+]b!34b+WiMX9r.GTQr.1T*BkLPM!=8A(ka->(r+QF0FE:#[15`3*oR`Z-gHVOJYjND60euN*r)@`KZ1I32lhZ26+6\P]i.W%68c#T&5gM%C!O6A2X_n,c0)#`>H"DrcT9=1TWPIATSW%[eZ2[u&SIu!(lbJV)Vf/lbA="D'[o]%QE47a.QKB).9%W'$CV8Y\#%%9%8:Q.He<Q$I0[cY,3EJ?&Wgf-oo@:d.8SfL*[dKltNW8=K;uPA$)<nAYH$!fc58*>8j9%V)FJ:0bE`;i2-EF[Xpe2oFi:K`8193Ji%OHq.gUS7?R=u*%`_s4nCE@8#*rEfeD5<:miUdX>bdqX%[oh7?H@W"Ngg*uD$#utTMR4K$Ok<[?c`TL7N-Ee,iK0GsrD/*e`P%G0g%0eu,K2XVhKXll?8A"]]GHCjG>^`"pnQ2+p")@H1A2qDnZ#h'bJ01!oBVHIBDF:b;XM%mHPZ*gP+/&f.WZ!S,@3':<okI&PrM/DiE%XN_N^U%EC`fA)XbVTFj05^mNO;^g*9a#\VZC$nMg2gu"GmQV.rLcV4/3b#0eOrLgF;*R?>25?Ji08Yenj#L7RgUra&2P7n@Cr'<?%"WQXK=t,#'rf@n97E$\77A_WoL!2i#XK4T1Y\&=0#7UqG/=%ukRFhlM@g0,E&r@R6m*]+Fm\7+KkFa_;TS=@5G&/YZ6\oIh7>DCd%8="FtIm._XES<Fe)X@qt,G=1$('+R6e0FsU;nb7k"XJ)n-2%S">)l"#TQqoiBg.<[fn-Vf)NSs3\0?0knmaggIrnXWlM7^H$V,!M%,c>;0!X]&c(0KZ4]c/bB>`0,H7HsC.l(Fi(6Ki,"/Ug3n'f+-u5TWf,U;C1P18YNQ3%9bsnBQcq4O7J^?s,$p7`Xo+4lTi4Kc'"J%f?1,)BB.X]S3Jt5<iN"pPbIe![h,QB04>b*iuF6U_Wf\;^^8/9l6YKL'O6>u%)T)kf/&\C'f73<[`F&7T];`uL`02F.8dp@p,NAo%s)&Ct$9\2*"<.pE4`BsPJ,^T1"=)'iN6UHJ"G4oB5^g'c,@E4.U'>gs<%=%+5`J+Sg7*]H08[jG6INZ]U3S,kD*F;'B1o\`WFr9:%[f=7$CNSD0E&_.^:l?I8Ys's2L'RsRh%%HWs#@/Ai]mr&1clM#Oiu3hlZuPtjfFp%056aA/MO;DgI5o3c67&E+O0T!7Q)8R5_GnY%D!9UaNb:n]1"Q=Z"D:3sX9u9CB-_lF:pOD3$NW[g@6Z>'YD*8?eMq0RlD>StU?*B<Adce^Ssu2j$LFF$3a$l%D%Dp"<FJM!dfngg%(sBtF#+TB0h,spQ5sha58u,52EuM:f%C'7QU[<>,E=(.'Gpfk65)6OKK/JQph`7bQAa(^p8=?h]olM,<i]Si7.cTZ(4T5[SU5"T_%WiJZ[G,f#NP<R\;$=^aq('rJLmj,?dkHHjKYbiq8V4Fr.APVfhio)^,R-8j2LC/J>XQ]j`OkD@p!&nJe4`OMoes3shBmT5=G"eSP%p'[T>SlKi$99%R5`>Z1N2VKB@:".>NKX+dA5#j#^;*N&ieOuXECMD:FPq"[R[&lEHFdI>N5[IW&2&"f]<q6jsP#8Ge`.6?[S7TC-%Z+h?LF5+-/[(8Ia-!;-4\#/n"QMh$Xk#%t,eh:]3Z/23^1i4<ig)V6onJP>=CLq)Q-3edXC?SB.06+jo[Uf]Cd<tq/!?4(!dE0=Q%,NTtDrCtt.fIr(]5Ud-pH.t7G,dtttl`RW;49LPn4Vc22?#R+^F?ISj2Yk1-2.Sc<;\npN(isHCh1#\B<Q1n@_\,:94:M.:&?AuD%!Hi8N:1DuU^CJeCFCor]C.$4Vm9);I%\LXB)m!LqcH`q7eKfeUHa'4M/:eCa@*K?QC%fWIM>`SSM=!qKQIe%`,dtttlX9*MB@`1?%@pVL#"VKPDIV]&/*urjZ70<1I\ZGpiQo<38EGeMcMKI#QcftF`DUlNXQB4Vd<?rPGa'gAJYsk^fGpflb'=_Wts&\^_Z'@[6,$:bE%o0"$Z,sL61Yp.#qfW2Z=_4BXiCRO(44*\a2U5`0V17SH]UX/IjiN&uV@kq&SH\NUVfS5t=TD!N5M!Kl9T5/i_nQ:ttF@]\tF<l61%A$;BLU2;s&fsYKQ:P+aN&:795a`8h&B;'UQ9L8$3_uPjm^u[l9k+0H!q0sD43G[RH%j]DDo?>OMV/*U6LXo)$HYL'i^LWH)?jA@U%s#@$P"Hd+OTdo_o;I$TRl(5&"8Hc'hSt_Pa%A0c0UeXWI%Cb$lib4t.7j`2D0\q'pHS/La,GXL;K,"+jZ!S+Q$MQI/aE)FiHVXBO%OOuJk(MELR1&7OGR"=J1%Z[,lY:WW#EbY4p.%5>mgZERYSh7$5Y1'Y@@LjV])b"#N=QSt3%Fl#&M634%94ET[%qB6e7_m_%)B/ah%pV]FV,`[fsefsiV6gU.-(pfd/jDUN3'&2Pi=IUmEdi.Z2EuRhfH$8G6MUp@X?M%anM[nbc)d[.seuE%U$GKG0Y+q0)Fdk.u<>,U_%Yc=V6B)l^NGL>-aF&8>X:lD\_o1Tc!]UCV<E(4(GNsb"=PQd?1:7J9:c6Ru+DF#L=:7tD&#I_soc!;-mIS!JH(CfD+gXoTK4>o`G%)j=)m;L&El1GpOW4=PI07-m]A"g-\1I"IX(Z1Qg.p'LG[.LcrIf(:)'f\)1])U>?l"QE=)Tcj%:U.9AL/PiBNGL;;fF,Z\BN(/sD%V<.i%&Odb35Fa?e2Yg\-e&p.XMpZ)ogPi$>W'AU7i3g6<TE\LjI_^bG&0nHG&kuLcmj,?dkHHjcYa3:EL(5B.BnSj4[GCl8\7T1q%@<"?Z1Kof,S8mGZ$Ds3+%b`aE2H8G,HHrOBeh:_<fbqJ3K1OHN5^s]i+L,WT/0QJSGZHT"Wb7UZ#C4im.<6PqlZpeW8d1?%4f(/>%Vek3]b^FNU%F)M;Hr.,@"qT'+#F$3=9.X2i[Ws6?c@F1q;U66-!MiI=g3u$I?L<UP%EeF0)I#gH2P=5$6S^lr,N2?=?%j2n3`meT%D*dNT7&?!$5B&;je%Cms2P9$`bi)aTA(*roEU@`(=quC`g;3foM31=%D)^e.KZ`rnOt'iN8^:52'T&<BetsS`$Y$1%Cg2,2MT0^:%Rk[l0R)Q^+6@il"*F=_h/UqkAK9jJO=+&]AMAZ<FB%BKo[b`aFjWHNMh"@Z0K!PW_hpOW-I:s/jX(g<W/)&8\D<;DS,2_5sdFqPh%WD\M9:SY68j)d"-cFI7=l^G\D_HcI)<s?1G3EltpDaD[<L=S"k#q8)$VrVRGG1#$PF$uKP7.X7JcS]GHIT/Ia1kLJqd"q#YC53K5%D(8iCZY%5;=gUI[8:XTFUJTiE!LJOC(2t_TYG-:iZ#)[[[2FTSh2?T\pY6pF[DQ7:asl.&.84?fg0D5#=2hFu>\=2ki..OQHiGO?%2rrE[,b=/!+SH0e4T,Q&fQr'i%EN6<80$lXKBMGn8/6p0\Xj:cXiJBSU'b:&l5(_*\sVh1fXC.@2,38\3FgDRH`e8kT(ap*-crkh%NHuG8dqY3(VA+'1n*)[hBuj-T7^;D:M<)K=`q:6YOT6[LHergmg6Uktf=!+NPFHaCUcV>E)i0gh5u917edjm=VNhZHOa'LDP1[51%U:"k$YW5pl)3HjtSee%OhI)L.S.);QVJ!bJnRGZYW-TqR/^-9qW;0hp>!04*q"W6gMhI3"\Z(5?-l-0;mC-GFjN-BDf>HM-kC5*H%>1fDkfh<QWS%D"rTJ:mNIV];=eWe&>;6'j*HButE[g'O[0;ui?TBW!&$\Z+&6<t4g0NX-B@+>W.TgZJDX.ZR[WD)E0d8TN?%OiqQ%OTL="4atA!bR2*l28g&pMP]f9Zir0S_#a(,NCCYg(Dj2"&s=^[,i\S#.MoHdf,$K(#iF)o\i2a-&[CeNYonUUKk@c,$?ne,4SlB4%WaRVGe9mo!ZU]1fPPUUgU*a?rAWJFBH1'lAXH-jd<CWZ4\$T=do4dMH:>Fi1XOcAH/Tn&OOCaUTB`8NSS=ZaB9q94[W)$bjkU7:n%:%1:J+)qE8Os$J(86B/)[!]bWOP3\sAH@KCYQPEW@@k>$98>?iB\<$>aq6&V;2h4q21o`a'$'HXe7JA+W>WXq>J?Mi%5T>LX0fOc%CmY=oE;eh;pRf2U-;#B!<K`S6eAG\mR\mn$3Zp5AWOdR]hBeA7=28X2#Y]5j;;sr=Ib\2Uc$e4AU@YhZId]Ae$$T^(q,Y0&^ocKX%Fi'\Vp3(l]D:-rL8=1@r6X3lUKDWYR@WM]+<fJH"(j-:r\qo8QK7M#m$>O?F)kEW)+>Q2Z^^s_W>[Q\;,$kB%<)?T7Yf;Q.Xrn>I%H)msN5Dsc$JmdjS7uj!6*6cQGeX^0noe/U)]h0eRp=POskDm:E56la1?6#-gH\2FXEs?]FQ/T?.-IXRKT+bim.nI*]3>#KOndWiQ%!a+uW&c+nY?jdV406oG%;?P#\>.+r,U0o"@ANPj:e;UhQ)&t?`PRhG!bqMWDF1+>1>NCS>%tJ%(a#++<s!S.R\ecm8Zb_7]%#:Sa%bnmbd6Lqg?9SGm@4bB*+(eIsB;&9qV!Cfh<?+4$F(o=Ls;("]5<Oa1U9msC5MC8b<CYHT+Q<XRm#PXb,Z$Wj1Q00!HB)KpBL_`i6%bSIn"Pkp63n,:Sk*`>'(c4J:j"P?@dIHTm,MXUr'q&!e9@"rDFV?_=*[b7.(!;CdQF0]eE^SR_+j'U1bd0G_5:"M;O4?31[oD"VL%O0ND!dAh4eZDQfN;EoTjc"7=HFODF&KW0O*)ja$FY5<DhclmBWDq-kpbmMg[=9I+[-(Hg/UrArqLp8)>mL6?)FU^4.m*W-r"OtTH%P,+3U*/V4pQKnpHkQe^EL4U71,`tM:>oM[25pD&cZ8ASU.Ihi?2uk!l?dh`/i=Xs;U)QVA[4bGX;Q@i>)PV'&@nUR.4$!WH*9q60%*fbNAa.hcLjr5$HAF(5"6nQZc!@-]!'(K#@Dje&q)g66G[Z%,CR#'t1":`HaTBONb97rcJd'A(ML,"R/8hl9je;UhQC#R4\QVd:(%QIH=Qj?7,_"R5;M*qMSrK#Hn^pP([6c3t!47$:+f(%2j">DZ/"#SCAtQ6<A';I;;+]$%nPYl_&(&GKUp/Z*Bq^6"1pYWKE-<Fe9F%d35b?O;0$McW$^6[S9?!lBt2U`]BGlTq7e8@;nfE(9n`uo1M[COHMJ4O"I>Vmca!9K3CM!SUuom"bO[<.qMtBa3m_(&dd0J\8+oQ%->?F_-qL^cb*5WXcoe%5@Gj_P:BX+E"c:kd_NqJVZ<S[)181Si,EUuA>#Ea\+9e_cE7kp/INuaFo8&^^$tT!9B+#"ZUkWWI$LXNa%rh4(*;KKBmG*()H8B_:J4QJ*T$;Xk`Z(RdEJ>"#InR.+FGI7"a3C>?`)BdGXDkSCjS$"Dd&<Y@?K>$1J7s*c,>7u(9LUj-DWst&F%=B+PrL5UT!"gHEFbJJ/o,0_c<\:CoFfWrPPe38(u%fSI6FIqD<@+(i3(C(sA:CA!?)4$Z#MC)dEiC;Ng,?^,dAcOVVe+=)NEN!!8%=,:F^H_d@&W^7N!BLo$8T:j);+(-SP,7pI$@2,M`\7JU20HsR^U*6r)(k'l$_Eh2\*fnhc32kaY[PJ>Ps&k21"Mh<kk9r;?.+i4L%%(r(oSgq-t%B\"VYrY%qM/'DI%AhJ)2=1b<?dVrMl\!JG#%C,,$F)?XdEZR_78;sM$DmG,pUJW;pt^tFr`u5rCO0bFob0jQqk)L>%Z1TCG?#'BJ=R&:`Gb_!K.9VY^1b5q_YW4\=_eCP&jk@YI)-pGIH!(LI*t5WYEiE(=[?Q!!D6l^dfC[lslK=5@gM?n]Ve&V;OoY=h%0mn'@honA,`$Dpj^cVd\&V1k7K*^Y&WY[PI5NjFqPp^:dEOu-/5f,fuqa]IaI3B7/]-CA%<31NZU$#N-D+P<X^1\>;Q:Q=u\2/G1%J?6/9";I-[l;PZXo+,o-.F'?jG1VnGLQ9+75:H71K>aS=^6/l:=Q5UI(Gh";?*;7$,g&aPeXGQ,Cfb2s2s_ug:kb$fSiEoG0,>hK%+N2O!Bn4l<q<YVS+5mh19epK=OG;6p\7gb9P$C2PI7-_C"u?%X1BiCLM0oQ/D#E`M!(er/%6R.s=[>@IW2O*LJ-\^H_,]PdM>[Tf%@&#so"H,Nl:!3fBZ3n\_OKeHk;;=!6?g&UVm8[PD0VY8*SdpZ1`?li3ZXn%b6-IX!)+/qD,(r1FF`K$$(F.3i,as@JL(Ad_?V>,T%3r6#ZTYl\A1Hjb\_JZBl*_$EqEBJ=R"&3#W,X=?l%:2]Upn5cqD\gto#MN3o6SH94YGKT\H!_";1aKOkEEd-!5bC.nbDYa9)G3*D%U*VrO-6:5V[%q:NU[L3I#Y9;uk$T*apRjZUOLm<f8`2[c_#IujT7o@3KTUgN5s$M03_C)d*M#_2BI!&qdC+3&??.3S,gCV=9[Rs1%+VXNVIu:$I"'lLjiN+=XU*.;"(6QU*;bon>(`5R&oHIiM*^ZSiPk(KdT^,qtdD6!j.Q_Gpbu7-ip)d93d8R`1GjcZ#YnJn13^T#[%_2lu2^Zmr+XF[Qq6-pHP.bhX>JEK_4`_#8V70e1E+>LW.2RG/9=Dlc5DqI[5V/1n5OP6BD/M5e)VX;(rg,slWrFQE7hule;n0GEr%56QF,7G5%hn=(0^doE-+cNT.Uif-oHY7)SoJr"NGL;;,,Sj.ieC8>@Jb1i(Intp#SgSX*/63e**TBW^#:?GC#.=l'@,mB!9%q5^s%VTAP&X9&X*'=O#jef&-o30Sgg,0_be[;%N<U0%*AP1o)ZcG;a/"]HSEcko>K&ZZIf_J,9ukB%N]EC&Na';8O4^*JgtWAt8fe+=)D%Y+lfnm'4JmZT>68H$ZfS?EA#..qn3)+K9bj11sR*H#1MuOQu?O9au,`Z^5q8KU1$rA+WK.$O9PJAgfS(J&r9L,h]tS*1R``1m(tW%cZKu&g8Hu:I0[%'0)s5'UBAW1*r]bn:8H$%6#n5X)OlV]#l\4@*:+2N.s=GiYu`CA(0_,-it=.K1k\m<Dn=6A'?"Z3n[PgA^7_rY%aRq2P,e;.)B2-ib955M0qR6Es,TO>V+$0Yj*_G1B@r7$UWn;:p?J39gZ%3,)G9oiTN/qOC6u\4rlIZgX<FL$XfM^p6TrAB16X%@j%3/Xh_!0j,^en>98&=T:.m@[64.?se?Uh115D`L`-Lj,s4SbKl/J\`eg]Q4@K'aR26iab(1$k*9EU2JLL?P$)9f_#N03#K,VcA]\B%KM._b@]PA3:l]h$)m1i9&E0HURkV):2:785jA_<+FMZ=%1aP=2+fcJP_$[>l<>9'RV)cFenK.?VM+F/2_t:<!QDFH6N[a`.j^8Pd%@%K/`XYg/l[TK,$S:np^S106S8VIMK!sJ,Ld2!2MP(tQ>(Fl8Qo"5)W8`NeURaOo<S]K1N!t_pT_I>6SL=-L<BP,oWY:@.;89kae%D`L`-W1q<q0o\#;T[#3Q=Dcp+ErauC!4JNr<u71*h"!+4JGiRLhYa[j.c7FI^3dW>PQdW(T:A:S#(uqK/=Ti8T_;_GS@Z0)p&2Mi%c*rU4s1Pr4ATRJ7q[^l.rGfqb*rjZ<E9l6;fu9iEbH(YlfsEgg)"Ebmda*eP+P`jo55lXUnF$a_#LYWZ)%@WHXeS3D"o@/nGUT4G%6+Gjc#Fa[?9#`W@X8H_^mD%o/:\<U!,5oh3@FQrgc^q2V[s6ui"b]2gaUq0)YnqcR+H]Kl"`#<FW,./Y![@hth6RE*-6OVErIBPT%3hg:%q_g!5dS]L=`QmGG`$9gI9bi@m?jd+Z,o..S("rV*m9=c$8<W&JJH*DZD$3f]hN-cS1CXaX5QW2gTN.]$.C:!;]*Hk<$2T"&%RCbmWT$'=:"*$ibNQdUVEqaN3pDD^.:"c.Dk%NceG.-\\.MQ,uF>]U#cGL=7RVpC.;M@s,bMnnBeoB8FXng:jEf%t?r,lEP\0%#R%gkQE]W%AVHfm:46Xtgfi,C@!_L4^M.9Z+'-KYgj.'Mr>q$ICO?LHcY1U]a&cerKTR5m%AAnGl!;4T&%]_8dGeD5m#Go+L;5AG]UO%%2K(>2lWRZr>Y@-gYdU@_;fl3-&l/HFD!ZHS!M\dn[fZP=Ht1c1Ti#S2P[$/!ep<(M^V?dI)Xd*$`5[3"f1kEh]L#Pbfu6L5:M\.%b/r8r"l`i(+sUP(E`ui$45Ej$>a#T5Tpr4f_nBU`lW=6U2cd*<Xs,8"W"(jg"PKQ&0))+]I(i&:3p(0CZ.Rt]jUDY3V2A\kEnKs2%UTJhQO@aO]8fGgDFAU`air_818UNMjlMCq!h#*2&I+>._*LJYXW\6?&Z;71eF1Y\*5B[d]aR3_'gVr$4hA4?Z(io7cRp+S\34cSW%?l\(cN6T0XEV'dDKL=V!J,S[ts1D)]5<fadnbk[naffiVI0WL9)Xgd\O\9A.(pP*6D[b2S"HoPK>-Qb9DrnD;Q0)MU[J>Q\h'?$m%/iSD/_fA\<.1U;'pW-r>5YMKFBmV<R;KG.4pPSpdfrdh2?mqGaNP759+p3mq&+gq?[Q\O%j^-Gh)PV.@gBQu]9CDdmX48:$#S@)@%7u$!?<mu;Dimb=C>9^#nV0Tb5UmZ6"d3[(-d%gHIFboJt`9]fJUr%pu:N9gRaZ@Y#NDU5[$dC.iE7iMT6;\pWW_ml[L082hSBXks%IeKS(FdqLJZ@91HaiK&Hr&05M\NYlqI:Q89!urNNk8[Yp%HV:1(=ZnYfAmjXV:a\??+R6+N:^q!r.k=Gc0pKbhZMVED6e_0_->9j%1."^B.@/\UYoVam#HNIj2)5.@VN,)]V9,"R+C-"fIFr"H+PIWK1lTe5En.#o4kcZ2>AEClIrM4J>9dW*+cm6^S92,^;QGJ:Bi>Q+%'*A_[8*>YN]k0Qd:BHt^Dkj];`%b[h6j*7!30ha_I@MLT4G);uX2ib_XB@k4P[Wt5Q939=Z+$itX?IUa-\$6tdVFHX6GfL5q[Q3+%g*,0h&D#%qE#f1Xop0dXWqcQh^"AfXOm!oucOD_G\!t?$N;P\((P8\W>c3n_jMYX=hMuSS5Udssf.[DQW5Fe&7k`5D@rhJm?_`<3%!j@3a$#g3'*8'6YUf*[V*!:W[)MRL1JMO$sMB5H>\:tAFs#AY@aJ:Zq#l:>YPZ-"Xg2KDbg9gT#q.mVleKkLL*"U29Xm[Dpg=sGU%Re-6J0Y`c(U4t>AULh,7b:f6?J6uD/+ebM($!m-!_E,%tB!Z&#\e%NAqTI;$0'JVre1Zsq$*7*U]m4<?>=5cYQtEpBORe/Y^1E;8%8;A.T41)kglF(5lf$1afR*.?R-@,)i6k6c`MbI,,4(+;B]QM<hp0'N=ed`"`^"Q6bA6j2<$[68r?N/;`RFuHCARF/cmlA!obqs4=%[5qQ^/OOSoeIQAjN^FF\Z`BQ*k%f<o)V0VGH3X[m`Z;MQh7ak"o^lKBC:.lkllY#X2ljnVBf<Zi_YG]Kr"XVnIb,2ooKbuI,i5."%.>ErO"b%`,e78+OTbr;R/4%1^$n`3kA$7iP3k3[6amFfGo"#;-fqh]sYiXdIMBf8LC.YmHi"08alF+-edFn2^<Vg8IJ(usGM&W<q%#o`7uTC9PCr>13tcL7ORlhD6<4r`-LP2I1i0+["!!5U=VH]ki!_M.-<Gf@UM@c2Ut3&qETf5:Jc\?*%.2H&jCE:Q,Xc[rR.K*KZj%$]:(A\0^.YMDcQ>F5e_fDN]',`CL2\)o!0,:Ru%I<j?"cgI'#S:dJud\9fHI[mi8$i-#FmBPZ=p@gjg]3D;$t+km):Q3RJFL(.ck%?=<F27nmmgPjC_Fp?>a6UILc%D%)FVMfIIk[c[%9gaZ\jZuAA*AFlpI[-LdTS8N;2D3[DLMEa$mQ?pk8ME0m!+Y3Yr"1sMP@>-cY%R/0"*9H4#[2.4TM98)A98N:kf>f-/BMVS'<:;'X4i<"3ZTN9f0+?Z*d1\.Xg;k@Nd+\`Ws>1m*"k,IM&CWW]/0K:Fk%?F!0S00bh%kM]3C=CJHG]F5YZ5)_)IO(oO+P^o;SMgn&_7,Bog6@%K(5h9S[0^iSVpCZSSk;\r^[aV7c/%1Js(nobOFcj(`=t?lZluV.J.t1fo%2Jd?nl+GTPa)0MT<aDR;Sd;T=>Au!bo'csJ0O2"e2@)UkQdr6k=:OsElZ:l7(j;dIEQ]Mm6Ir0)o-#n0mMubc'f8_@2F_tZNOoo(%Zlp>G#7H?ld>u+daAu01rRS&pbl^9D=+G%)5?@hFh<&cp+'\pl&:uO3jB\M#O>2-*-r2piJjRq`Rn5KLbj9Vd-*k)r$&r-E,[+D%%qkM>,aKEYKOFU<U)XN\KT-q#>XKC7kXJ6`$B=?c;lUD7#YTV0^6i>\fZcD;@::N::K9CU*/F2/c*)f!CHSh%S*ni3"lC*.\C/0fM%ctA;_D6t?q'\J@r!Tg>p;1P?<868#[n,?^4qLL2sOJ8e*QGj"Aln2M$,MX]U'\7KL;i*%O$6FDN<ZHMTX2lH21lP=MmBHSaINnP&%D.W/;44QVjeu\+?g;Z%[#s`T*b3X`Fm!Huqd,kLHYkt(fjE1H+Mp8a.&eMsQln606AZhmrV].Z;&P7.f9qII*C(P[+h4Mp"!)\i'%qTKa;YcTM<m[84=/kn.UMU!9&?8>[g=s"upo9CpFP>7lee[Ls)UmSQY=`Q)qY2(tXdlKO_QEi/iflZ`66o/X3>:2ZKI`3X[`I."/%aa@m=A%mNA(d`<^a1;C-h;D/1o`,$C+b+r+C+Q%;k&,q#\"/+34=3`u@gi:)M/\2ri*3!,4-5EPp>Eq7X,ujO7?74BLB$=RT7!9F%nA*>Vn).M[ZT`2,_qC&KcI#FC5-a_DL&oE&\XS&m>VjZ<F_$J(oET`#rZ/WY#LE`Us6)`+B:R?:k6\T\5J#pZpO._W5O(9FV(B2B%=j-uo.A3n6#=cI&e=-bmA_kn7Vm>@;QV[o3il_YFZAhn!mKS[aZM1Z9,p#PK?M5dg\sd+8h2G(5#Lq462f59AiuC-@T@#`)$,%aq%Z.mftj@nM5%uZ64bPA3[ddVBpdu:I4($&P\[,L&T,OFZ3h7?)SGfQg)g%XfX2-h<eB0b'M2sBtudcAKX=hI\"26f5m)BF0dY',.?%YIEmB5C[fOc1Q5B<7d<1qle6C.k@ZJ-].ORK!Q^@WbP?$DIlFYnC.s[PDSU35MeZXLnG02D6,:%KI(@5Fc29^1WlM_(Kg8O'OkJ'%Sh.ma0%>1O`GY58N7/C7LB6A\@T\3'$"V/]Al-GO",ah(Ob(EM$7TKs&;PhS4u_pq1p5m@73O4m<D,=p4IX&bXLE?]ek^c7%M=6H%@D8DcrE"V&21-D]p42^irjHC2,snm#K*)N2/?<pW$0DZ:BnOTD*I>p3$53L2NYBMXl+r?JT(_-Y<tp,#9'"0Nif*1OPPo!$at@1i%HFJr06V$hS^H/%)g--HR5P&BsWTDNKZOpA>QLl3BSn,d]B0OgUK:BHFV=Gh(g`/n&G(6eSqh<RGS8^J?NN0JGXLhL?T[p_>>0GEV%p1Z_R2;ng!"'WmhLO5HINJkVIa9A\g<.$ErP'hL9.JY[f[%'48RW'-i9YhlVJY@gF4'8ZNBa9iE+Y@g)6*l1F^gUjfFDLA9$P\l8%bDE8*'bZD=5K8q9_o0rNU1_Q5R?:*`3T"ek-WI^&+F-q91j(7(Ll!?5'G+WKW$*rG">kACjd-YbD&UV1DSOmN672!1#DD!DcBoNF%(m:EeLhpQPHdo(>-qYS+<S"eoT@"?jXe;8S>k\L@@7cKR!7o)BbdMUdY26-IL@MM\<i6cm]65D]%m:`dBl,7fB$hIB-S<7>cN"1:%%Y`p*l3gihX&6h\i1m&pS@2)&3GdpES.Z3,LD[V5q7.Yn1S/A1AG.I]B:$42Xu9?I3!+%aHC!=#q63:l763ikkgij(;OLdg95ZT>%;tS@S?>;S6gFf;3T?T(1U;[6P\QfJQs6+E)^R!(L%V>u]>N4>X/<'f0"_CPN6>Y'$?^:lC-eY[^N7J5q;Z2,ApE=[9qZUt5cItS?%QqliGr_+mH6h<&KW3+Kk;+-b.ct][IZtm:OA1LJF(<o/3h4GZeI4pF[qj1p7nXi/+NO"#PVKa#c7LXiP.("EFj/%uaE.D+[l!3:F%c(UWB?6A95A'Nj!AMi4BT5^rV>;NUA>(PlfQV<epjME]FoQ[uaHdc5STYgi2;=DhQ8t+gtmKi3TR4t'u0#QCjl@ZA1\<ZrQ">&AQ%mMt':jcm^+aJD'c.1R4F!b%=:'A9YV+<??CqdFqj3)I2E1>">3SM+b8m=S>2mZNC[Chr4*6jd!j?""Id8$VOM''f+/DEMG7[nV`D%2j,"#]]K.lS7u6E=5s+\XGBqYgiIYV[p-+5UL,'C8R\%U?-u)q5/5l<Ls!qHSq(QZd>o(Q:30Z0'$OO4m&>h4M2J*lOG,u)/'8\@%,ipUf/&enYo/m0WTSc?,2q\b;Jg"2Wpjr=lgT!P&m:4GK'ciWHic0Tc5'9-D(Pi3(Upo6Cl0:.ChA2M,,(9p@/RGM:.!Zq&]Ub@_%T'T=74Ts5jA7$<aO5,7(_L=$dDI]U!)`CZEKSoLbh""*\B(`J^45"-an8&I\[Ta^n6T0"sT5=V;)>Z_4U0p3H[N,<Fr%n7a$SYcR%=[u[_EQXT`;=4qiiV!999.N+_h7tlF97m*p`jYJe0TqmJJ3&Fu00iBV$&7$`NZeq&;#"K#KcgjA+^_/sUpD'W1ru+4(dJN2PiD>C%:iN&S-gm#*"2>T-'L3o,6Umr<#&C-I;_r$p>=#@X,,4aHmA_mh0d\a(0*HZQWZSAAjt-<&!5^E;&epsKBG8b@75Fb?McA%THIHER%jFsKZgf@/Mf4[@L*#)=I[61h>ZAWS]"Lp")r6`YQ"^'8t4]Y<k#eKYLjkLu\S-tRfi8XoA;k!X?@$GH\0K]M\ORCom*V7dY(_qoT%%/!nmFP)lckU5oJK'>M1]JuA)Z$e1"g5q*#j]5(2LHN[W&u_rF"-Z)9Np+hJ5BEpF+7r*0[:4o88T)Y,Dh\&rHDl4hn:(2Hn:'B)%#jp]$/00C),H]2mr+KIS*J@*L5fkud@d4!:@r?IXR77c3X-9IeUo/MOoiRfaD-!]7ob&lc#fS_:WHs)P;;XdX"4[9g\>acSB8u<0%Y'XL;VWn1S6QA4dlL>?@EPgogLa\$0ne@L<J9n=dk$G%di+*j]c.'W2YEPhm`)nsK@ZMT.Ff$4q1e"o!;\.59Me.lZ(kc)A:jUUl%?n\frajoDlA256PlskaP3)9fU::N4%6bAj&]I-no:t\=CZh4<!1%%T`,N;!A-gTS3-gTSS*tc.:ppbmB`SV(2_)kd1@%'A:2qW&g%."20;HL1IS@G/bK*4EFYA?@c"fqLUgc#KamG#*dTof2WhZ(dX^/Y([4X>SKAIF.1+.4[Wi[psA:h0p'GGXPJLZ<iCo0McNrOS'6i%B%+DSXEQuTl^aE,oa&*S1pS0008?fqo`2,3nd`G+o`\uoPH;fc/Wuk]e,Zp&'@RGolt=Y-qU+B@:(D9L*_3/H$e('J[Gh)aJVFsj%_<h?)1%d4&3R3(hf?k7'F!s8uE"n/UR<mX=\9ID^c.(bl$H#)o9Kd9FXI-FPosdPnC_&;o!4As02OSl8aI.?%kY+-dS+E4Ce?b^4%mR03UgS"UYnQ";4At?g7.mj.K?1Tlga]%o,%lR@I;CmV(i_2LQTdHpl1`69KFE>?[9KhgC.R(O%of/qB(h?<'+JEOEP(La9OE3T.%<t[t1]@p8pn4ou)TJ\he*K@)>A_G&K:Xu%1Bhp2Wpm(9^1;(q#[,8%/T8)cUUeJb_k<C$0I!<r$q#GTCgR64iUdjmLREGhKX^Ds.%T$1hY(Zi)911.mU;H5Pd-M%7Q1#.ug!.*4LZM=KS><5WuX\9n.&=uQ[1"l*RDQUZ0Rr<"8^U3;`X\kI&M@XAIGTo`IbiV89`6gIT%S7,f5bnQd_o<DP0OVDCc+.sU=(us:s!2Ja`9]dSZ,^W>L]0i16GClF1a'[30QFVD@fIi;%\U<aUPIP*T+%I_s0-Hf;(u1@r!SOh*%4*t<$1047>bf=u>E^s:k+0_7n<saYY<;&6ACqaEX?.jTQ\?l#!+9G.AFe-DA<'+^`!Et,PLjepsY<Q08-RJ?b.98>u8U>ou9@KHU%#B877CPM/\e!\Aa..qo0jTEL8;*XJR5!lsHqbqr/4I>L:Y?\e'aBUq+"XUq#V9\OCE]S;l=,b9h?n*7FA42c"YO%jQHO?S'?67h^%TZgK7no;1KlbcZs3%[bk@j^)=aOgX.O[ZI0c):)BC*d]i=qC5fb6)A%cNUEcYIt5%)"ed4oH!7cI,$6Y\WP'/5!Wg1-'t$IJ80s'%Mh7pU!.3On?]^L#e]\o-'Kt2]Rga,4HiU4Ps3GjU7h&XNfQZ-TP:,p@haQYV0ThFU4!a80'D]-SM]bgVUYm6I/U&Q4!?*hfM0sNg%D9E%Q7)&8(T#c-TkYC2#5L'r<X:*.p94m`t:U@?m/X)7UYuSNoq2A2:MD.K@X0hiTE],;B\].i8`(B(4@O`I"b7rLQ;Y`<Fap;B%%+4j#$iYI.Dc#m"H4RuH80"3gr/7L*d\L9V+n*ShWASXE+8:8$<nN8,E/IGa.fl"pQ?Z)N0oT'-G9oDuA2&@\?)g@$3`[Ma$R7$CO%G>^eW7QH;,is?TI'(n%[#H2JdY0ZV6B8W\DRc2[`jl.h>eQLQcLmo(%Ig+G`ib6jA4O?bN.6>1N9kMd(ksi"ba6'lS>7s+DY1;d)%R`K5*O\;t:^niffR1m;Bj[7Z=fi1K/)-(B2e9t_*Xm4;F^a/,/5V6pOKksQY15P?^n.%]<8uJ%6PX1e("&W)t/rC'TlO(#+I:P6a%O\)j.YgosSm]#9(l<J'-R7EY9H!#!^MlBt-\2fXS`8sP2"U:3hfE'C%+4Q]:9:cXi@-s\o-Ki0A,i^?kq)5kL@]\9<gk3tIirSfs%&_rO6kmLfEoVZnW:hon4Ot[*=9_i")KOe]n?k#tJ-?M"j!_P:(<PG+;n#ALVbf>>ccTu3mZX*"RF(&uS2T,5NlW4[fJ+u(#VPoB+%pYgd1R3,i!SWN4<M(s51IUTQ3)(Od8a>iM9a)cZKgLV*2i3@a!"HdhMp&?`*0M\4R[bDsX-g\=Yo8HOjeg2NMk/cQKq!2P5q>FU[%79mA$'e/p8^j[2%N%S[G&a)-iCARK$Z>p#5k*50c_on$N*eqr^h(;=eO`;[6,P$dG[sg+j+Co]l#alsndLmh^Y1QHgrjH?6R^/W5%m#i4p^Y%0.:^PfQOp@ojpkX.89oB++BgE1.3NenI9\LKCmht"Z\D\'"MAS+<KHJh*9mrcE\_WN5)9cQdQn<ipaEDi#lhD;;L'<mc%p)A6<<09rMQR+G]Dnh-4)7LLb-C+6!bnf&QP!K&h?([MZ-lle^Gcd"?<*)i`^Tr`'=f'GSf&(:EjQEcUR2$!ga?@nTmCj-Jq^dp=%Mmt'fGdDEHiXf50:6`i9/fuKE.\4+GGGmf@Qo;WC\q5KT*F_Z6VYY(B@a)^^Dbp506?oG2ZQ>BMZd)XLqaV5O-:BWs@4O1be:HCN%>eiEMR;ja%B@AuLO74DIG"hS&?-BiH&%Ql91f]!-Guq7%bd._5^u2@aBM:.a1>)hq-'7.db&m&D)4m"IlD07'.b-DL["s:NPBGg,%>qH_HCC9Nu44p&ngCCU:j2k/.a+FjnHs,.Rc*-A&6h:jof[HP$K8%Cs#?:/c5sW[sXN,:CoioF'47`sPAV`g[lKU8tA$EP=-l96h%_'r6toZWg$JD<CV;`sR!m<i$'F!Cc$?>^lQ/nZ6UDFak*b9-)?p&RZ'U!c?W#18i8'PYjVMteI-E_8UXf039h;<t;pT,U93<Nhfd%#;X$8=<%%cO'E=8r'C6Y*07?_grtCc6*MH9TU_N4*;mSY>u6<?Quf!9L.Wn,FCg+0$eO>c_>25j\8FcR`hl/eaC_]"J's_0FNT=C%7Pm#%W8lG=4*,^0k'#L>f(X>8EDTbqFPUoO1S__\Y86mCmSFnDiBUcVIQ3//GTBlhPVu)A@(EIc"R`#]<r^tCYse(trGrJRE3MdJ%'WkVYm3#Z(ZeH["@QUms.5VeI+hOMJRCDa#2iun_<MbWfZ6rj/m@dfED9ZFTp,9*"#%$oFH?;njoOU>hD5MC5DT3rGoeVB'[?+R6%MK*IFDhaU$M)LA%7),Ht?;Q4KH+<e,<T)>fau@'^4UiF9[bnj5CIe'Ls.=moCMZ^&?0>hL@HQsl-i!39(9lKTqp,d\i/&/0$U`R2%LfCc-XpS((Co]IqGbpW.AC2[ZS*$UFaJ6!UF7``3Ui^*sAN3`$Jf?Y\>P#AYN((<`*>sIl85b7VX(p8Vg?TEZd/dhB,s?O)R1)YP%(?iQ]THcd^He12U]1&\;Qm(-]^=k"/'?,6])9Lm+&FXu&Lcq0g(_=lcVc4k+gC4KMqU"qDjnTkDA?R'aP697homoM2Cu.XJh1=4B%\Z2R>=`f]cUa9IO%3E.D;`p7.RW6Ppbo=`.##qFCl&!&?clO:cS_14&XtOea1VpWnU!:c5@G5<5CB`K:/$3d27aF8e;hkH[*,'u8%fkBO>``P-E!(iZaJI>qc+ckga>)2PEEq&)qMHBKH!?=)N!*X%)c-l1Allm!ubgirI0('kaW,8FQ(ERT+MHQ_X6FHu/W4-A1L@+Xh%lnK(dpQ+<3fo^10[KXLtK+h]i5MQC]0dcD0[!@1o#r_<<I?7UH6KbNV_l/-l0kHo!q`5RYMFC5R%No9tMAQbGW7g9E2_9OVaPRE\%3jf^s7V$smpP3[QmSDZB-lASV_A3`K&\adn\R\HS'JEG335je:CG6EFEN5I$J@6KjP`p#OXXW&cMZG3&SR\WVdu]8<*nl;j3h`fc%+WRQB8Z>DN^i%\tkc8brfTLh2bTsbeHdQYkm-$=%T5S*p_EED#'1otNnW'`*4:fMZd@AR2Zl<L>MPNk)SYr[Xa<u^%MF`nM>TgC`%VKG_mJJPQ7"2pm'GMS#0XH#"V?Iib:o:,/hfj?Y]O*?%;-m8C(WIEiIQL-'/G$o^BH@+COO+qu\9iO#B[nl=gJ"ksCS`_qb'b!:>%4$fCaLGb"Cj"X#QC(+J6FRO=>L(\=Vh?@F+5[L?)VD=<Z!:BA+&UQ9OcI-TrZ789XDKs)#-&mg=%G(mY/jE-d(#;.;h2[9K:m#S?%DL],][`[:'6T9i*NA)-@OnM;hkd/s2pdDcEL?kM4PX[@B:O>XRW-U(#fTqj-8)*Jmb@>(S;b2W,hB>Xe4fM%=1oB0&;J%&_1>[LL%n9hiE>6<s]#cGAO/GC5S\hS)(=f6I.R6(,r_<qoVaf+KV>*u$7P&K%d8B^FVXIVd?Gia;)/<("SYTpfm*MT'fSht*ciNssW/c9:0%:roLD)cRg,6BY/8FC2uj$/s9Jm\tQF@\jSoiO%&JhEPC_[)3Q&eV;#,/nfEVE5JF\(qQ)6LG7HIlUZS#rc*K<EsjJCEWEie)gak.%b=Be1QhI?o1ns"I[c)hhNYSUYI*-n@6LZt(cP769ms:KaGe91TCJNr=FF$$k!SO76,g[Xe[9\nMoC?#5icdj!.&V5rm1AOiHIi/*%8Vb>R+o2E3fcBY,VXC+<8_qpQSTBZ1<QmW3UFtT]l8\&r!\),[,it82X^]IimXoLS0lU"#_uX0+g/#0ZOaqJ=]$8@0<5%WjPt6)[%Pqj4[^c,2p1T$Jqhph52HKJlWNQ6DF.XcU:$BY<ugRN(bib$VA'?Fn%ODu:u2?q='96Jc)m$8)TftX<K?7#qcb,WE^:p:p9ad^LE%[sr%1A!q.EqNKBhM"!0?@Q8m1;]Lr1.IU4<bBW1]74CdM4RDpAdZ7lrgOGos+:9:HVbNaaDh^;=;XhNs=rYSE/#&SX\n.]mM_2Bc%0?YL7U>K+ZftFmt\S9M?aZAg+#J4A`bkM/qFn>aO3c2SkOpXEchg.Al,pf[=ca*`:e69i@:AOfgN5)#2g/Bp<j'd^4@(A`BH%9;W%AVg\A2UL_ECq^nOAF0/Nd3g4c6,dn?enk%,F2Ut:+L"l)0p!pAPADjA>Y4:fcF]KWI#G\lPO[da4SbjVO@>S$lNh,qXh'E0K[XZt%p7_5aN:-G>/JQt.eJ;U6#8b+=HE74mdt$n4*oLZ9[2<2?&'"B?D*Hkh)%YGK]qd&\_N[&RZ/:g,dNK]T3OFVW]^'UN<\.%ud8S*^%6^Nl,hE(5\NYbR"RkA&E^2c_;Q.mkr2c\/_lq1J9<K;tLRX3nlHna+n:K<Eak>fKc9l5l'ahKc7N`cY!AAV;+lD]-$2Q:^2@dcU)%0N[A7[pO?apYbFN^Zmkd$]pcca%;O,"?UXLBW#<K;WYDW+K#HE5#?\p^M9bgd#^7sWr*&mQ/=hKP@R7iQRX(Nc;Y.3lZ.AXOSqRQ%NZKGl%[eq>kN>$'].V.F[<U0^)"K$"LM9c4<YBCT\f?pKI5RnFZ##kD&\3p6c%Lis2O8WXq:6&RqX+)5?/BR:8peqH+=AUd`cQLH%+_)m8"]lt$/o?&f;Wn!N_V",nBpFb5*2WY?C=&A,n!6LgC3*@//<B(DrD\q-`RXePlD;dg&@K\/9$<3d`g&nh9GZ^9mqNd,-_Cb&%VP\V'ZJ+7iJYijqi;9YC09\H;VWjT97X^;n'_S9dF0)i%h'%21(i-+K5$q,.iMOq>OS&>L8tY]l@;^M=T2[*Il#U[tWM86KkkP-(%1X6^2)aXI\b'@;oN!fO3$(!t#/:2EhkI`uLAI2&&O"5T/I?%U`P^P*2%ac5=%0Gg9?;jej$6=7lFZSCu*=4s<4g_i6"K'S/B=I\e%dca%QLoo$DVlT/m=6ORKs2sPST@-p5q;j#/Tu.`n(];'go?.U(9aoP8isJF5[0B5.??X]sCk:U(,r8VF;c#?`b>Jl#<Xk=*FrE"8%XLOFe?1Ie`3J%&D9J9c?:uPXNcG1uNP\i(7N6_MbTeO%GfnkRindctK"&R*C0YE_bO!9!FPq46l/:baSF/`'Q*mc3-D]f_k!VI`'%'\,:<\rXI&f(NdVnmX<JO#mT2g6f]g!YU)5NQnM7Tn[lW2dnHMN=f%\Ur_V\6"]C/<jIrGL3J<QXN29t4To=p2lVJ5R5pKHB(4@W%*^7PT8I*4<(fN^(b9^UtJ*Bu4*+Zb\0-(pYa5W<Ap#0/<#co9'oD&T&j6m!5=ci.RE-["u;(oZ!=T=>S+*]ls.#k7"`^2Y;8PRJH%B\AXOnlMiXJLesl>EGuL_Q[T4Oi3sq+5U972qftMG@3;V"p.(WPT?W!o![slMTBg8n?)<A"Eh/A]-\(0^/r&[a"T,[.!GnU/no9B%VVY=S)OUJt>H=cF-ae2c*0m8fXY>#hmeqV1+"UkSD2`sEk("FZBAFaU]1e16@DcXe?&=G43q26<Wm9<h7L+%7CJG"VKWH.>.1FX!%*->u#=n)OA*t2@^O0jgOkZT!nH&c+8WZkhq)7/Qs24=rI<\08]]olol"Z)mh:"%,qObElSa9qP%/o25OInI>/4/29=PIi;AE;>E$%&%YQW:1!ktl\_]kG1.&hjh,0Q%2Pa9dL9qE%]mb:b,rMTmlVC-r\-pq0u<!^2B>kDJh\/,A_M+YjMgc#`R5sOn8Hq)/*lg('FTfE%YKDr57`kY2WYQ0NoG<*.W-0RT5^nT$'j7d?G]eO-(Xl"lnCCIenHHIia@/p]ro=6bGoq?QK97@70<7j_k/G48;-2X'jiaK\DtEg@%+:7l,VPkjm(Y$i2L[<Dhp=4P*kLV\uQ7j!gXs.gJRZ'^p8(16\T!JcJ:(m;E/RPUQ)mjs<K$/<Sn*O\oC>9BgiK):V0YA!E\DF(`%Q_'&V\L6]O;I<OUcgLio5Ml(VQP3n+[F()JJJNWE2m7<1+#N_)*MH_];sc-sbAJe&`,#Hro3rBC_8$E]qRt^.l>G1h$sVXpX91#_%+kn3FC<s:9fn]&&Z*,6eMmqF1rpp4oa[!Fd6A8d,:Os9<5LK/C]5GmDYH:[*rZ@U')Q0pt\<O83mIDH-5Ir6*qR1INCJ"3t=6BOJ%[Ins8E:J4Io7S%(<?AMi(aeF)QOY9*S/.o7Ip?BhX!fCW;mqR?(Pir8V^tU*$2SB@SQLmdA#[[]ZJ`I"5`NA,9u8Ilp!/Q5AHDVC%<J.ma`m(92MZIFSo>YrC#4lRcBRC%^ZA>Mh4,oc_H0`9QM%"BT'Mm--nd.&V^j\U=ccMW]:J&ihF"rMDIhLD!>^#g5M9t>*mClq<%3fK0`rEYDI'WUH?(iC_!?26[O(3a=:)O'>8B@FnFW7j],-eOF8pQ=c2DG/WSPt(lijpj[9g^\cSCd@O49[37$!=H#kZ0irRrbR#d%q*(!Dr@+Aq[VS1\j4`/gYJ&W=.,Jh7&%tq5G"(rhX>j)L3kA?.?IjR;X1!jUH+njN+0c&(ONC6K%_e-;$PK`6Z!EV1.sQdjf[%(r%Fi^f354Wj0bNVb_s(?r\lCqtg(7!Kp!YI4m-^'AKGTFWmr^?*KY&dQ9"a%_h.t#`gLs--OoE$B[YBX3tom%.^++?\@hI)Sa7\mMj%IEDo>(u6-@$.f2oHICZn]J$!AZm48F+L7KgYcY`<I1,d7nR;PKX3=^sr@0P;'CK(mpPN4))O/@BBKaf>l!F_iRm%$S2cC8/\BJ^#%)H9N'#H5gYUE-!-KqV<I'\"/&PNh=UOHC-hXJsJWr6,#_giR7?VlPND(5@0&=9aH9*u0.dW2dX^?FMIg+mBt!;f]@ZS@AB4i/m/>%/CP',mpnEuD_k#kc_9gRO3m=X#r5BKHs*hV8]OViH8kdos0?DMnGP.+9[pt-^9Ue2H=\l>L__^X$J\Wg*^J)kf/I)uMqGk1)*gR2%a'QOlQtmBE=_GL3^!ZNp?cst+`*RYDKobWKE(*hN4YdBc$K;X,:_oC_LLNC!G]/cV,(?hKZ_]BE+Z_kCW4"f34@kT]CPHj4autXg%#%Z<HXV+10fVZa`=$*71Ya.Yn*MSFmTR?G>nLf)+U'no)->i<$_Gr-17Nsi@9?0I65T`QW.`(9N1t0/MMMn>/<;*Fq<iRj[%eNe<%'d!h[MOuk_FVF31GX=<oeS"ho2qsA"T\L(@7/9EjVrV<pTaXYUCo%6FH%e%I0C$/_E8*,r<H%22.fsI2-n-5arj^8-G,o_e4YM\P%!jT/fU93F32Ro[Q:nO``P8?2Kou6;77%mFgYUq!<IlD+n4^,O,+8cnlI^Pu"NO'iYMR$&Jf5gW<R9Dm0Mo/A!C&hGgR/<fPaP"VB%mq\XR:+RCQ%Ijp55e>*NP6O$Gf/9>37R7Y.i_%5T1G%+([Th/[?Bg.SrC"Mu$EckZb]+5+`Bad_/o,<2QtbqiVah^CgHIU_kZ<-#%D,ti=qJI_dJ99m#DZmWp"+bTEnA89^NDQ7m,TNd$eEV1M;p>6>e$CgI61t[2MZHgdqjjA&.pf"3M&06KOQ876?!DM4Ip2$YPdt=R%<0!)J3<=09W,+AUC3/pbJn'k-I>J!&@I/qj[HgQ$33IQu8BKddqs_RdZL3mGW,rQKjB_`h`$?t;W3VI8?/\F1-F#oCG9fccMeN_0%KhSrg)BA9]M=t3K75[jFe-7&1hIu;\;-cK_[Asf5<ccB%Zs-"NI$gQ]EoRqk:`X#.:mkT)5c!a,<Er9upMX$i.r+d'Gj^'pbHY3@%SKHsGrUPI^JK_B!C"1Cu3+W+/IQc`0WLi)OFmO9Od"q`7TMfs<9M2pA<Gd>u@LG<$e_KK!hU(p$B'?rq""l2k0e;-,2:Kr$)7`C1%R(X,0cq"s:Z0"H7l%gF,D2QQ[hl>;em4Q"b^C>l_Y)4'.JYMT)Y#&[F-qd6@of]QV;.A68"+q(O!+X@/)r2ii<maTdV?&N*Q?^Zg%4!nG%72&POX:Arc#4_,Cq:/9bR1o:sk]-M'-"t'Xrr->m#2,pAZIZuV'mI>71+1`#\k<AdHGJLLZE6uER=j(714cQ^4h*S(_`@4F%3XbOuU:^W<T3I?_^!=)FnbM%%M.up9fj7,FamSJU3M/P(XEn*6],i=,Fm#OTU)df^d?hF3qf+&'gBUV`"ZM(dISg]UdG"4_B9S1k%lXJ/aLP]d=rS'L3M?J/B=@]"kh(2F9%#KKB_hEk0)QCj*+9`T,]?WmKI]q#K<'Qq-qp$X)G'D%gFUm)2/A(JaRU)&V3.6"rI;(%)%Yq6bm-$F'tgStlRhl//3BL0So0^.!dR(@0n0Ar--MRjOgZ,IC146hR&8Slu%4VJ+f$l9pM-'iU/o8Fb=%gGXgYQl6L,[oAQ\kAOi%-*8!rce5!)KqVp6'rWGdU.M8]F6L%gY'-6a;U[tHc)@cN4t#30m=!(be3SMpMI'G]c`;JB]1;U0e-htMN8eP(7mMbW-pi61n,[[m%%,WdoLB5@<^FW[f).hC-\)1K!!*M>ZEn(5+q,S[R;!nZd80=\!gNU%mc&,5l\$mM@3^<UYYZ5ps*@hiS>9?TG?2a9\^lT<rf/!:%%!#E.E!3*nCm!;kMEIJ[-0;q6!6s]4Omi`B5'W2<U:th7MAGVdHm:s<#eiLV*>c4MWce<Arh<bK6kk#Ko="@D%]$#eJ,.#Y)b+j)P%3s&N=aQ[-cPIt@l8./\W(Be)ZJ=lQ9Y=3NMGf:JlS<V#1?s$sj=Pjp+pr5dODu&9`KY6,T=dNjNO[f5PA5JaTh<K?"ermdG-V^Yc%[^/'fRgkfIh*.soZ/P&b$2KIh0]gf4IK1nEd]>UGMlW4CD7Yl.;S@K[M3<I&1%8,L""G+F7+r^3bW$]uc0JsYg>a%).cuUe1BAiM%X-,>4?"Lh[mV'-u]eiI\"cg"dIGX;(;hk3%0#5^iMp9gn*-1eo(7VL4'q[#mWWb6E:'SZDSXZH^-"P)@i.eEsQtPgG:LW/HNJ]PX%P1>iPBp6?tgp;UVSO6q!];Q^dm^aBjrVU1mEF,IJVmXt_\9M0AKJWj67o9E<cVo;G%j2#iFpASTXq1I^<n-5I#1Cik*<dR.Vso5[%B4:m1AG=@6k3>[Ni('YOK/ipFKRMHJR`-A>7DaW[C">Odp-PP24;%?NMFl9?;!"NI:<Wkr.QNMF:(4(^LDt@1_-&_!\G/Q?W7t=Y%J>2H\gq!V>W-6c=n056AR0o)Q+;PSH\X`4;(,,npX?@4)2b8g:@k@J@9p(qgG`5&Mgbd`"+-rcdM_jYqe#lm*;(r6:[Lc>MLI%W6%<AkI;QdNO)a#$@S=TTm'R>sh:QZH(X^.ujH]MZ:;</E#s4r9O[.(eniZX[9MGoWXbO(%Ej:pF&'a?]<\Xr9H=>E)ofXYbB$G)DKb%^LFde@U_JHnpIctp&+BI\a-r)Jl91k6leIm095GSMni>?J63Zd!O?05^Xqgug%h,p?=#!C^PrH$*q%[rI0R?4g-FJa5k#j^8n04?%_&gibQ,pTc@$QtuT1>_YFN9;2_CW#48KZXqs+0KA8-aJ<[3&]lM<D7%Ea=BL$XtT$57lUq:`qq>Zk7s1$Zj2h78'fYHF'fglh6gO%bj<f_,i?:R1[IV]4CSb8Zhl\;ES++HNC^!s/o&pp\=LlHf_$?!li*BWo]KrP%.=]'-7#,GX?46=nX_WL.!dV3BdZkFBdu?IAM<Y0%Fum?@Q+,Mk?r5TrQLdU2kX4&)^AYK)^<l8FY09kKPZU=11J:$cCk^n%&<J(\\Ao3YXCbUM\BpSq-,=-\rjiC3i(&C@D\WQo'M0&6%)/&sQj9tqV*O+aQ3f#!bdX`09r#cZGK*S#KGQ^c.bfUCC'ri(;V?o4I<[Mi1Kj28<.lDT<GVWHFUpD(:SIF[d0AFkLUF57I(O'KU%mK/:8=mESBo`H;,??aMp-:\";*1YPED"GdtK*/dLm_?).o"1T7J];ALe1[jm5%(fpel<N*rH.oN[rs`j<C9j)?59t^)Gp10Ugm+]%XIWG$j&62P$,%gk,rUU<Q_@V9H%j1,K#R>ciIpa'<jF4PcJh/\2`AkoU2RF"$0&IkIBj,m_$snSUfFI8dJu>7$FThb.?DoA8fhqW%-(lq[rYr@,g_<e&](0`@ED"`U)LbHG]Q^Y86-4K.RjDqdjIH$KY49r/Jf&7q9UUd")kae,9=gUPTT2/<$14ef%S-osa.js+p<YGT%m,)$`mJrJ0+0o;9I<arB]G'?q&o+HAT#$Dr6R`mKm/XIQ!!1&&SWR_)rY?4>*%-D0f78.Bl=a6^I=/fsJrX2$_#i35q)4H<"'b9i%<JTqgIAljOFl10X!b0`7i)NjGIc5nnX3U&P1W%F-XbTc$OD=/%MAda@HZLmnO"1#C55/SP3qBG,OQTqB]*M4upkb)Q4X.4a$>\_g%C?f3^>(V'`FZplY0G!t3nJ2E+kGf6_KV+lDS!@GI\r!T,n@ftWAglAe]2ha>j_,c:[36k*=?nJ&r5nlb:VM=J.aS>X)Of:j_+M,L%&MC9>H-^8R<SUK@SCAT3H_h4;EH;OZ*i`D8=Wm;?eS]M1Dr;8CdG(X8@Y<AX1fY'K[6$VBd:B.aUOrW(UMN7]pkj`Ze(iuf'RP?d%\?O1.7gmBfV?!(7#:T*[I5@2CZ9K85B_0I&>c1P+/EpBNnff_PThCn"S<)!M(g#/$+HsOVcXm1KpRp`="nB8:a_ZY(PI"2RU!`cS%6;t//L'l#bqf*JHmffsbEY?K%pp@P(34"-9]pPDtaYk5F&QUIVp5rJA\qR-A'[>TMBks+/Y<Ub1]#tA4h.AGf!srN[_(,`>,jUn#%Z/n(a.Ao:FlH@IYaF-G'-S'AbBrRQMJ8c)D:S.iD37r8M78&AZ]N\a48*+a(K7-tu$l'K)Lc.fUW[EHA"`:Wb>J#`u\?h5$*1M.c%YPT"*rGfPGS*7T:?84[9L-2[Mgb@npjX.u)9d69Aej-<9kt4JRAkqXJF.='u70\K`<Ph[d,FX?h;EZD>hQnCb;KX.gkPUYQ`d'f'%Q"ee5J)&8T<!IpV*X.JX.r+,<6u`_=F7"7KWhOH_>k3r:+E*;jDpL4H4nb\NC0n%H]A82);"*:^!o+%"D`@b1gil!1H6Uir%t2\"%]oUP@lO^gQU-`\\8&6iOoIME/^;C#gni@0B.k7ON#@/+4AoSV)%l-\<LM7(#"[&S3aDKCOGUmF7P+)IGD.0M/b2m3dGSaC<YVXND%q1Ls%YSNeA[+d1e9plb1*3iJZ9A%j`@r6WJg"[=C$d]177SPVg!eCEO2UO<M[-L13f'6*!0a.;$4,9ui_,]P1M9`^PVS>@+QCI;%%MUCNm/omJj.0USJAO@AKkis+MrM"^YlT9j?/BUISn;<2#]d,l*],'TQfodde\K-2h8RrMsG$NFKIO"WE@oa0n>5!B*E)KS>=qh,d%Zl,hTa28,f@rI-f"7/=^fEIGG8>ojjf:9R]pX*5j]&%Vkkt_d$%L/0d2`^`i+o'W&psuhYTd9G?9!UT>2_cr[.<nro!T\soCTqVq%&JR(p!7#i$;[&":Y\*Tg;T5`fb2MrCjF''oPss)`N^)77f>XWsh@O&-]3Sh@/[q$:2HCrtmb>!d!!BJ;^WJ)fC#$hd[d9W^oH(Uf%(%.W@f1njs\oam"+XMdHjq#`]4-OPZF8?%GR1ejl*Zo<e2No57`LRT8<sXLjFnG!>R8;b7(S2*1qh*LOj&]f(M@>5RMRS*9VAk1j%U'&9AgEg(8c*8t&>\,DqPI/OMEN?LXCB3q"X0O[fO=V3C(H%d-)W,Gq(X<fBmoa)EE324>!m.I%Ib0H5=\f9Yjefj_N!M:IDpXlc%GhZ('Vm'X^n[=<bDL6m4W^F5_HZ$<)"c;13QX.u.UF57I[pQRjn><*:aPQ)ks62rk.V%ApaSE],(9;7hJm=DLL'`8X-fcQcClJd<%<po=%)[PTZI<Y[k%bW%#>JjRT!m^TOM",<eFT(J*lKaJ>m682IlRV#jSLVtIVpU09J'Cn>rknC8^]2kLr:]H[s8M3]q=B+3o:Q$Q%o2CG*_lH$$a*0cGe%aJ+s5bp6p@4LLqs//brqPo:+9(jbJ,8iQrq=O-5QCT7]0H8]QiI$Mqd9?nQbWOuQbWRsn*;Xqs7G'LJ,B+M%J,Ap;hu:Z'rst4aLmnA5_nZ,I5J6lCb2HLq~>%AI9_PrivateDataEnd